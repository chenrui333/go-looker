// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/swag"
)

// UserAttributeWithValue user attribute with value
// swagger:model UserAttributeWithValue
type UserAttributeWithValue struct {

	// Operations the current user is able to perform on this object
	// Read Only: true
	Can map[string]bool `json:"can,omitempty"`

	// If this user attribute is hidden, whitelist of destinations to which it may be sent.
	// Read Only: true
	HiddenValueDomainWhitelist string `json:"hidden_value_domain_whitelist,omitempty"`

	// Human-friendly label for user attribute
	// Read Only: true
	Label string `json:"label,omitempty"`

	// Name of user attribute
	// Read Only: true
	Name string `json:"name,omitempty"`

	// Precedence for setting value on user (lowest wins)
	// Read Only: true
	Rank int64 `json:"rank,omitempty"`

	// How user got this value for this attribute
	// Read Only: true
	Source string `json:"source,omitempty"`

	// Id of User Attribute
	// Read Only: true
	UserAttributeID int64 `json:"user_attribute_id,omitempty"`

	// Can the user set this value
	// Read Only: true
	UserCanEdit *bool `json:"user_can_edit,omitempty"`

	// Id of User
	// Read Only: true
	UserID int64 `json:"user_id,omitempty"`

	// Value of attribute for user
	Value string `json:"value,omitempty"`

	// If true, the "value" field will be null, because the attribute settings block access to this value
	// Read Only: true
	ValueIsHidden *bool `json:"value_is_hidden,omitempty"`
}

// Validate validates this user attribute with value
func (m *UserAttributeWithValue) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UserAttributeWithValue) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserAttributeWithValue) UnmarshalBinary(b []byte) error {
	var res UserAttributeWithValue
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
