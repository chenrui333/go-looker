// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// MergeQuery merge query
// swagger:model MergeQuery
type MergeQuery struct {

	// Operations the current user is able to perform on this object
	// Read Only: true
	Can map[string]bool `json:"can,omitempty"`

	// Column Limit
	ColumnLimit string `json:"column_limit,omitempty"`

	// Dynamic Fields
	DynamicFields string `json:"dynamic_fields,omitempty"`

	// Unique Id
	// Read Only: true
	ID string `json:"id,omitempty"`

	// Pivots
	Pivots []string `json:"pivots"`

	// Unique to get results
	// Read Only: true
	ResultMakerID int64 `json:"result_maker_id,omitempty"`

	// Sorts
	Sorts []string `json:"sorts"`

	// Source Queries defining the results to be merged.
	SourceQueries []*MergeQuerySourceQuery `json:"source_queries"`

	// Total
	Total bool `json:"total,omitempty"`

	// Visualization Config
	VisConfig map[string]string `json:"vis_config,omitempty"`
}

// Validate validates this merge query
func (m *MergeQuery) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSourceQueries(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MergeQuery) validateSourceQueries(formats strfmt.Registry) error {

	if swag.IsZero(m.SourceQueries) { // not required
		return nil
	}

	for i := 0; i < len(m.SourceQueries); i++ {
		if swag.IsZero(m.SourceQueries[i]) { // not required
			continue
		}

		if m.SourceQueries[i] != nil {
			if err := m.SourceQueries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("source_queries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *MergeQuery) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MergeQuery) UnmarshalBinary(b []byte) error {
	var res MergeQuery
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
