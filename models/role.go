// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Role role
// swagger:model Role
type Role struct {

	// Operations the current user is able to perform on this object
	// Read Only: true
	Can map[string]bool `json:"can,omitempty"`

	// Unique Id
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// (Read only) Model set
	// Read Only: true
	ModelSet *ModelSet `json:"model_set,omitempty"`

	// (Write-Only) Id of model set
	ModelSetID int64 `json:"model_set_id,omitempty"`

	// Name of Role
	Name string `json:"name,omitempty"`

	// (Read only) Permission set
	// Read Only: true
	PermissionSet *PermissionSet `json:"permission_set,omitempty"`

	// (Write-Only) Id of permission set
	PermissionSetID int64 `json:"permission_set_id,omitempty"`

	// Link to get this item
	// Read Only: true
	// Format: uri
	URL strfmt.URI `json:"url,omitempty"`

	// Link to get list of users with this role
	// Read Only: true
	// Format: uri
	UsersURL strfmt.URI `json:"users_url,omitempty"`
}

// Validate validates this role
func (m *Role) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateModelSet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermissionSet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsersURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Role) validateModelSet(formats strfmt.Registry) error {

	if swag.IsZero(m.ModelSet) { // not required
		return nil
	}

	if m.ModelSet != nil {
		if err := m.ModelSet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("model_set")
			}
			return err
		}
	}

	return nil
}

func (m *Role) validatePermissionSet(formats strfmt.Registry) error {

	if swag.IsZero(m.PermissionSet) { // not required
		return nil
	}

	if m.PermissionSet != nil {
		if err := m.PermissionSet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("permission_set")
			}
			return err
		}
	}

	return nil
}

func (m *Role) validateURL(formats strfmt.Registry) error {

	if swag.IsZero(m.URL) { // not required
		return nil
	}

	if err := validate.FormatOf("url", "body", "uri", m.URL.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Role) validateUsersURL(formats strfmt.Registry) error {

	if swag.IsZero(m.UsersURL) { // not required
		return nil
	}

	if err := validate.FormatOf("users_url", "body", "uri", m.UsersURL.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Role) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Role) UnmarshalBinary(b []byte) error {
	var res Role
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
