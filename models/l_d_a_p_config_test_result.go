// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LDAPConfigTestResult l d a p config test result
// swagger:model LDAPConfigTestResult
type LDAPConfigTestResult struct {

	// Operations the current user is able to perform on this object
	// Read Only: true
	Can map[string]bool `json:"can,omitempty"`

	// Additional details for error cases
	// Read Only: true
	Details string `json:"details,omitempty"`

	// Array of issues/considerations about the result
	// Read Only: true
	Issues []*LDAPConfigTestIssue `json:"issues"`

	// Short human readable test about the result
	// Read Only: true
	Message string `json:"message,omitempty"`

	// Test status code: always 'success' or 'error'
	// Read Only: true
	Status string `json:"status,omitempty"`

	// A more detailed trace of incremental results during auth tests
	// Read Only: true
	Trace string `json:"trace,omitempty"`

	// Link to ldap config
	// Read Only: true
	// Format: uri
	URL strfmt.URI `json:"url,omitempty"`

	// User details from LDAP server for auth tests
	// Read Only: true
	User *LDAPUser `json:"user,omitempty"`
}

// Validate validates this l d a p config test result
func (m *LDAPConfigTestResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIssues(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LDAPConfigTestResult) validateIssues(formats strfmt.Registry) error {

	if swag.IsZero(m.Issues) { // not required
		return nil
	}

	for i := 0; i < len(m.Issues); i++ {
		if swag.IsZero(m.Issues[i]) { // not required
			continue
		}

		if m.Issues[i] != nil {
			if err := m.Issues[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("issues" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LDAPConfigTestResult) validateURL(formats strfmt.Registry) error {

	if swag.IsZero(m.URL) { // not required
		return nil
	}

	if err := validate.FormatOf("url", "body", "uri", m.URL.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *LDAPConfigTestResult) validateUser(formats strfmt.Registry) error {

	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LDAPConfigTestResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LDAPConfigTestResult) UnmarshalBinary(b []byte) error {
	var res LDAPConfigTestResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
