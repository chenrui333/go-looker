// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ColorCollection color collection
// swagger:model ColorCollection
type ColorCollection struct {

	// Array of categorical palette definitions
	CategoricalPalettes []*DiscretePalette `json:"categoricalPalettes"`

	// Array of diverging palette definitions
	DivergingPalettes []*ContinuousPalette `json:"divergingPalettes"`

	// Unique Id
	// Read Only: true
	ID string `json:"id,omitempty"`

	// Label of color collection
	Label string `json:"label,omitempty"`

	// Array of discrete palette definitions
	SequentialPalettes []*ContinuousPalette `json:"sequentialPalettes"`
}

// Validate validates this color collection
func (m *ColorCollection) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategoricalPalettes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDivergingPalettes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSequentialPalettes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ColorCollection) validateCategoricalPalettes(formats strfmt.Registry) error {

	if swag.IsZero(m.CategoricalPalettes) { // not required
		return nil
	}

	for i := 0; i < len(m.CategoricalPalettes); i++ {
		if swag.IsZero(m.CategoricalPalettes[i]) { // not required
			continue
		}

		if m.CategoricalPalettes[i] != nil {
			if err := m.CategoricalPalettes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("categoricalPalettes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ColorCollection) validateDivergingPalettes(formats strfmt.Registry) error {

	if swag.IsZero(m.DivergingPalettes) { // not required
		return nil
	}

	for i := 0; i < len(m.DivergingPalettes); i++ {
		if swag.IsZero(m.DivergingPalettes[i]) { // not required
			continue
		}

		if m.DivergingPalettes[i] != nil {
			if err := m.DivergingPalettes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("divergingPalettes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ColorCollection) validateSequentialPalettes(formats strfmt.Registry) error {

	if swag.IsZero(m.SequentialPalettes) { // not required
		return nil
	}

	for i := 0; i < len(m.SequentialPalettes); i++ {
		if swag.IsZero(m.SequentialPalettes[i]) { // not required
			continue
		}

		if m.SequentialPalettes[i] != nil {
			if err := m.SequentialPalettes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sequentialPalettes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ColorCollection) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ColorCollection) UnmarshalBinary(b []byte) error {
	var res ColorCollection
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
