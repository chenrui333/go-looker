// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ProjectWorkspace project workspace
// swagger:model ProjectWorkspace
type ProjectWorkspace struct {

	// Operations the current user is able to perform on this object
	// Read Only: true
	Can map[string]bool `json:"can,omitempty"`

	// GitBranch
	// Read Only: true
	GitBranch *GitBranch `json:"git_branch,omitempty"`

	// Git head revision name
	// Read Only: true
	GitHead string `json:"git_head,omitempty"`

	// The status of the local git directory
	// Read Only: true
	GitStatus string `json:"git_status,omitempty"`

	// The lookml syntax used by all files in this project
	// Read Only: true
	LookmlType string `json:"lookml_type,omitempty"`

	// The id of the project
	// Read Only: true
	ProjectID string `json:"project_id,omitempty"`

	// The id of the local workspace containing the project files
	// Read Only: true
	WorkspaceID string `json:"workspace_id,omitempty"`
}

// Validate validates this project workspace
func (m *ProjectWorkspace) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGitBranch(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectWorkspace) validateGitBranch(formats strfmt.Registry) error {

	if swag.IsZero(m.GitBranch) { // not required
		return nil
	}

	if m.GitBranch != nil {
		if err := m.GitBranch.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("git_branch")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProjectWorkspace) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectWorkspace) UnmarshalBinary(b []byte) error {
	var res ProjectWorkspace
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
