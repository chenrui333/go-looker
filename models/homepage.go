// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Homepage homepage
// swagger:model Homepage
type Homepage struct {

	// Operations the current user is able to perform on this object
	// Read Only: true
	Can map[string]bool `json:"can,omitempty"`

	// Id of associated content_metadata record
	// Read Only: true
	ContentMetadataID int64 `json:"content_metadata_id,omitempty"`

	// Date of homepage creatopm
	// Read Only: true
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// Date of homepage deletion
	// Format: date-time
	DeletedAt strfmt.DateTime `json:"deleted_at,omitempty"`

	// Sections of the homepage
	// Read Only: true
	HomepageSections []*HomepageSection `json:"homepage_sections"`

	// Unique Id
	// Read Only: true
	ID string `json:"id,omitempty"`

	// Title of homepage
	Title string `json:"title,omitempty"`

	// Date of last homepage update
	// Read Only: true
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`

	// User id of homepage creator
	// Read Only: true
	UserID int64 `json:"user_id,omitempty"`
}

// Validate validates this homepage
func (m *Homepage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeletedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHomepageSections(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Homepage) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Homepage) validateDeletedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.DeletedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("deleted_at", "body", "date-time", m.DeletedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Homepage) validateHomepageSections(formats strfmt.Registry) error {

	if swag.IsZero(m.HomepageSections) { // not required
		return nil
	}

	for i := 0; i < len(m.HomepageSections); i++ {
		if swag.IsZero(m.HomepageSections[i]) { // not required
			continue
		}

		if m.HomepageSections[i] != nil {
			if err := m.HomepageSections[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("homepage_sections" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Homepage) validateUpdatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Homepage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Homepage) UnmarshalBinary(b []byte) error {
	var res Homepage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
