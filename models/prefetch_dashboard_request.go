// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PrefetchDashboardRequest prefetch dashboard request
// swagger:model PrefetchDashboardRequest
type PrefetchDashboardRequest struct {

	// Access filters to apply when running queries for prefetch.
	// Read Only: true
	AccessFilters []*PrefetchAccessFilterValue `json:"access_filters"`

	// Operations the current user is able to perform on this object
	// Read Only: true
	Can map[string]bool `json:"can,omitempty"`

	// Number of seconds it took to compute results for prefetch.
	// Read Only: true
	ComputationTime float32 `json:"computation_time,omitempty"`

	// Time when prefetch was created.
	// Read Only: true
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// Dashboard filters to apply when running queries for prefetch.
	// Read Only: true
	DashboardFilters []*PrefetchDashboardFilterValue `json:"dashboard_filters"`

	// Number of times prefetch has been accessed.
	// Read Only: true
	HitCount int64 `json:"hit_count,omitempty"`

	// Size of result.
	// Read Only: true
	ResultSizeBytes int64 `json:"result_size_bytes,omitempty"`

	// Time when prefetch was last accessed.
	// Read Only: true
	// Format: date-time
	TouchedAt strfmt.DateTime `json:"touched_at,omitempty"`

	// Number of seconds prefetch will live for.
	// Read Only: true
	TTL int64 `json:"ttl,omitempty"`
}

// Validate validates this prefetch dashboard request
func (m *PrefetchDashboardRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessFilters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDashboardFilters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTouchedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrefetchDashboardRequest) validateAccessFilters(formats strfmt.Registry) error {

	if swag.IsZero(m.AccessFilters) { // not required
		return nil
	}

	for i := 0; i < len(m.AccessFilters); i++ {
		if swag.IsZero(m.AccessFilters[i]) { // not required
			continue
		}

		if m.AccessFilters[i] != nil {
			if err := m.AccessFilters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("access_filters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PrefetchDashboardRequest) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PrefetchDashboardRequest) validateDashboardFilters(formats strfmt.Registry) error {

	if swag.IsZero(m.DashboardFilters) { // not required
		return nil
	}

	for i := 0; i < len(m.DashboardFilters); i++ {
		if swag.IsZero(m.DashboardFilters[i]) { // not required
			continue
		}

		if m.DashboardFilters[i] != nil {
			if err := m.DashboardFilters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dashboard_filters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PrefetchDashboardRequest) validateTouchedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.TouchedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("touched_at", "body", "date-time", m.TouchedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PrefetchDashboardRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrefetchDashboardRequest) UnmarshalBinary(b []byte) error {
	var res PrefetchDashboardRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
