// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ContentValidatorError content validator error
// swagger:model ContentValidatorError
type ContentValidatorError struct {

	// dashboard
	// Read Only: true
	Dashboard *ContentValidationDashboard `json:"dashboard,omitempty"`

	// dashboard element
	// Read Only: true
	DashboardElement *ContentValidationDashboardElement `json:"dashboard_element,omitempty"`

	// dashboard filter
	// Read Only: true
	DashboardFilter *ContentValidationDashboardFilter `json:"dashboard_filter,omitempty"`

	// A list of errors found for this piece of content
	// Read Only: true
	Errors string `json:"errors,omitempty"`

	// An id unique to this piece of content for this validation run
	// Read Only: true
	ID string `json:"id,omitempty"`

	// look
	// Read Only: true
	Look *ContentValidationLook `json:"look,omitempty"`
}

// Validate validates this content validator error
func (m *ContentValidatorError) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDashboard(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDashboardElement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDashboardFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLook(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContentValidatorError) validateDashboard(formats strfmt.Registry) error {

	if swag.IsZero(m.Dashboard) { // not required
		return nil
	}

	if m.Dashboard != nil {
		if err := m.Dashboard.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dashboard")
			}
			return err
		}
	}

	return nil
}

func (m *ContentValidatorError) validateDashboardElement(formats strfmt.Registry) error {

	if swag.IsZero(m.DashboardElement) { // not required
		return nil
	}

	if m.DashboardElement != nil {
		if err := m.DashboardElement.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dashboard_element")
			}
			return err
		}
	}

	return nil
}

func (m *ContentValidatorError) validateDashboardFilter(formats strfmt.Registry) error {

	if swag.IsZero(m.DashboardFilter) { // not required
		return nil
	}

	if m.DashboardFilter != nil {
		if err := m.DashboardFilter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dashboard_filter")
			}
			return err
		}
	}

	return nil
}

func (m *ContentValidatorError) validateLook(formats strfmt.Registry) error {

	if swag.IsZero(m.Look) { // not required
		return nil
	}

	if m.Look != nil {
		if err := m.Look.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("look")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContentValidatorError) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContentValidatorError) UnmarshalBinary(b []byte) error {
	var res ContentValidatorError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
