// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DataActionResponse data action response
// swagger:model DataActionResponse
type DataActionResponse struct {

	// Optional message returned by the data action server describing the state of the action that took place. This can be used to implement custom failure messages. If a failure is related to a particular form field, the server should send back a validation error instead. The Looker web UI does not currently display any message if the action indicates 'success', but may do so in the future.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// When true, indicates that the client should refresh (rerun) the source query because the data may have been changed by the action.
	// Read Only: true
	RefreshQuery *bool `json:"refresh_query,omitempty"`

	// Whether the data action was successful.
	// Read Only: true
	Success *bool `json:"success,omitempty"`

	// Validation errors returned by the data action server.
	// Read Only: true
	ValidationErrors *ValidationError `json:"validation_errors,omitempty"`

	// ID of the webhook event that sent this data action. In some error conditions, this may be null.
	// Read Only: true
	WebhookID string `json:"webhook_id,omitempty"`
}

// Validate validates this data action response
func (m *DataActionResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateValidationErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataActionResponse) validateValidationErrors(formats strfmt.Registry) error {

	if swag.IsZero(m.ValidationErrors) { // not required
		return nil
	}

	if m.ValidationErrors != nil {
		if err := m.ValidationErrors.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("validation_errors")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataActionResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataActionResponse) UnmarshalBinary(b []byte) error {
	var res DataActionResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
