// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/swag"
)

// GitBranch git branch
// swagger:model GitBranch
type GitBranch struct {

	// Number of commits the local branch is ahead of the remote
	// Read Only: true
	AheadCount int64 `json:"ahead_count,omitempty"`

	// Number of commits the local branch is behind the remote
	// Read Only: true
	BehindCount int64 `json:"behind_count,omitempty"`

	// Operations the current user is able to perform on this object
	// Read Only: true
	Can map[string]bool `json:"can,omitempty"`

	// UNIX timestamp at which this branch was last committed.
	// Read Only: true
	CommitAt int64 `json:"commit_at,omitempty"`

	// Name of error
	// Read Only: true
	Error string `json:"error,omitempty"`

	// Whether or not a local ref exists for the branch
	// Read Only: true
	IsLocal *bool `json:"is_local,omitempty"`

	// Whether or not this is the production branch
	// Read Only: true
	IsProduction *bool `json:"is_production,omitempty"`

	// Whether or not a remote ref exists for the branch
	// Read Only: true
	IsRemote *bool `json:"is_remote,omitempty"`

	// Message describing an error if present
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The short name on the local. Updating `name` results in `git checkout <new_name>`
	Name string `json:"name,omitempty"`

	// Name of the owner of a personal branch
	// Read Only: true
	OwnerName string `json:"owner_name,omitempty"`

	// Whether or not this branch is a personal branch - readonly for all developers except the owner
	// Read Only: true
	Personal *bool `json:"personal,omitempty"`

	// Whether or not this branch is readonly
	// Read Only: true
	Readonly *bool `json:"readonly,omitempty"`

	// The resolved ref of this branch. Updating `ref` results in `git reset --hard <new_ref>``.
	Ref string `json:"ref,omitempty"`

	// The name of the remote
	// Read Only: true
	Remote string `json:"remote,omitempty"`

	// The short name on the remote
	// Read Only: true
	RemoteName string `json:"remote_name,omitempty"`

	// The resolved ref of this branch remote.
	// Read Only: true
	RemoteRef string `json:"remote_ref,omitempty"`
}

// Validate validates this git branch
func (m *GitBranch) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GitBranch) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GitBranch) UnmarshalBinary(b []byte) error {
	var res GitBranch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
