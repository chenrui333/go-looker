// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// QueryTask query task
// swagger:model QueryTask
type QueryTask struct {

	// Whether or not to use the cache
	Cache bool `json:"cache,omitempty"`

	// cache key used to cache query.
	// Read Only: true
	CacheKey string `json:"cache_key,omitempty"`

	// Retrieve any results from cache even if the results have expired.
	CacheOnly bool `json:"cache_only,omitempty"`

	// Operations the current user is able to perform on this object
	// Read Only: true
	Can map[string]bool `json:"can,omitempty"`

	// Id of dashboard associated with query.
	DashboardID string `json:"dashboard_id,omitempty"`

	// Use production models to run query (even is user is in dev mode).
	ForceProduction bool `json:"force_production,omitempty"`

	// whether or not to generate links in the query response.
	GenerateLinks bool `json:"generate_links,omitempty"`

	// Unique Id
	// Read Only: true
	ID string `json:"id,omitempty"`

	// Id of look associated with query.
	LookID int64 `json:"look_id,omitempty"`

	// Prefix to use for drill links.
	PathPrefix string `json:"path_prefix,omitempty"`

	// Query
	// Read Only: true
	Query *Query `json:"query,omitempty"`

	// Id of query
	QueryID int64 `json:"query_id,omitempty"`

	// Rebuild PDTS used in query.
	RebuildPdts bool `json:"rebuild_pdts,omitempty"`

	// The data format of the query results.
	// Read Only: true
	ResultFormat string `json:"result_format,omitempty"`

	// Source of the results of the query.
	// Read Only: true
	ResultSource string `json:"result_source,omitempty"`

	// Runtime of prior queries.
	// Read Only: true
	Runtime float32 `json:"runtime,omitempty"`

	// Whether or not to run table calculations on the server
	ServerTableCalcs bool `json:"server_table_calcs,omitempty"`

	// Source of query task.
	Source string `json:"source,omitempty"`

	// Status of query task.
	Status string `json:"status,omitempty"`
}

// Validate validates this query task
func (m *QueryTask) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateQuery(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QueryTask) validateQuery(formats strfmt.Registry) error {

	if swag.IsZero(m.Query) { // not required
		return nil
	}

	if m.Query != nil {
		if err := m.Query.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("query")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *QueryTask) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QueryTask) UnmarshalBinary(b []byte) error {
	var res QueryTask
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
