// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserLoginLockout user login lockout
// swagger:model UserLoginLockout
type UserLoginLockout struct {

	// Authentication method for login failures
	// Read Only: true
	AuthType string `json:"auth_type,omitempty"`

	// Operations the current user is able to perform on this object
	// Read Only: true
	Can map[string]bool `json:"can,omitempty"`

	// Email address associated with the user's account
	// Read Only: true
	Email string `json:"email,omitempty"`

	// Number of failures that triggered the lockout
	// Read Only: true
	FailCount int64 `json:"fail_count,omitempty"`

	// User's name
	// Read Only: true
	FullName string `json:"full_name,omitempty"`

	// IP address of most recent failed attempt
	// Read Only: true
	IP string `json:"ip,omitempty"`

	// Hash of user's client id
	// Read Only: true
	Key string `json:"key,omitempty"`

	// Time when lockout was triggered
	// Read Only: true
	// Format: date-time
	LockoutAt strfmt.DateTime `json:"lockout_at,omitempty"`

	// Remote ID of user if using LDAP
	// Read Only: true
	RemoteID string `json:"remote_id,omitempty"`

	// User ID
	// Read Only: true
	UserID int64 `json:"user_id,omitempty"`
}

// Validate validates this user login lockout
func (m *UserLoginLockout) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLockoutAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserLoginLockout) validateLockoutAt(formats strfmt.Registry) error {

	if swag.IsZero(m.LockoutAt) { // not required
		return nil
	}

	if err := validate.FormatOf("lockout_at", "body", "date-time", m.LockoutAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserLoginLockout) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserLoginLockout) UnmarshalBinary(b []byte) error {
	var res UserLoginLockout
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
