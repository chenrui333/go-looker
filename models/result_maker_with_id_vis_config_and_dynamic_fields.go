// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ResultMakerWithIDVisConfigAndDynamicFields result maker with Id vis config and dynamic fields
// swagger:model ResultMakerWithIdVisConfigAndDynamicFields
type ResultMakerWithIDVisConfigAndDynamicFields struct {

	// Operations the current user is able to perform on this object
	// Read Only: true
	Can map[string]bool `json:"can,omitempty"`

	// JSON string of dynamic field information.
	// Read Only: true
	DynamicFields string `json:"dynamic_fields,omitempty"`

	// array of items that can be filtered and information about them.
	// Read Only: true
	Filterables []*ResultMakerFilterables `json:"filterables"`

	// Unique Id.
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// ID of merge result if this is a merge_result.
	// Read Only: true
	MergeResultID string `json:"merge_result_id,omitempty"`

	// Query
	// Read Only: true
	Query *Query `json:"query,omitempty"`

	// ID of query if this is a query.
	// Read Only: true
	QueryID int64 `json:"query_id,omitempty"`

	// Sorts of the constituent Look, Query, or Merge Query
	// Read Only: true
	Sorts string `json:"sorts,omitempty"`

	// Total of the constituent Look, Query, or Merge Query
	// Read Only: true
	Total *bool `json:"total,omitempty"`

	// Vis config of the constituent Query, or Merge Query.
	// Read Only: true
	VisConfig string `json:"vis_config,omitempty"`
}

// Validate validates this result maker with Id vis config and dynamic fields
func (m *ResultMakerWithIDVisConfigAndDynamicFields) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFilterables(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuery(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResultMakerWithIDVisConfigAndDynamicFields) validateFilterables(formats strfmt.Registry) error {

	if swag.IsZero(m.Filterables) { // not required
		return nil
	}

	for i := 0; i < len(m.Filterables); i++ {
		if swag.IsZero(m.Filterables[i]) { // not required
			continue
		}

		if m.Filterables[i] != nil {
			if err := m.Filterables[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("filterables" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ResultMakerWithIDVisConfigAndDynamicFields) validateQuery(formats strfmt.Registry) error {

	if swag.IsZero(m.Query) { // not required
		return nil
	}

	if m.Query != nil {
		if err := m.Query.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("query")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResultMakerWithIDVisConfigAndDynamicFields) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResultMakerWithIDVisConfigAndDynamicFields) UnmarshalBinary(b []byte) error {
	var res ResultMakerWithIDVisConfigAndDynamicFields
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
