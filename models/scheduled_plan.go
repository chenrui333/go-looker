// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ScheduledPlan scheduled plan
// swagger:model ScheduledPlan
type ScheduledPlan struct {

	// Operations the current user is able to perform on this object
	// Read Only: true
	Can map[string]bool `json:"can,omitempty"`

	// Date and time when ScheduledPlan was created
	// Read Only: true
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// Vixie-Style crontab specification when to run
	Crontab string `json:"crontab,omitempty"`

	// (DEPRECATED) Alias for filters_string field
	DashboardFilters string `json:"dashboard_filters,omitempty"`

	// Id of a dashboard
	DashboardID int64 `json:"dashboard_id,omitempty"`

	// Name of a datagroup; if specified will run when datagroup triggered (can't be used with cron string)
	Datagroup string `json:"datagroup,omitempty"`

	// Whether the ScheduledPlan is enabled
	Enabled bool `json:"enabled,omitempty"`

	// Query string to run look or dashboard with
	FiltersString string `json:"filters_string,omitempty"`

	// Unique Id
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// Whether links back to Looker should be included in this ScheduledPlan
	IncludeLinks bool `json:"include_links,omitempty"`

	// When the ScheduledPlan was last run
	// Read Only: true
	// Format: date-time
	LastRunAt strfmt.DateTime `json:"last_run_at,omitempty"`

	// Id of a look
	LookID int64 `json:"look_id,omitempty"`

	// Id of a LookML dashboard
	LookmlDashboardID string `json:"lookml_dashboard_id,omitempty"`

	// Name
	Name string `json:"name,omitempty"`

	// When the ScheduledPlan will next run (null if running once)
	// Read Only: true
	// Format: date-time
	NextRunAt strfmt.DateTime `json:"next_run_at,omitempty"`

	// Whether the paper should be landscape
	PdfLandscape bool `json:"pdf_landscape,omitempty"`

	// The size of paper a PDF should be rendered for
	PdfPaperSize string `json:"pdf_paper_size,omitempty"`

	// Query id
	QueryID string `json:"query_id,omitempty"`

	// Delivery should occur if data have changed since the last run
	RequireChange bool `json:"require_change,omitempty"`

	// Delivery should occur if the dashboard look does not return results
	RequireNoResults bool `json:"require_no_results,omitempty"`

	// Delivery should occur if running the dashboard or look returns results
	RequireResults bool `json:"require_results,omitempty"`

	// Whether schedule is ran as recipient (only applicable for email recipients)
	RunAsRecipient bool `json:"run_as_recipient,omitempty"`

	// Whether the plan in question should only be run once (usually for testing)
	RunOnce bool `json:"run_once,omitempty"`

	// Scheduled plan destinations
	ScheduledPlanDestination []*ScheduledPlanDestination `json:"scheduled_plan_destination"`

	// Will run an unlimited query and send all results.
	SendAllResults bool `json:"send_all_results,omitempty"`

	// Timezone for interpreting the specified crontab (default is Looker instance timezone)
	Timezone string `json:"timezone,omitempty"`

	// Title
	// Read Only: true
	Title string `json:"title,omitempty"`

	// Date and time when ScheduledPlan was last updated
	// Read Only: true
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`

	// User who owns this ScheduledPlan
	// Read Only: true
	User *UserPublic `json:"user,omitempty"`

	// User Id which owns this ScheduledPlan
	UserID int64 `json:"user_id,omitempty"`
}

// Validate validates this scheduled plan
func (m *ScheduledPlan) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastRunAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNextRunAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScheduledPlanDestination(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScheduledPlan) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ScheduledPlan) validateLastRunAt(formats strfmt.Registry) error {

	if swag.IsZero(m.LastRunAt) { // not required
		return nil
	}

	if err := validate.FormatOf("last_run_at", "body", "date-time", m.LastRunAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ScheduledPlan) validateNextRunAt(formats strfmt.Registry) error {

	if swag.IsZero(m.NextRunAt) { // not required
		return nil
	}

	if err := validate.FormatOf("next_run_at", "body", "date-time", m.NextRunAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ScheduledPlan) validateScheduledPlanDestination(formats strfmt.Registry) error {

	if swag.IsZero(m.ScheduledPlanDestination) { // not required
		return nil
	}

	for i := 0; i < len(m.ScheduledPlanDestination); i++ {
		if swag.IsZero(m.ScheduledPlanDestination[i]) { // not required
			continue
		}

		if m.ScheduledPlanDestination[i] != nil {
			if err := m.ScheduledPlanDestination[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scheduled_plan_destination" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ScheduledPlan) validateUpdatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ScheduledPlan) validateUser(formats strfmt.Registry) error {

	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ScheduledPlan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScheduledPlan) UnmarshalBinary(b []byte) error {
	var res ScheduledPlan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
