// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EmbedSsoURLParams embed sso Url params
// swagger:model EmbedSsoUrlParams
type EmbedSsoURLParams struct {

	// Operations the current user is able to perform on this object
	// Read Only: true
	Can map[string]bool `json:"can,omitempty"`

	// A unique value identifying an embed-exclusive group. Multiple embed users using the same `external_group_id` value will be able to share Looker content with each other. Content and embed users associated with the `external_group_id` will not be accessible to normal Looker users or embed users not associated with this `external_group_id`.
	ExternalGroupID int64 `json:"external_group_id,omitempty"`

	// A value from an external system that uniquely identifies the embed user. Since the user_ids of Looker embed users may change with every embed session, external_user_id provides a way to assign a known, stable user identifier across multiple embed sessions.
	ExternalUserID string `json:"external_user_id,omitempty"`

	// First name of the embed user. Defaults to 'Embed' if not specified
	FirstName string `json:"first_name,omitempty"`

	// When true, the embed session will purge any residual Looker login state (such as in browser cookies) before creating a new login state with the given embed user info. Defaults to true.
	ForceLogoutLogin bool `json:"force_logout_login,omitempty"`

	// List of Looker group ids in which to enroll the embed user
	GroupIds []int64 `json:"group_ids"`

	// Last name of the embed user. Defaults to 'User' if not specified
	LastName string `json:"last_name,omitempty"`

	// List of model names that the embed user may access
	Models []string `json:"models"`

	// List of Looker permission names to grant to the embed user. Requested permissions will be filtered to permissions allowed for embed sessions.
	Permissions []string `json:"permissions"`

	// Id of the embed secret to use to sign this SSO url. If specified, the value must be an id of a valid (active) secret defined in the Looker instance. If not specified, the URL will be signed with the newest active embed secret defined in the Looker instance.
	SecretID int64 `json:"secret_id,omitempty"`

	// Number of seconds the SSO embed session will be valid after the embed session is started. Defaults to 300 seconds. Maximum session length accepted is 2592000 seconds (30 days).
	SessionLength int64 `json:"session_length,omitempty"`

	// The complete URL of the Looker UI page to display in the embed context. For example, to display the dashboard with id 34, `target_url` would look like: `https://mycompany.looker.com:9999/dashboards/34`. `target_uri` MUST contain a scheme (HTTPS), domain name, and URL path. Port must be included if it is required to reach the Looker server from browser clients. If the Looker instance is behind a load balancer or other proxy, `target_uri` must be the public-facing domain name and port required to reach the Looker instance, not the actual internal network machine name of the Looker instance.
	// Required: true
	// Format: uri
	TargetURL *strfmt.URI `json:"target_url"`

	// A dictionary of name-value pairs associating a Looker user attribute name with a value.
	UserAttributes map[string]string `json:"user_attributes,omitempty"`

	// Sets the user timezone for the embed user session, if the User Specific Timezones setting is enabled in the Looker admin settings. A value of `null` forces the embed user to use the Looker Application Default Timezone. You MUST omit this property from the request if the User Specific Timezones setting is disabled. Timezone values are validated against the IANA Timezone standard and can be seen in the Application Time Zone dropdown list on the Looker General Settings admin page.
	UserTimezone string `json:"user_timezone,omitempty"`
}

// Validate validates this embed sso Url params
func (m *EmbedSsoURLParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTargetURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EmbedSsoURLParams) validateTargetURL(formats strfmt.Registry) error {

	if err := validate.Required("target_url", "body", m.TargetURL); err != nil {
		return err
	}

	if err := validate.FormatOf("target_url", "body", "uri", m.TargetURL.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EmbedSsoURLParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EmbedSsoURLParams) UnmarshalBinary(b []byte) error {
	var res EmbedSsoURLParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
