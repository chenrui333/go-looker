// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/swag"
)

// Dialect dialect
// swagger:model Dialect
type Dialect struct {

	// Should SQL Runner snippets automatically be run
	// Read Only: true
	AutomaticallyRunSQLRunnerSnippets *bool `json:"automatically_run_sql_runner_snippets,omitempty"`

	// Operations the current user is able to perform on this object
	// Read Only: true
	Can map[string]bool `json:"can,omitempty"`

	// Array of names of the tests that can be run on a connection using this dialect
	// Read Only: true
	ConnectionTests []string `json:"connection_tests"`

	// The human-readable label of the connection
	// Read Only: true
	Label string `json:"label,omitempty"`

	// The name of the dialect
	// Read Only: true
	Name string `json:"name,omitempty"`

	// PDT distkey column
	// Read Only: true
	PersistentTableDistkey string `json:"persistent_table_distkey,omitempty"`

	// PDT index columns
	// Read Only: true
	PersistentTableIndexes string `json:"persistent_table_indexes,omitempty"`

	// PDT sortkey columns
	// Read Only: true
	PersistentTableSortkeys string `json:"persistent_table_sortkeys,omitempty"`

	// Whether the dialect supports query cost estimates
	// Read Only: true
	SupportsCostEstimate *bool `json:"supports_cost_estimate,omitempty"`

	// Suports streaming results
	// Read Only: true
	SupportsStreaming *bool `json:"supports_streaming,omitempty"`

	// Whether the dialect supports uploading tables
	// Read Only: true
	SupportsUploadTables *bool `json:"supports_upload_tables,omitempty"`
}

// Validate validates this dialect
func (m *Dialect) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Dialect) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Dialect) UnmarshalBinary(b []byte) error {
	var res Dialect
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
