// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Theme theme
// swagger:model Theme
type Theme struct {

	// Timestamp for when this theme becomes active. Null=always
	// Format: date-time
	BeginAt strfmt.DateTime `json:"begin_at,omitempty"`

	// Operations the current user is able to perform on this object
	// Read Only: true
	Can map[string]bool `json:"can,omitempty"`

	// Timestamp for when this theme expires. Null=never
	// Format: date-time
	EndAt strfmt.DateTime `json:"end_at,omitempty"`

	// Unique Id
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// Name of theme. Can only be alphanumeric and underscores.
	Name string `json:"name,omitempty"`

	// Hash of name/value pairs for theme settings. These names get validated.
	Settings *ThemeSettings `json:"settings,omitempty"`
}

// Validate validates this theme
func (m *Theme) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBeginAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Theme) validateBeginAt(formats strfmt.Registry) error {

	if swag.IsZero(m.BeginAt) { // not required
		return nil
	}

	if err := validate.FormatOf("begin_at", "body", "date-time", m.BeginAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Theme) validateEndAt(formats strfmt.Registry) error {

	if swag.IsZero(m.EndAt) { // not required
		return nil
	}

	if err := validate.FormatOf("end_at", "body", "date-time", m.EndAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Theme) validateSettings(formats strfmt.Registry) error {

	if swag.IsZero(m.Settings) { // not required
		return nil
	}

	if m.Settings != nil {
		if err := m.Settings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("settings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Theme) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Theme) UnmarshalBinary(b []byte) error {
	var res Theme
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
