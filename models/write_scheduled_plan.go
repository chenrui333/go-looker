// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// WriteScheduledPlan write scheduled plan
// swagger:model WriteScheduledPlan
type WriteScheduledPlan struct {

	// Operations the current user is able to perform on this object
	// Read Only: true
	Can map[string]bool `json:"can,omitempty"`

	// Color scheme of the dashboard if applicable
	ColorTheme string `json:"color_theme,omitempty"`

	// Vixie-Style crontab specification when to run
	Crontab string `json:"crontab,omitempty"`

	// (DEPRECATED) Alias for filters_string field
	DashboardFilters string `json:"dashboard_filters,omitempty"`

	// Id of a dashboard
	DashboardID int64 `json:"dashboard_id,omitempty"`

	// Name of a datagroup; if specified will run when datagroup triggered (can't be used with cron string)
	Datagroup string `json:"datagroup,omitempty"`

	// Whether this schedule is in an embed context or not
	Embed bool `json:"embed,omitempty"`

	// Whether the ScheduledPlan is enabled
	Enabled bool `json:"enabled,omitempty"`

	// Query string to run look or dashboard with
	FiltersString string `json:"filters_string,omitempty"`

	// Whether links back to Looker should be included in this ScheduledPlan
	IncludeLinks bool `json:"include_links,omitempty"`

	// Whether or not to expand table vis to full length
	LongTables bool `json:"long_tables,omitempty"`

	// Id of a look
	LookID int64 `json:"look_id,omitempty"`

	// Id of a LookML dashboard
	LookmlDashboardID string `json:"lookml_dashboard_id,omitempty"`

	// Name of this scheduled plan
	Name string `json:"name,omitempty"`

	// Whether the paper should be landscape
	PdfLandscape bool `json:"pdf_landscape,omitempty"`

	// The size of paper a PDF should be rendered for
	PdfPaperSize string `json:"pdf_paper_size,omitempty"`

	// Query id
	QueryID string `json:"query_id,omitempty"`

	// Delivery should occur if data have changed since the last run
	RequireChange bool `json:"require_change,omitempty"`

	// Delivery should occur if the dashboard look does not return results
	RequireNoResults bool `json:"require_no_results,omitempty"`

	// Delivery should occur if running the dashboard or look returns results
	RequireResults bool `json:"require_results,omitempty"`

	// Whether schedule is run as recipient (only applicable for email recipients)
	RunAsRecipient bool `json:"run_as_recipient,omitempty"`

	// Whether the plan in question should only be run once (usually for testing)
	RunOnce bool `json:"run_once,omitempty"`

	// Scheduled plan destinations
	ScheduledPlanDestination []*ScheduledPlanDestination `json:"scheduled_plan_destination"`

	// Will run an unlimited query and send all results.
	SendAllResults bool `json:"send_all_results,omitempty"`

	// Timezone for interpreting the specified crontab (default is Looker instance timezone)
	Timezone string `json:"timezone,omitempty"`

	// User Id which owns this scheduled plan
	UserID int64 `json:"user_id,omitempty"`
}

// Validate validates this write scheduled plan
func (m *WriteScheduledPlan) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateScheduledPlanDestination(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WriteScheduledPlan) validateScheduledPlanDestination(formats strfmt.Registry) error {

	if swag.IsZero(m.ScheduledPlanDestination) { // not required
		return nil
	}

	for i := 0; i < len(m.ScheduledPlanDestination); i++ {
		if swag.IsZero(m.ScheduledPlanDestination[i]) { // not required
			continue
		}

		if m.ScheduledPlanDestination[i] != nil {
			if err := m.ScheduledPlanDestination[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scheduled_plan_destination" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *WriteScheduledPlan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WriteScheduledPlan) UnmarshalBinary(b []byte) error {
	var res WriteScheduledPlan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
