// Code generated by go-swagger; DO NOT EDIT.

package look

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new look API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for look API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AllLooks gets all looks

### Get all the looks.
*/
func (a *Client) AllLooks(params *AllLooksParams) (*AllLooksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAllLooksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "all_looks",
		Method:             "GET",
		PathPattern:        "/looks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AllLooksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AllLooksOK), nil

}

/*
CreateLook creates look

### Create a Look with specified information.
*/
func (a *Client) CreateLook(params *CreateLookParams) (*CreateLookOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateLookParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "create_look",
		Method:             "POST",
		PathPattern:        "/looks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateLookReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateLookOK), nil

}

/*
DeleteLook deletes look

### Delete the look with a specific id.
*/
func (a *Client) DeleteLook(params *DeleteLookParams) (*DeleteLookNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLookParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete_look",
		Method:             "DELETE",
		PathPattern:        "/looks/{look_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteLookReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteLookNoContent), nil

}

/*
Look gets look

### Get a Look.

Return detailed information about the Look and its associated Query.


*/
func (a *Client) Look(params *LookParams) (*LookOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLookParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "look",
		Method:             "GET",
		PathPattern:        "/looks/{look_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LookReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LookOK), nil

}

/*
RunLook runs look

### Run a Look.

Runs a given look's query and returns the results in the requested format.

Supported formats:

| result_format | Description
| :-----------: | :--- |
| json | Plain json
| json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query
| csv | Comma separated values with a header
| txt | Tab separated values with a header
| html | Simple html
| md | Simple markdown
| xlsx | MS Excel spreadsheet
| sql | Returns the generated SQL rather than running the query
| png | A PNG image of the visualization of the query
| jpg | A JPG image of the visualization of the query



*/
func (a *Client) RunLook(params *RunLookParams) (*RunLookOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunLookParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "run_look",
		Method:             "GET",
		PathPattern:        "/looks/{look_id}/run/{result_format}",
		ProducesMediaTypes: []string{"application/json", "image/jpg", "image/png", "text"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RunLookReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RunLookOK), nil

}

/*
SearchLooks searches looks

Search looks.
*/
func (a *Client) SearchLooks(params *SearchLooksParams) (*SearchLooksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchLooksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "search_looks",
		Method:             "GET",
		PathPattern:        "/looks/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchLooksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SearchLooksOK), nil

}

/*
UpdateLook updates look

### Update the Look with a specific id.
*/
func (a *Client) UpdateLook(params *UpdateLookParams) (*UpdateLookOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateLookParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "update_look",
		Method:             "PATCH",
		PathPattern:        "/looks/{look_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateLookReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateLookOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
