// Code generated by go-swagger; DO NOT EDIT.

package content

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/chenrui333/go-looker/models"
)

// DeleteContentMetadataAccessReader is a Reader for the DeleteContentMetadataAccess structure.
type DeleteContentMetadataAccessReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteContentMetadataAccessReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewDeleteContentMetadataAccessNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewDeleteContentMetadataAccessBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDeleteContentMetadataAccessNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteContentMetadataAccessNoContent creates a DeleteContentMetadataAccessNoContent with default headers values
func NewDeleteContentMetadataAccessNoContent() *DeleteContentMetadataAccessNoContent {
	return &DeleteContentMetadataAccessNoContent{}
}

/*DeleteContentMetadataAccessNoContent handles this case with default header values.

Successfully deleted.
*/
type DeleteContentMetadataAccessNoContent struct {
	Payload string
}

func (o *DeleteContentMetadataAccessNoContent) Error() string {
	return fmt.Sprintf("[DELETE /content_metadata_access/{content_metadata_access_id}][%d] deleteContentMetadataAccessNoContent  %+v", 204, o.Payload)
}

func (o *DeleteContentMetadataAccessNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteContentMetadataAccessBadRequest creates a DeleteContentMetadataAccessBadRequest with default headers values
func NewDeleteContentMetadataAccessBadRequest() *DeleteContentMetadataAccessBadRequest {
	return &DeleteContentMetadataAccessBadRequest{}
}

/*DeleteContentMetadataAccessBadRequest handles this case with default header values.

Bad Request
*/
type DeleteContentMetadataAccessBadRequest struct {
	Payload *models.Error
}

func (o *DeleteContentMetadataAccessBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /content_metadata_access/{content_metadata_access_id}][%d] deleteContentMetadataAccessBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteContentMetadataAccessBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteContentMetadataAccessNotFound creates a DeleteContentMetadataAccessNotFound with default headers values
func NewDeleteContentMetadataAccessNotFound() *DeleteContentMetadataAccessNotFound {
	return &DeleteContentMetadataAccessNotFound{}
}

/*DeleteContentMetadataAccessNotFound handles this case with default header values.

Not Found
*/
type DeleteContentMetadataAccessNotFound struct {
	Payload *models.Error
}

func (o *DeleteContentMetadataAccessNotFound) Error() string {
	return fmt.Sprintf("[DELETE /content_metadata_access/{content_metadata_access_id}][%d] deleteContentMetadataAccessNotFound  %+v", 404, o.Payload)
}

func (o *DeleteContentMetadataAccessNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
