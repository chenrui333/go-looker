// Code generated by go-swagger; DO NOT EDIT.

package content

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new content API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for content API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AllContentMetadataAccesss gets all content metadata accesss

### All content metadata access records for a content metadata item.

*/
func (a *Client) AllContentMetadataAccesss(params *AllContentMetadataAccesssParams) (*AllContentMetadataAccesssOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAllContentMetadataAccesssParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "all_content_metadata_accesss",
		Method:             "GET",
		PathPattern:        "/content_metadata_access",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AllContentMetadataAccesssReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AllContentMetadataAccesssOK), nil

}

/*
AllContentMetadatas gets all content metadatas

### Get information about all content metadata in a space.

*/
func (a *Client) AllContentMetadatas(params *AllContentMetadatasParams) (*AllContentMetadatasOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAllContentMetadatasParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "all_content_metadatas",
		Method:             "GET",
		PathPattern:        "/content_metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AllContentMetadatasReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AllContentMetadatasOK), nil

}

/*
ContentFavorite gets favorite content

### Get favorite content by its id
*/
func (a *Client) ContentFavorite(params *ContentFavoriteParams) (*ContentFavoriteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContentFavoriteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "content_favorite",
		Method:             "GET",
		PathPattern:        "/content_favorite/{content_favorite_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContentFavoriteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ContentFavoriteOK), nil

}

/*
ContentMetadata gets content metadata

### Get information about an individual content metadata record.

*/
func (a *Client) ContentMetadata(params *ContentMetadataParams) (*ContentMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContentMetadataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "content_metadata",
		Method:             "GET",
		PathPattern:        "/content_metadata/{content_metadata_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContentMetadataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ContentMetadataOK), nil

}

/*
CreateContentFavorite creates favorite content

### Create favorite content
*/
func (a *Client) CreateContentFavorite(params *CreateContentFavoriteParams) (*CreateContentFavoriteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateContentFavoriteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "create_content_favorite",
		Method:             "POST",
		PathPattern:        "/content_favorite",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateContentFavoriteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateContentFavoriteOK), nil

}

/*
CreateContentMetadataAccess creates content metadata access

### Create content metadata access.

*/
func (a *Client) CreateContentMetadataAccess(params *CreateContentMetadataAccessParams) (*CreateContentMetadataAccessOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateContentMetadataAccessParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "create_content_metadata_access",
		Method:             "POST",
		PathPattern:        "/content_metadata_access",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateContentMetadataAccessReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateContentMetadataAccessOK), nil

}

/*
DeleteContentFavorite deletes favorite content

### Delete favorite content
*/
func (a *Client) DeleteContentFavorite(params *DeleteContentFavoriteParams) (*DeleteContentFavoriteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteContentFavoriteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete_content_favorite",
		Method:             "DELETE",
		PathPattern:        "/content_favorite/{content_favorite_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteContentFavoriteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteContentFavoriteNoContent), nil

}

/*
DeleteContentMetadataAccess deletes content metadata access

### Remove content metadata access.

*/
func (a *Client) DeleteContentMetadataAccess(params *DeleteContentMetadataAccessParams) (*DeleteContentMetadataAccessNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteContentMetadataAccessParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete_content_metadata_access",
		Method:             "DELETE",
		PathPattern:        "/content_metadata_access/{content_metadata_access_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteContentMetadataAccessReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteContentMetadataAccessNoContent), nil

}

/*
SearchContentFavorites searches favorite contents

### Search Favorite Content

*/
func (a *Client) SearchContentFavorites(params *SearchContentFavoritesParams) (*SearchContentFavoritesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchContentFavoritesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "search_content_favorites",
		Method:             "GET",
		PathPattern:        "/content_favorite/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchContentFavoritesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SearchContentFavoritesOK), nil

}

/*
SearchContentViews searches content views

### Search Content View

*/
func (a *Client) SearchContentViews(params *SearchContentViewsParams) (*SearchContentViewsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchContentViewsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "search_content_views",
		Method:             "GET",
		PathPattern:        "/content_view/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchContentViewsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SearchContentViewsOK), nil

}

/*
UpdateContentMetadata updates content metadata

### Move a piece of content.

*/
func (a *Client) UpdateContentMetadata(params *UpdateContentMetadataParams) (*UpdateContentMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateContentMetadataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "update_content_metadata",
		Method:             "PATCH",
		PathPattern:        "/content_metadata/{content_metadata_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateContentMetadataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateContentMetadataOK), nil

}

/*
UpdateContentMetadataAccess updates content metadata access

### Update type of access for content metadata.

*/
func (a *Client) UpdateContentMetadataAccess(params *UpdateContentMetadataAccessParams) (*UpdateContentMetadataAccessOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateContentMetadataAccessParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "update_content_metadata_access",
		Method:             "PUT",
		PathPattern:        "/content_metadata_access/{content_metadata_access_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateContentMetadataAccessReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateContentMetadataAccessOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
