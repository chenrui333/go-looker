// Code generated by go-swagger; DO NOT EDIT.

package content

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new content API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for content API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AllContentMetadataAccesses gets all content metadata accesses

### All content metadata access records for a content metadata item.

*/
func (a *Client) AllContentMetadataAccesses(params *AllContentMetadataAccessesParams) (*AllContentMetadataAccessesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAllContentMetadataAccessesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "all_content_metadata_accesses",
		Method:             "GET",
		PathPattern:        "/content_metadata_access",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AllContentMetadataAccessesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AllContentMetadataAccessesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for all_content_metadata_accesses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AllContentMetadatas gets all content metadatas

### Get information about all content metadata in a space.

*/
func (a *Client) AllContentMetadatas(params *AllContentMetadatasParams) (*AllContentMetadatasOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAllContentMetadatasParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "all_content_metadatas",
		Method:             "GET",
		PathPattern:        "/content_metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AllContentMetadatasReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AllContentMetadatasOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for all_content_metadatas: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContentFavorite gets favorite content

### Get favorite content by its id
*/
func (a *Client) ContentFavorite(params *ContentFavoriteParams) (*ContentFavoriteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContentFavoriteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "content_favorite",
		Method:             "GET",
		PathPattern:        "/content_favorite/{content_favorite_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContentFavoriteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContentFavoriteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for content_favorite: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContentMetadata gets content metadata

### Get information about an individual content metadata record.

*/
func (a *Client) ContentMetadata(params *ContentMetadataParams) (*ContentMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContentMetadataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "content_metadata",
		Method:             "GET",
		PathPattern:        "/content_metadata/{content_metadata_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContentMetadataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContentMetadataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for content_metadata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContentValidation validates content

### Validate All Content
Requires Content Validation Labs Feature be enabled

Performs validation of all looks and dashboards
Returns a list of errors found as well as metadata about the content validation run.

*/
func (a *Client) ContentValidation(params *ContentValidationParams) (*ContentValidationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContentValidationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "content_validation",
		Method:             "GET",
		PathPattern:        "/content_validation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContentValidationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContentValidationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for content_validation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateContentFavorite creates favorite content

### Create favorite content
*/
func (a *Client) CreateContentFavorite(params *CreateContentFavoriteParams) (*CreateContentFavoriteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateContentFavoriteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "create_content_favorite",
		Method:             "POST",
		PathPattern:        "/content_favorite",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateContentFavoriteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateContentFavoriteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_content_favorite: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateContentMetadataAccess creates content metadata access

### Create content metadata access.

*/
func (a *Client) CreateContentMetadataAccess(params *CreateContentMetadataAccessParams) (*CreateContentMetadataAccessOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateContentMetadataAccessParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "create_content_metadata_access",
		Method:             "POST",
		PathPattern:        "/content_metadata_access",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateContentMetadataAccessReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateContentMetadataAccessOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_content_metadata_access: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteContentFavorite deletes favorite content

### Delete favorite content
*/
func (a *Client) DeleteContentFavorite(params *DeleteContentFavoriteParams) (*DeleteContentFavoriteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteContentFavoriteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete_content_favorite",
		Method:             "DELETE",
		PathPattern:        "/content_favorite/{content_favorite_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteContentFavoriteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteContentFavoriteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_content_favorite: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteContentMetadataAccess deletes content metadata access

### Remove content metadata access.

*/
func (a *Client) DeleteContentMetadataAccess(params *DeleteContentMetadataAccessParams) (*DeleteContentMetadataAccessNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteContentMetadataAccessParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete_content_metadata_access",
		Method:             "DELETE",
		PathPattern:        "/content_metadata_access/{content_metadata_access_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteContentMetadataAccessReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteContentMetadataAccessNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_content_metadata_access: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchContentFavorites searches favorite contents

### Search Favorite Content

If multiple search params are given and `filter_or` is FALSE or not specified,
search params are combined in a logical AND operation.
Only rows that match *all* search param criteria will be returned.

If `filter_or` is TRUE, multiple search params are combined in a logical OR operation.
Results will include rows that match **any** of the search criteria.

String search params use case-insensitive matching.
String search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.
example="dan%" will match "danger" and "Danzig" but not "David"
example="D_m%" will match "Damage" and "dump"

Integer search params can accept a single value or a comma separated list of values. The multiple
values will be combined under a logical OR operation - results will match at least one of
the given values.

Most search params can accept "IS NULL" and "NOT NULL" as special expressions to match
or exclude (respectively) rows where the column is null.

Boolean search params accept only "true" and "false" as values.


*/
func (a *Client) SearchContentFavorites(params *SearchContentFavoritesParams) (*SearchContentFavoritesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchContentFavoritesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "search_content_favorites",
		Method:             "GET",
		PathPattern:        "/content_favorite/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchContentFavoritesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchContentFavoritesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for search_content_favorites: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchContentViews searches content views

### Search Content Views

If multiple search params are given and `filter_or` is FALSE or not specified,
search params are combined in a logical AND operation.
Only rows that match *all* search param criteria will be returned.

If `filter_or` is TRUE, multiple search params are combined in a logical OR operation.
Results will include rows that match **any** of the search criteria.

String search params use case-insensitive matching.
String search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.
example="dan%" will match "danger" and "Danzig" but not "David"
example="D_m%" will match "Damage" and "dump"

Integer search params can accept a single value or a comma separated list of values. The multiple
values will be combined under a logical OR operation - results will match at least one of
the given values.

Most search params can accept "IS NULL" and "NOT NULL" as special expressions to match
or exclude (respectively) rows where the column is null.

Boolean search params accept only "true" and "false" as values.


*/
func (a *Client) SearchContentViews(params *SearchContentViewsParams) (*SearchContentViewsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchContentViewsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "search_content_views",
		Method:             "GET",
		PathPattern:        "/content_view/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchContentViewsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchContentViewsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for search_content_views: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateContentMetadata updates content metadata

### Move a piece of content.

*/
func (a *Client) UpdateContentMetadata(params *UpdateContentMetadataParams) (*UpdateContentMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateContentMetadataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "update_content_metadata",
		Method:             "PATCH",
		PathPattern:        "/content_metadata/{content_metadata_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateContentMetadataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateContentMetadataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_content_metadata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateContentMetadataAccess updates content metadata access

### Update type of access for content metadata.

*/
func (a *Client) UpdateContentMetadataAccess(params *UpdateContentMetadataAccessParams) (*UpdateContentMetadataAccessOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateContentMetadataAccessParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "update_content_metadata_access",
		Method:             "PUT",
		PathPattern:        "/content_metadata_access/{content_metadata_access_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateContentMetadataAccessReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateContentMetadataAccessOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_content_metadata_access: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
