// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/chenrui333/go-looker/models"
)

// UserCredentialsGoogleReader is a Reader for the UserCredentialsGoogle structure.
type UserCredentialsGoogleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UserCredentialsGoogleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUserCredentialsGoogleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUserCredentialsGoogleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUserCredentialsGoogleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUserCredentialsGoogleOK creates a UserCredentialsGoogleOK with default headers values
func NewUserCredentialsGoogleOK() *UserCredentialsGoogleOK {
	return &UserCredentialsGoogleOK{}
}

/*UserCredentialsGoogleOK handles this case with default header values.

Google Auth Credential
*/
type UserCredentialsGoogleOK struct {
	Payload *models.CredentialsGoogle
}

func (o *UserCredentialsGoogleOK) Error() string {
	return fmt.Sprintf("[GET /users/{user_id}/credentials_google][%d] userCredentialsGoogleOK  %+v", 200, o.Payload)
}

func (o *UserCredentialsGoogleOK) GetPayload() *models.CredentialsGoogle {
	return o.Payload
}

func (o *UserCredentialsGoogleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CredentialsGoogle)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserCredentialsGoogleBadRequest creates a UserCredentialsGoogleBadRequest with default headers values
func NewUserCredentialsGoogleBadRequest() *UserCredentialsGoogleBadRequest {
	return &UserCredentialsGoogleBadRequest{}
}

/*UserCredentialsGoogleBadRequest handles this case with default header values.

Bad Request
*/
type UserCredentialsGoogleBadRequest struct {
	Payload *models.Error
}

func (o *UserCredentialsGoogleBadRequest) Error() string {
	return fmt.Sprintf("[GET /users/{user_id}/credentials_google][%d] userCredentialsGoogleBadRequest  %+v", 400, o.Payload)
}

func (o *UserCredentialsGoogleBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UserCredentialsGoogleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserCredentialsGoogleNotFound creates a UserCredentialsGoogleNotFound with default headers values
func NewUserCredentialsGoogleNotFound() *UserCredentialsGoogleNotFound {
	return &UserCredentialsGoogleNotFound{}
}

/*UserCredentialsGoogleNotFound handles this case with default header values.

Not Found
*/
type UserCredentialsGoogleNotFound struct {
	Payload *models.Error
}

func (o *UserCredentialsGoogleNotFound) Error() string {
	return fmt.Sprintf("[GET /users/{user_id}/credentials_google][%d] userCredentialsGoogleNotFound  %+v", 404, o.Payload)
}

func (o *UserCredentialsGoogleNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UserCredentialsGoogleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
