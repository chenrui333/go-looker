// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewSearchUsersNamesParams creates a new SearchUsersNamesParams object
// with the default values initialized.
func NewSearchUsersNamesParams() *SearchUsersNamesParams {
	var ()
	return &SearchUsersNamesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSearchUsersNamesParamsWithTimeout creates a new SearchUsersNamesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSearchUsersNamesParamsWithTimeout(timeout time.Duration) *SearchUsersNamesParams {
	var ()
	return &SearchUsersNamesParams{

		timeout: timeout,
	}
}

// NewSearchUsersNamesParamsWithContext creates a new SearchUsersNamesParams object
// with the default values initialized, and the ability to set a context for a request
func NewSearchUsersNamesParamsWithContext(ctx context.Context) *SearchUsersNamesParams {
	var ()
	return &SearchUsersNamesParams{

		Context: ctx,
	}
}

// NewSearchUsersNamesParamsWithHTTPClient creates a new SearchUsersNamesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSearchUsersNamesParamsWithHTTPClient(client *http.Client) *SearchUsersNamesParams {
	var ()
	return &SearchUsersNamesParams{
		HTTPClient: client,
	}
}

/*SearchUsersNamesParams contains all the parameters to send to the API endpoint
for the search users names operation typically these are written to a http.Request
*/
type SearchUsersNamesParams struct {

	/*Email
	  Match Email Address.

	*/
	Email *string
	/*Fields
	  Requested fields.

	*/
	Fields *string
	/*FirstName
	  Match First name.

	*/
	FirstName *string
	/*ID
	  Match User Id.

	*/
	ID *int64
	/*IsDisabled
	  Match Is disabled.

	*/
	IsDisabled *bool
	/*LastName
	  Match Last name.

	*/
	LastName *string
	/*Page
	  Requested page.

	*/
	Page *int64
	/*Pattern
	  Pattern to match.

	*/
	Pattern string
	/*PerPage
	  Results per page.

	*/
	PerPage *int64
	/*Sorts
	  Fields to sort by.

	*/
	Sorts *string
	/*VerifiedLookerEmployee
	  Match Verified Looker employee.

	*/
	VerifiedLookerEmployee *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the search users names params
func (o *SearchUsersNamesParams) WithTimeout(timeout time.Duration) *SearchUsersNamesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the search users names params
func (o *SearchUsersNamesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the search users names params
func (o *SearchUsersNamesParams) WithContext(ctx context.Context) *SearchUsersNamesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the search users names params
func (o *SearchUsersNamesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the search users names params
func (o *SearchUsersNamesParams) WithHTTPClient(client *http.Client) *SearchUsersNamesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the search users names params
func (o *SearchUsersNamesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEmail adds the email to the search users names params
func (o *SearchUsersNamesParams) WithEmail(email *string) *SearchUsersNamesParams {
	o.SetEmail(email)
	return o
}

// SetEmail adds the email to the search users names params
func (o *SearchUsersNamesParams) SetEmail(email *string) {
	o.Email = email
}

// WithFields adds the fields to the search users names params
func (o *SearchUsersNamesParams) WithFields(fields *string) *SearchUsersNamesParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the search users names params
func (o *SearchUsersNamesParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithFirstName adds the firstName to the search users names params
func (o *SearchUsersNamesParams) WithFirstName(firstName *string) *SearchUsersNamesParams {
	o.SetFirstName(firstName)
	return o
}

// SetFirstName adds the firstName to the search users names params
func (o *SearchUsersNamesParams) SetFirstName(firstName *string) {
	o.FirstName = firstName
}

// WithID adds the id to the search users names params
func (o *SearchUsersNamesParams) WithID(id *int64) *SearchUsersNamesParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the search users names params
func (o *SearchUsersNamesParams) SetID(id *int64) {
	o.ID = id
}

// WithIsDisabled adds the isDisabled to the search users names params
func (o *SearchUsersNamesParams) WithIsDisabled(isDisabled *bool) *SearchUsersNamesParams {
	o.SetIsDisabled(isDisabled)
	return o
}

// SetIsDisabled adds the isDisabled to the search users names params
func (o *SearchUsersNamesParams) SetIsDisabled(isDisabled *bool) {
	o.IsDisabled = isDisabled
}

// WithLastName adds the lastName to the search users names params
func (o *SearchUsersNamesParams) WithLastName(lastName *string) *SearchUsersNamesParams {
	o.SetLastName(lastName)
	return o
}

// SetLastName adds the lastName to the search users names params
func (o *SearchUsersNamesParams) SetLastName(lastName *string) {
	o.LastName = lastName
}

// WithPage adds the page to the search users names params
func (o *SearchUsersNamesParams) WithPage(page *int64) *SearchUsersNamesParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the search users names params
func (o *SearchUsersNamesParams) SetPage(page *int64) {
	o.Page = page
}

// WithPattern adds the pattern to the search users names params
func (o *SearchUsersNamesParams) WithPattern(pattern string) *SearchUsersNamesParams {
	o.SetPattern(pattern)
	return o
}

// SetPattern adds the pattern to the search users names params
func (o *SearchUsersNamesParams) SetPattern(pattern string) {
	o.Pattern = pattern
}

// WithPerPage adds the perPage to the search users names params
func (o *SearchUsersNamesParams) WithPerPage(perPage *int64) *SearchUsersNamesParams {
	o.SetPerPage(perPage)
	return o
}

// SetPerPage adds the perPage to the search users names params
func (o *SearchUsersNamesParams) SetPerPage(perPage *int64) {
	o.PerPage = perPage
}

// WithSorts adds the sorts to the search users names params
func (o *SearchUsersNamesParams) WithSorts(sorts *string) *SearchUsersNamesParams {
	o.SetSorts(sorts)
	return o
}

// SetSorts adds the sorts to the search users names params
func (o *SearchUsersNamesParams) SetSorts(sorts *string) {
	o.Sorts = sorts
}

// WithVerifiedLookerEmployee adds the verifiedLookerEmployee to the search users names params
func (o *SearchUsersNamesParams) WithVerifiedLookerEmployee(verifiedLookerEmployee *bool) *SearchUsersNamesParams {
	o.SetVerifiedLookerEmployee(verifiedLookerEmployee)
	return o
}

// SetVerifiedLookerEmployee adds the verifiedLookerEmployee to the search users names params
func (o *SearchUsersNamesParams) SetVerifiedLookerEmployee(verifiedLookerEmployee *bool) {
	o.VerifiedLookerEmployee = verifiedLookerEmployee
}

// WriteToRequest writes these params to a swagger request
func (o *SearchUsersNamesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Email != nil {

		// query param email
		var qrEmail string
		if o.Email != nil {
			qrEmail = *o.Email
		}
		qEmail := qrEmail
		if qEmail != "" {
			if err := r.SetQueryParam("email", qEmail); err != nil {
				return err
			}
		}

	}

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	if o.FirstName != nil {

		// query param first_name
		var qrFirstName string
		if o.FirstName != nil {
			qrFirstName = *o.FirstName
		}
		qFirstName := qrFirstName
		if qFirstName != "" {
			if err := r.SetQueryParam("first_name", qFirstName); err != nil {
				return err
			}
		}

	}

	if o.ID != nil {

		// query param id
		var qrID int64
		if o.ID != nil {
			qrID = *o.ID
		}
		qID := swag.FormatInt64(qrID)
		if qID != "" {
			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}

	}

	if o.IsDisabled != nil {

		// query param is_disabled
		var qrIsDisabled bool
		if o.IsDisabled != nil {
			qrIsDisabled = *o.IsDisabled
		}
		qIsDisabled := swag.FormatBool(qrIsDisabled)
		if qIsDisabled != "" {
			if err := r.SetQueryParam("is_disabled", qIsDisabled); err != nil {
				return err
			}
		}

	}

	if o.LastName != nil {

		// query param last_name
		var qrLastName string
		if o.LastName != nil {
			qrLastName = *o.LastName
		}
		qLastName := qrLastName
		if qLastName != "" {
			if err := r.SetQueryParam("last_name", qLastName); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage int64
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	// path param pattern
	if err := r.SetPathParam("pattern", o.Pattern); err != nil {
		return err
	}

	if o.PerPage != nil {

		// query param per_page
		var qrPerPage int64
		if o.PerPage != nil {
			qrPerPage = *o.PerPage
		}
		qPerPage := swag.FormatInt64(qrPerPage)
		if qPerPage != "" {
			if err := r.SetQueryParam("per_page", qPerPage); err != nil {
				return err
			}
		}

	}

	if o.Sorts != nil {

		// query param sorts
		var qrSorts string
		if o.Sorts != nil {
			qrSorts = *o.Sorts
		}
		qSorts := qrSorts
		if qSorts != "" {
			if err := r.SetQueryParam("sorts", qSorts); err != nil {
				return err
			}
		}

	}

	if o.VerifiedLookerEmployee != nil {

		// query param verified_looker_employee
		var qrVerifiedLookerEmployee bool
		if o.VerifiedLookerEmployee != nil {
			qrVerifiedLookerEmployee = *o.VerifiedLookerEmployee
		}
		qVerifiedLookerEmployee := swag.FormatBool(qrVerifiedLookerEmployee)
		if qVerifiedLookerEmployee != "" {
			if err := r.SetQueryParam("verified_looker_employee", qVerifiedLookerEmployee); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
