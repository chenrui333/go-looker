// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/chenrui333/go-looker/models"
)

// UserAccessFilterReader is a Reader for the UserAccessFilter structure.
type UserAccessFilterReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UserAccessFilterReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUserAccessFilterOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUserAccessFilterBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUserAccessFilterNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUserAccessFilterOK creates a UserAccessFilterOK with default headers values
func NewUserAccessFilterOK() *UserAccessFilterOK {
	return &UserAccessFilterOK{}
}

/*UserAccessFilterOK handles this case with default header values.

Access Filter
*/
type UserAccessFilterOK struct {
	Payload *models.AccessFilter
}

func (o *UserAccessFilterOK) Error() string {
	return fmt.Sprintf("[GET /users/{user_id}/access_filters/{access_filter_id}][%d] userAccessFilterOK  %+v", 200, o.Payload)
}

func (o *UserAccessFilterOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AccessFilter)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserAccessFilterBadRequest creates a UserAccessFilterBadRequest with default headers values
func NewUserAccessFilterBadRequest() *UserAccessFilterBadRequest {
	return &UserAccessFilterBadRequest{}
}

/*UserAccessFilterBadRequest handles this case with default header values.

Bad Request
*/
type UserAccessFilterBadRequest struct {
	Payload *models.Error
}

func (o *UserAccessFilterBadRequest) Error() string {
	return fmt.Sprintf("[GET /users/{user_id}/access_filters/{access_filter_id}][%d] userAccessFilterBadRequest  %+v", 400, o.Payload)
}

func (o *UserAccessFilterBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserAccessFilterNotFound creates a UserAccessFilterNotFound with default headers values
func NewUserAccessFilterNotFound() *UserAccessFilterNotFound {
	return &UserAccessFilterNotFound{}
}

/*UserAccessFilterNotFound handles this case with default header values.

Not Found
*/
type UserAccessFilterNotFound struct {
	Payload *models.Error
}

func (o *UserAccessFilterNotFound) Error() string {
	return fmt.Sprintf("[GET /users/{user_id}/access_filters/{access_filter_id}][%d] userAccessFilterNotFound  %+v", 404, o.Payload)
}

func (o *UserAccessFilterNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
