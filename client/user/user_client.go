// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new user API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for user API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AllUserAccessFilters gets all access filters

### NOTE: this feature is completely end of life and has been removed from the product.
*/
func (a *Client) AllUserAccessFilters(params *AllUserAccessFiltersParams) (*AllUserAccessFiltersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAllUserAccessFiltersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "all_user_access_filters",
		Method:             "GET",
		PathPattern:        "/users/{user_id}/access_filters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AllUserAccessFiltersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AllUserAccessFiltersOK), nil

}

/*
AllUserCredentialsAPI3S gets all API 3 credentials

### API 3 login information for the specified user. This is for the newer API keys that can be added for any user.
*/
func (a *Client) AllUserCredentialsAPI3S(params *AllUserCredentialsAPI3SParams) (*AllUserCredentialsAPI3SOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAllUserCredentialsAPI3SParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "all_user_credentials_api3s",
		Method:             "GET",
		PathPattern:        "/users/{user_id}/credentials_api3",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AllUserCredentialsAPI3SReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AllUserCredentialsAPI3SOK), nil

}

/*
AllUserCredentialsEmbeds gets all embedding credentials

### Embed login information for the specified user.
*/
func (a *Client) AllUserCredentialsEmbeds(params *AllUserCredentialsEmbedsParams) (*AllUserCredentialsEmbedsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAllUserCredentialsEmbedsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "all_user_credentials_embeds",
		Method:             "GET",
		PathPattern:        "/users/{user_id}/credentials_embed",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AllUserCredentialsEmbedsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AllUserCredentialsEmbedsOK), nil

}

/*
AllUserSessions gets all web login sessions

### Web login session for the specified user.
*/
func (a *Client) AllUserSessions(params *AllUserSessionsParams) (*AllUserSessionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAllUserSessionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "all_user_sessions",
		Method:             "GET",
		PathPattern:        "/users/{user_id}/sessions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AllUserSessionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AllUserSessionsOK), nil

}

/*
AllUsers gets all users

### Get information about all users.

*/
func (a *Client) AllUsers(params *AllUsersParams) (*AllUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAllUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "all_users",
		Method:             "GET",
		PathPattern:        "/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AllUsersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AllUsersOK), nil

}

/*
CreateUser creates user

### Create a user with the specified information.

*/
func (a *Client) CreateUser(params *CreateUserParams) (*CreateUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "create_user",
		Method:             "POST",
		PathPattern:        "/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateUserOK), nil

}

/*
CreateUserAccessFilter creates access filter

### NOTE: this feature is completely end of life and has been removed from the product.
*/
func (a *Client) CreateUserAccessFilter(params *CreateUserAccessFilterParams) (*CreateUserAccessFilterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUserAccessFilterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "create_user_access_filter",
		Method:             "POST",
		PathPattern:        "/users/{user_id}/access_filters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateUserAccessFilterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateUserAccessFilterOK), nil

}

/*
CreateUserCredentialsAPI creates API credential

### Create API Credential.
SUPPORT FOR THIS HAS BEEN REMOVED.

*/
func (a *Client) CreateUserCredentialsAPI(params *CreateUserCredentialsAPIParams) (*CreateUserCredentialsAPIOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUserCredentialsAPIParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "create_user_credentials_api",
		Method:             "POST",
		PathPattern:        "/users/{user_id}/credentials_api",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateUserCredentialsAPIReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateUserCredentialsAPIOK), nil

}

/*
CreateUserCredentialsApi3 creates API 3 credential

### API 3 login information for the specified user. This is for the newer API keys that can be added for any user.
*/
func (a *Client) CreateUserCredentialsApi3(params *CreateUserCredentialsApi3Params) (*CreateUserCredentialsApi3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUserCredentialsApi3Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "create_user_credentials_api3",
		Method:             "POST",
		PathPattern:        "/users/{user_id}/credentials_api3",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateUserCredentialsApi3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateUserCredentialsApi3OK), nil

}

/*
CreateUserCredentialsEmail creates email password credential

### Email/password login information for the specified user.
*/
func (a *Client) CreateUserCredentialsEmail(params *CreateUserCredentialsEmailParams) (*CreateUserCredentialsEmailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUserCredentialsEmailParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "create_user_credentials_email",
		Method:             "POST",
		PathPattern:        "/users/{user_id}/credentials_email",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateUserCredentialsEmailReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateUserCredentialsEmailOK), nil

}

/*
CreateUserCredentialsEmailPasswordReset creates password reset token

### Create a password reset token.
This will create a cryptographically secure random password reset token for the user.
If the user already has a password reset token then this invalidates the old token and creates a new one.
The token is expressed as the 'password_reset_url' of the user's email/password credential object.
This takes an optional 'expires' param to indicate if the new token should be an expiring token.
Tokens that expire are typically used for self-service password resets for existing users.
Invitation emails for new users typically are not set to expire.
The expire period is always 60 minutes when expires is enabled.
This method can be called with an empty body.

*/
func (a *Client) CreateUserCredentialsEmailPasswordReset(params *CreateUserCredentialsEmailPasswordResetParams) (*CreateUserCredentialsEmailPasswordResetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUserCredentialsEmailPasswordResetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "create_user_credentials_email_password_reset",
		Method:             "POST",
		PathPattern:        "/users/{user_id}/credentials_email/password_reset",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateUserCredentialsEmailPasswordResetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateUserCredentialsEmailPasswordResetOK), nil

}

/*
CreateUserCredentialsTotp creates two factor credential

### Two-factor login information for the specified user.
*/
func (a *Client) CreateUserCredentialsTotp(params *CreateUserCredentialsTotpParams) (*CreateUserCredentialsTotpOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUserCredentialsTotpParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "create_user_credentials_totp",
		Method:             "POST",
		PathPattern:        "/users/{user_id}/credentials_totp",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateUserCredentialsTotpReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateUserCredentialsTotpOK), nil

}

/*
DeleteUser deletes user

### Delete the user with a specific id.

**DANGER** this will delete the user and all looks and other information owned by the user.

*/
func (a *Client) DeleteUser(params *DeleteUserParams) (*DeleteUserNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete_user",
		Method:             "DELETE",
		PathPattern:        "/users/{user_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUserNoContent), nil

}

/*
DeleteUserAccessFilter deletes access filter

### NOTE: this feature is completely end of life and has been removed from the product.
*/
func (a *Client) DeleteUserAccessFilter(params *DeleteUserAccessFilterParams) (*DeleteUserAccessFilterNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserAccessFilterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete_user_access_filter",
		Method:             "DELETE",
		PathPattern:        "/users/{user_id}/access_filters/{access_filter_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserAccessFilterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUserAccessFilterNoContent), nil

}

/*
DeleteUserAttributeUserValue deletes user attribute user value

### Delete a user attribute value from a user's account settings.

After the user attribute value is deleted from the user's account settings, subsequent requests
for the user attribute value for this user will draw from the user's groups or the default
value of the user attribute. See [Get User Attribute Values](#!/User/user_attribute_user_values) for more
information about how user attribute values are resolved.

*/
func (a *Client) DeleteUserAttributeUserValue(params *DeleteUserAttributeUserValueParams) (*DeleteUserAttributeUserValueNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserAttributeUserValueParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete_user_attribute_user_value",
		Method:             "DELETE",
		PathPattern:        "/users/{user_id}/attribute_values/{user_attribute_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserAttributeUserValueReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUserAttributeUserValueNoContent), nil

}

/*
DeleteUserCredentialsAPI deletes API credential

### API login information for the specified user. This is for 'API Users' used for the 'old' query API. THIS SUPPORT HAS BEEN REMOVED.
*/
func (a *Client) DeleteUserCredentialsAPI(params *DeleteUserCredentialsAPIParams) (*DeleteUserCredentialsAPINoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserCredentialsAPIParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete_user_credentials_api",
		Method:             "DELETE",
		PathPattern:        "/users/{user_id}/credentials_api",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserCredentialsAPIReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUserCredentialsAPINoContent), nil

}

/*
DeleteUserCredentialsApi3 deletes API 3 credential

### API 3 login information for the specified user. This is for the newer API keys that can be added for any user.
*/
func (a *Client) DeleteUserCredentialsApi3(params *DeleteUserCredentialsApi3Params) (*DeleteUserCredentialsApi3NoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserCredentialsApi3Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete_user_credentials_api3",
		Method:             "DELETE",
		PathPattern:        "/users/{user_id}/credentials_api3/{credentials_api3_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserCredentialsApi3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUserCredentialsApi3NoContent), nil

}

/*
DeleteUserCredentialsEmail deletes email password credential

### Email/password login information for the specified user.
*/
func (a *Client) DeleteUserCredentialsEmail(params *DeleteUserCredentialsEmailParams) (*DeleteUserCredentialsEmailNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserCredentialsEmailParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete_user_credentials_email",
		Method:             "DELETE",
		PathPattern:        "/users/{user_id}/credentials_email",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserCredentialsEmailReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUserCredentialsEmailNoContent), nil

}

/*
DeleteUserCredentialsEmbed deletes embedding credential

### Embed login information for the specified user.
*/
func (a *Client) DeleteUserCredentialsEmbed(params *DeleteUserCredentialsEmbedParams) (*DeleteUserCredentialsEmbedNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserCredentialsEmbedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete_user_credentials_embed",
		Method:             "DELETE",
		PathPattern:        "/users/{user_id}/credentials_embed/{credentials_embed_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserCredentialsEmbedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUserCredentialsEmbedNoContent), nil

}

/*
DeleteUserCredentialsGoogle deletes google auth credential

### Google authentication login information for the specified user.
*/
func (a *Client) DeleteUserCredentialsGoogle(params *DeleteUserCredentialsGoogleParams) (*DeleteUserCredentialsGoogleNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserCredentialsGoogleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete_user_credentials_google",
		Method:             "DELETE",
		PathPattern:        "/users/{user_id}/credentials_google",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserCredentialsGoogleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUserCredentialsGoogleNoContent), nil

}

/*
DeleteUserCredentialsLdap deletes l d a p credential

### LDAP login information for the specified user.
*/
func (a *Client) DeleteUserCredentialsLdap(params *DeleteUserCredentialsLdapParams) (*DeleteUserCredentialsLdapNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserCredentialsLdapParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete_user_credentials_ldap",
		Method:             "DELETE",
		PathPattern:        "/users/{user_id}/credentials_ldap",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserCredentialsLdapReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUserCredentialsLdapNoContent), nil

}

/*
DeleteUserCredentialsLookerOpenid deletes looker open Id credential

### Looker Openid login information for the specified user. Used by Looker Analysts.
*/
func (a *Client) DeleteUserCredentialsLookerOpenid(params *DeleteUserCredentialsLookerOpenidParams) (*DeleteUserCredentialsLookerOpenidNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserCredentialsLookerOpenidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete_user_credentials_looker_openid",
		Method:             "DELETE",
		PathPattern:        "/users/{user_id}/credentials_looker_openid",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserCredentialsLookerOpenidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUserCredentialsLookerOpenidNoContent), nil

}

/*
DeleteUserCredentialsOidc deletes o ID c auth credential

### OpenID Connect (OIDC) authentication login information for the specified user.
*/
func (a *Client) DeleteUserCredentialsOidc(params *DeleteUserCredentialsOidcParams) (*DeleteUserCredentialsOidcNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserCredentialsOidcParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete_user_credentials_oidc",
		Method:             "DELETE",
		PathPattern:        "/users/{user_id}/credentials_oidc",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserCredentialsOidcReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUserCredentialsOidcNoContent), nil

}

/*
DeleteUserCredentialsSaml deletes saml auth credential

### Saml authentication login information for the specified user.
*/
func (a *Client) DeleteUserCredentialsSaml(params *DeleteUserCredentialsSamlParams) (*DeleteUserCredentialsSamlNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserCredentialsSamlParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete_user_credentials_saml",
		Method:             "DELETE",
		PathPattern:        "/users/{user_id}/credentials_saml",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserCredentialsSamlReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUserCredentialsSamlNoContent), nil

}

/*
DeleteUserCredentialsTotp deletes two factor credential

### Two-factor login information for the specified user.
*/
func (a *Client) DeleteUserCredentialsTotp(params *DeleteUserCredentialsTotpParams) (*DeleteUserCredentialsTotpNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserCredentialsTotpParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete_user_credentials_totp",
		Method:             "DELETE",
		PathPattern:        "/users/{user_id}/credentials_totp",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserCredentialsTotpReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUserCredentialsTotpNoContent), nil

}

/*
DeleteUserSession deletes web login session

### Web login session for the specified user.
*/
func (a *Client) DeleteUserSession(params *DeleteUserSessionParams) (*DeleteUserSessionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserSessionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete_user_session",
		Method:             "DELETE",
		PathPattern:        "/users/{user_id}/sessions/{session_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserSessionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUserSessionNoContent), nil

}

/*
Me gets current user

### Get information about the current user; i.e. the user account currently calling the API.

*/
func (a *Client) Me(params *MeParams) (*MeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "me",
		Method:             "GET",
		PathPattern:        "/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*MeOK), nil

}

/*
SearchUsers searches users

### Search users.

*/
func (a *Client) SearchUsers(params *SearchUsersParams) (*SearchUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "search_users",
		Method:             "GET",
		PathPattern:        "/users/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchUsersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SearchUsersOK), nil

}

/*
SearchUsersNames searches user names

### Search users where first_name OR last_name OR email matches a string.

The results will be AND'd with any additional search parameters that are (optionally) included.

*/
func (a *Client) SearchUsersNames(params *SearchUsersNamesParams) (*SearchUsersNamesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchUsersNamesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "search_users_names",
		Method:             "GET",
		PathPattern:        "/users/search/names/{pattern}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchUsersNamesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SearchUsersNamesOK), nil

}

/*
SetUserAttributeUserValue sets user attribute user value

### Store a custom value for a user attribute in a user's account settings.

Per-user user attribute values take precedence over group or default values.

*/
func (a *Client) SetUserAttributeUserValue(params *SetUserAttributeUserValueParams) (*SetUserAttributeUserValueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetUserAttributeUserValueParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set_user_attribute_user_value",
		Method:             "PATCH",
		PathPattern:        "/users/{user_id}/attribute_values/{user_attribute_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetUserAttributeUserValueReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetUserAttributeUserValueOK), nil

}

/*
SetUserRoles sets user roles

### Set roles of the user with a specific id.

*/
func (a *Client) SetUserRoles(params *SetUserRolesParams) (*SetUserRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetUserRolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set_user_roles",
		Method:             "PUT",
		PathPattern:        "/users/{user_id}/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetUserRolesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetUserRolesOK), nil

}

/*
UpdateUser updates user

### Update information about the user with a specific id.

*/
func (a *Client) UpdateUser(params *UpdateUserParams) (*UpdateUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "update_user",
		Method:             "PATCH",
		PathPattern:        "/users/{user_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateUserOK), nil

}

/*
UpdateUserAccessFilter updates access filter

### NOTE: this feature is completely end of life and has been removed from the product.
*/
func (a *Client) UpdateUserAccessFilter(params *UpdateUserAccessFilterParams) (*UpdateUserAccessFilterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUserAccessFilterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "update_user_access_filter",
		Method:             "PATCH",
		PathPattern:        "/users/{user_id}/access_filters/{access_filter_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateUserAccessFilterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateUserAccessFilterOK), nil

}

/*
UpdateUserCredentialsEmail updates email password credential

### Email/password login information for the specified user.
*/
func (a *Client) UpdateUserCredentialsEmail(params *UpdateUserCredentialsEmailParams) (*UpdateUserCredentialsEmailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUserCredentialsEmailParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "update_user_credentials_email",
		Method:             "PATCH",
		PathPattern:        "/users/{user_id}/credentials_email",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateUserCredentialsEmailReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateUserCredentialsEmailOK), nil

}

/*
User gets user by Id

### Get information about the user with a specific id.

If the caller is an admin or the caller is the user being specified, then full user information will
be returned. Otherwise, a minimal 'public' variant of the user information will be returned. This contains
The user name and avatar url, but no sensitive information.

*/
func (a *Client) User(params *UserParams) (*UserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "user",
		Method:             "GET",
		PathPattern:        "/users/{user_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserOK), nil

}

/*
UserAccessFilter gets access filter

### NOTE: this feature is completely end of life and has been removed from the product.
*/
func (a *Client) UserAccessFilter(params *UserAccessFilterParams) (*UserAccessFilterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserAccessFilterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "user_access_filter",
		Method:             "GET",
		PathPattern:        "/users/{user_id}/access_filters/{access_filter_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserAccessFilterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserAccessFilterOK), nil

}

/*
UserAttributeUserValues gets user attribute values

### Get user attribute values for a given user.

Returns the values of specified user attributes (or all user attributes) for a certain user.

A value for each user attribute is searched for in the following locations, in this order:
1. in the user's account information
1. in groups that the user is a member of
1. the default value of the user attribute

If more than one group has a value defined for a user attribute, the group with the lowest rank wins.

The response will only include user attributes for which values were found. Use `include_unset=true` to include
empty records for user attributes with no value.

The value of all hidden user attributes will be blank.

*/
func (a *Client) UserAttributeUserValues(params *UserAttributeUserValuesParams) (*UserAttributeUserValuesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserAttributeUserValuesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "user_attribute_user_values",
		Method:             "GET",
		PathPattern:        "/users/{user_id}/attribute_values",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserAttributeUserValuesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserAttributeUserValuesOK), nil

}

/*
UserCredentialsAPI gets API credential

### API login information for the specified user. This is for 'API Users' used for the 'old' query API. THIS SUPPORT HAS BEEN REMOVED.
*/
func (a *Client) UserCredentialsAPI(params *UserCredentialsAPIParams) (*UserCredentialsAPIOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserCredentialsAPIParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "user_credentials_api",
		Method:             "GET",
		PathPattern:        "/users/{user_id}/credentials_api",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserCredentialsAPIReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserCredentialsAPIOK), nil

}

/*
UserCredentialsApi3 gets API 3 credential

### API 3 login information for the specified user. This is for the newer API keys that can be added for any user.
*/
func (a *Client) UserCredentialsApi3(params *UserCredentialsApi3Params) (*UserCredentialsApi3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserCredentialsApi3Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "user_credentials_api3",
		Method:             "GET",
		PathPattern:        "/users/{user_id}/credentials_api3/{credentials_api3_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserCredentialsApi3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserCredentialsApi3OK), nil

}

/*
UserCredentialsEmail gets email password credential

### Email/password login information for the specified user.
*/
func (a *Client) UserCredentialsEmail(params *UserCredentialsEmailParams) (*UserCredentialsEmailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserCredentialsEmailParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "user_credentials_email",
		Method:             "GET",
		PathPattern:        "/users/{user_id}/credentials_email",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserCredentialsEmailReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserCredentialsEmailOK), nil

}

/*
UserCredentialsEmbed gets embedding credential

### Embed login information for the specified user.
*/
func (a *Client) UserCredentialsEmbed(params *UserCredentialsEmbedParams) (*UserCredentialsEmbedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserCredentialsEmbedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "user_credentials_embed",
		Method:             "GET",
		PathPattern:        "/users/{user_id}/credentials_embed/{credentials_embed_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserCredentialsEmbedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserCredentialsEmbedOK), nil

}

/*
UserCredentialsGoogle gets google auth credential

### Google authentication login information for the specified user.
*/
func (a *Client) UserCredentialsGoogle(params *UserCredentialsGoogleParams) (*UserCredentialsGoogleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserCredentialsGoogleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "user_credentials_google",
		Method:             "GET",
		PathPattern:        "/users/{user_id}/credentials_google",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserCredentialsGoogleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserCredentialsGoogleOK), nil

}

/*
UserCredentialsLdap gets l d a p credential

### LDAP login information for the specified user.
*/
func (a *Client) UserCredentialsLdap(params *UserCredentialsLdapParams) (*UserCredentialsLdapOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserCredentialsLdapParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "user_credentials_ldap",
		Method:             "GET",
		PathPattern:        "/users/{user_id}/credentials_ldap",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserCredentialsLdapReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserCredentialsLdapOK), nil

}

/*
UserCredentialsLookerOpenid gets looker open Id credential

### Looker Openid login information for the specified user. Used by Looker Analysts.
*/
func (a *Client) UserCredentialsLookerOpenid(params *UserCredentialsLookerOpenidParams) (*UserCredentialsLookerOpenidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserCredentialsLookerOpenidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "user_credentials_looker_openid",
		Method:             "GET",
		PathPattern:        "/users/{user_id}/credentials_looker_openid",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserCredentialsLookerOpenidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserCredentialsLookerOpenidOK), nil

}

/*
UserCredentialsOidc gets o ID c auth credential

### OpenID Connect (OIDC) authentication login information for the specified user.
*/
func (a *Client) UserCredentialsOidc(params *UserCredentialsOidcParams) (*UserCredentialsOidcOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserCredentialsOidcParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "user_credentials_oidc",
		Method:             "GET",
		PathPattern:        "/users/{user_id}/credentials_oidc",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserCredentialsOidcReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserCredentialsOidcOK), nil

}

/*
UserCredentialsSaml gets saml auth credential

### Saml authentication login information for the specified user.
*/
func (a *Client) UserCredentialsSaml(params *UserCredentialsSamlParams) (*UserCredentialsSamlOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserCredentialsSamlParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "user_credentials_saml",
		Method:             "GET",
		PathPattern:        "/users/{user_id}/credentials_saml",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserCredentialsSamlReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserCredentialsSamlOK), nil

}

/*
UserCredentialsTotp gets two factor credential

### Two-factor login information for the specified user.
*/
func (a *Client) UserCredentialsTotp(params *UserCredentialsTotpParams) (*UserCredentialsTotpOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserCredentialsTotpParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "user_credentials_totp",
		Method:             "GET",
		PathPattern:        "/users/{user_id}/credentials_totp",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserCredentialsTotpReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserCredentialsTotpOK), nil

}

/*
UserForCredential gets user by credential Id

### Get information about the user with a credential of given type with specific id.

This is used to do things like find users by their embed external_user_id. Or, find the user with
a given api3 client_id, etc. The 'credential_type' matchs the 'type' name of the various credential
types. It must be one of the values listed in the table below. The 'credential_id' is your unique Id
for the user and is specific to each type of credential.

An example using the Ruby sdk might look like:

`sdk.user_for_credential('embed', 'customer-4959425')`

This table shows the supported 'Credential Type' strings. The right column is for reference; it shows
which field in the given credential type is actually searched when finding a user with the supplied
'credential_id'.

| Credential Types | Id Field Matched |
| ---------------- | ---------------- |
| email            | email            |
| google           | google_user_id   |
| saml             | saml_user_id     |
| oidc             | oidc_user_id     |
| ldap             | ldap_id          |
| api              | token            |
| api3             | client_id        |
| embed            | external_user_id |
| looker_openid    | email            |

NOTE: 'api' is the legacy Looker query API. The API you are currently looking at is 'api3'.


*/
func (a *Client) UserForCredential(params *UserForCredentialParams) (*UserForCredentialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserForCredentialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "user_for_credential",
		Method:             "GET",
		PathPattern:        "/users/credential/{credential_type}/{credential_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserForCredentialReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserForCredentialOK), nil

}

/*
UserRoles gets user roles

### Get information about roles of the user with a specific id.

*/
func (a *Client) UserRoles(params *UserRolesParams) (*UserRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserRolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "user_roles",
		Method:             "GET",
		PathPattern:        "/users/{user_id}/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserRolesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserRolesOK), nil

}

/*
UserSession gets web login session

### Web login session for the specified user.
*/
func (a *Client) UserSession(params *UserSessionParams) (*UserSessionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserSessionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "user_session",
		Method:             "GET",
		PathPattern:        "/users/{user_id}/sessions/{session_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserSessionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserSessionOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
