// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/chenrui333/go-looker/models"
)

// DeleteUserCredentialsTotpReader is a Reader for the DeleteUserCredentialsTotp structure.
type DeleteUserCredentialsTotpReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteUserCredentialsTotpReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewDeleteUserCredentialsTotpNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewDeleteUserCredentialsTotpBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDeleteUserCredentialsTotpNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteUserCredentialsTotpNoContent creates a DeleteUserCredentialsTotpNoContent with default headers values
func NewDeleteUserCredentialsTotpNoContent() *DeleteUserCredentialsTotpNoContent {
	return &DeleteUserCredentialsTotpNoContent{}
}

/*DeleteUserCredentialsTotpNoContent handles this case with default header values.

Successfully deleted.
*/
type DeleteUserCredentialsTotpNoContent struct {
	Payload string
}

func (o *DeleteUserCredentialsTotpNoContent) Error() string {
	return fmt.Sprintf("[DELETE /users/{user_id}/credentials_totp][%d] deleteUserCredentialsTotpNoContent  %+v", 204, o.Payload)
}

func (o *DeleteUserCredentialsTotpNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteUserCredentialsTotpBadRequest creates a DeleteUserCredentialsTotpBadRequest with default headers values
func NewDeleteUserCredentialsTotpBadRequest() *DeleteUserCredentialsTotpBadRequest {
	return &DeleteUserCredentialsTotpBadRequest{}
}

/*DeleteUserCredentialsTotpBadRequest handles this case with default header values.

Bad Request
*/
type DeleteUserCredentialsTotpBadRequest struct {
	Payload *models.Error
}

func (o *DeleteUserCredentialsTotpBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /users/{user_id}/credentials_totp][%d] deleteUserCredentialsTotpBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteUserCredentialsTotpBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteUserCredentialsTotpNotFound creates a DeleteUserCredentialsTotpNotFound with default headers values
func NewDeleteUserCredentialsTotpNotFound() *DeleteUserCredentialsTotpNotFound {
	return &DeleteUserCredentialsTotpNotFound{}
}

/*DeleteUserCredentialsTotpNotFound handles this case with default header values.

Not Found
*/
type DeleteUserCredentialsTotpNotFound struct {
	Payload *models.Error
}

func (o *DeleteUserCredentialsTotpNotFound) Error() string {
	return fmt.Sprintf("[DELETE /users/{user_id}/credentials_totp][%d] deleteUserCredentialsTotpNotFound  %+v", 404, o.Payload)
}

func (o *DeleteUserCredentialsTotpNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
