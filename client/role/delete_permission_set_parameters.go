// Code generated by go-swagger; DO NOT EDIT.

package role

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDeletePermissionSetParams creates a new DeletePermissionSetParams object
// with the default values initialized.
func NewDeletePermissionSetParams() *DeletePermissionSetParams {
	var ()
	return &DeletePermissionSetParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeletePermissionSetParamsWithTimeout creates a new DeletePermissionSetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeletePermissionSetParamsWithTimeout(timeout time.Duration) *DeletePermissionSetParams {
	var ()
	return &DeletePermissionSetParams{

		timeout: timeout,
	}
}

// NewDeletePermissionSetParamsWithContext creates a new DeletePermissionSetParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeletePermissionSetParamsWithContext(ctx context.Context) *DeletePermissionSetParams {
	var ()
	return &DeletePermissionSetParams{

		Context: ctx,
	}
}

// NewDeletePermissionSetParamsWithHTTPClient creates a new DeletePermissionSetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeletePermissionSetParamsWithHTTPClient(client *http.Client) *DeletePermissionSetParams {
	var ()
	return &DeletePermissionSetParams{
		HTTPClient: client,
	}
}

/*DeletePermissionSetParams contains all the parameters to send to the API endpoint
for the delete permission set operation typically these are written to a http.Request
*/
type DeletePermissionSetParams struct {

	/*PermissionSetID
	  Id of permission set

	*/
	PermissionSetID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete permission set params
func (o *DeletePermissionSetParams) WithTimeout(timeout time.Duration) *DeletePermissionSetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete permission set params
func (o *DeletePermissionSetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete permission set params
func (o *DeletePermissionSetParams) WithContext(ctx context.Context) *DeletePermissionSetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete permission set params
func (o *DeletePermissionSetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete permission set params
func (o *DeletePermissionSetParams) WithHTTPClient(client *http.Client) *DeletePermissionSetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete permission set params
func (o *DeletePermissionSetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPermissionSetID adds the permissionSetID to the delete permission set params
func (o *DeletePermissionSetParams) WithPermissionSetID(permissionSetID int64) *DeletePermissionSetParams {
	o.SetPermissionSetID(permissionSetID)
	return o
}

// SetPermissionSetID adds the permissionSetId to the delete permission set params
func (o *DeletePermissionSetParams) SetPermissionSetID(permissionSetID int64) {
	o.PermissionSetID = permissionSetID
}

// WriteToRequest writes these params to a swagger request
func (o *DeletePermissionSetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param permission_set_id
	if err := r.SetPathParam("permission_set_id", swag.FormatInt64(o.PermissionSetID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
