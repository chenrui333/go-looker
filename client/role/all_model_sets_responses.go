// Code generated by go-swagger; DO NOT EDIT.

package role

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/chenrui333/go-looker/models"
)

// AllModelSetsReader is a Reader for the AllModelSets structure.
type AllModelSetsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AllModelSetsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewAllModelSetsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewAllModelSetsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAllModelSetsOK creates a AllModelSetsOK with default headers values
func NewAllModelSetsOK() *AllModelSetsOK {
	return &AllModelSetsOK{}
}

/*AllModelSetsOK handles this case with default header values.

All model sets.
*/
type AllModelSetsOK struct {
	Payload []*models.ModelSet
}

func (o *AllModelSetsOK) Error() string {
	return fmt.Sprintf("[GET /model_sets][%d] allModelSetsOK  %+v", 200, o.Payload)
}

func (o *AllModelSetsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAllModelSetsNotFound creates a AllModelSetsNotFound with default headers values
func NewAllModelSetsNotFound() *AllModelSetsNotFound {
	return &AllModelSetsNotFound{}
}

/*AllModelSetsNotFound handles this case with default header values.

Not Found
*/
type AllModelSetsNotFound struct {
	Payload *models.Error
}

func (o *AllModelSetsNotFound) Error() string {
	return fmt.Sprintf("[GET /model_sets][%d] allModelSetsNotFound  %+v", 404, o.Payload)
}

func (o *AllModelSetsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
