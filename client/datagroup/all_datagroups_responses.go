// Code generated by go-swagger; DO NOT EDIT.

package datagroup

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/chenrui333/go-looker/models"
)

// AllDatagroupsReader is a Reader for the AllDatagroups structure.
type AllDatagroupsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AllDatagroupsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewAllDatagroupsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewAllDatagroupsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewAllDatagroupsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAllDatagroupsOK creates a AllDatagroupsOK with default headers values
func NewAllDatagroupsOK() *AllDatagroupsOK {
	return &AllDatagroupsOK{}
}

/*AllDatagroupsOK handles this case with default header values.

Datagroup
*/
type AllDatagroupsOK struct {
	Payload []*models.Datagroup
}

func (o *AllDatagroupsOK) Error() string {
	return fmt.Sprintf("[GET /datagroups][%d] allDatagroupsOK  %+v", 200, o.Payload)
}

func (o *AllDatagroupsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAllDatagroupsBadRequest creates a AllDatagroupsBadRequest with default headers values
func NewAllDatagroupsBadRequest() *AllDatagroupsBadRequest {
	return &AllDatagroupsBadRequest{}
}

/*AllDatagroupsBadRequest handles this case with default header values.

Bad Request
*/
type AllDatagroupsBadRequest struct {
	Payload *models.Error
}

func (o *AllDatagroupsBadRequest) Error() string {
	return fmt.Sprintf("[GET /datagroups][%d] allDatagroupsBadRequest  %+v", 400, o.Payload)
}

func (o *AllDatagroupsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAllDatagroupsNotFound creates a AllDatagroupsNotFound with default headers values
func NewAllDatagroupsNotFound() *AllDatagroupsNotFound {
	return &AllDatagroupsNotFound{}
}

/*AllDatagroupsNotFound handles this case with default header values.

Not Found
*/
type AllDatagroupsNotFound struct {
	Payload *models.Error
}

func (o *AllDatagroupsNotFound) Error() string {
	return fmt.Sprintf("[GET /datagroups][%d] allDatagroupsNotFound  %+v", 404, o.Payload)
}

func (o *AllDatagroupsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
