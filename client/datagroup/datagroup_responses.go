// Code generated by go-swagger; DO NOT EDIT.

package datagroup

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/chenrui333/go-looker/models"
)

// DatagroupReader is a Reader for the Datagroup structure.
type DatagroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DatagroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewDatagroupOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewDatagroupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDatagroupNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDatagroupOK creates a DatagroupOK with default headers values
func NewDatagroupOK() *DatagroupOK {
	return &DatagroupOK{}
}

/*DatagroupOK handles this case with default header values.

Datagroup
*/
type DatagroupOK struct {
	Payload *models.Datagroup
}

func (o *DatagroupOK) Error() string {
	return fmt.Sprintf("[GET /datagroups/{datagroup_id}][%d] datagroupOK  %+v", 200, o.Payload)
}

func (o *DatagroupOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Datagroup)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDatagroupBadRequest creates a DatagroupBadRequest with default headers values
func NewDatagroupBadRequest() *DatagroupBadRequest {
	return &DatagroupBadRequest{}
}

/*DatagroupBadRequest handles this case with default header values.

Bad Request
*/
type DatagroupBadRequest struct {
	Payload *models.Error
}

func (o *DatagroupBadRequest) Error() string {
	return fmt.Sprintf("[GET /datagroups/{datagroup_id}][%d] datagroupBadRequest  %+v", 400, o.Payload)
}

func (o *DatagroupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDatagroupNotFound creates a DatagroupNotFound with default headers values
func NewDatagroupNotFound() *DatagroupNotFound {
	return &DatagroupNotFound{}
}

/*DatagroupNotFound handles this case with default header values.

Not Found
*/
type DatagroupNotFound struct {
	Payload *models.Error
}

func (o *DatagroupNotFound) Error() string {
	return fmt.Sprintf("[GET /datagroups/{datagroup_id}][%d] datagroupNotFound  %+v", 404, o.Payload)
}

func (o *DatagroupNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
