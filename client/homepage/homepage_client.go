// Code generated by go-swagger; DO NOT EDIT.

package homepage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new homepage API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for homepage API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AllHomepageItems gets all homepage items

### Get information about all homepage items.

*/
func (a *Client) AllHomepageItems(params *AllHomepageItemsParams) (*AllHomepageItemsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAllHomepageItemsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "all_homepage_items",
		Method:             "GET",
		PathPattern:        "/homepage_items",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AllHomepageItemsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AllHomepageItemsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for all_homepage_items: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AllHomepageSections gets all homepage sections

### Get information about all homepage sections.

*/
func (a *Client) AllHomepageSections(params *AllHomepageSectionsParams) (*AllHomepageSectionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAllHomepageSectionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "all_homepage_sections",
		Method:             "GET",
		PathPattern:        "/homepage_sections",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AllHomepageSectionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AllHomepageSectionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for all_homepage_sections: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AllHomepages gets all homepages

### Get information about all homepages.

*/
func (a *Client) AllHomepages(params *AllHomepagesParams) (*AllHomepagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAllHomepagesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "all_homepages",
		Method:             "GET",
		PathPattern:        "/homepages",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AllHomepagesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AllHomepagesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for all_homepages: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateHomepage creates homepage

### Create a new homepage.

*/
func (a *Client) CreateHomepage(params *CreateHomepageParams) (*CreateHomepageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateHomepageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "create_homepage",
		Method:             "POST",
		PathPattern:        "/homepages",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateHomepageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateHomepageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_homepage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateHomepageItem creates homepage item

### Create a new homepage item.

*/
func (a *Client) CreateHomepageItem(params *CreateHomepageItemParams) (*CreateHomepageItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateHomepageItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "create_homepage_item",
		Method:             "POST",
		PathPattern:        "/homepage_items",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateHomepageItemReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateHomepageItemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_homepage_item: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateHomepageSection creates homepage section

### Create a new homepage section.

*/
func (a *Client) CreateHomepageSection(params *CreateHomepageSectionParams) (*CreateHomepageSectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateHomepageSectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "create_homepage_section",
		Method:             "POST",
		PathPattern:        "/homepage_sections",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateHomepageSectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateHomepageSectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_homepage_section: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteHomepage deletes homepage

### Delete a homepage.

*/
func (a *Client) DeleteHomepage(params *DeleteHomepageParams) (*DeleteHomepageNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteHomepageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete_homepage",
		Method:             "DELETE",
		PathPattern:        "/homepages/{homepage_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteHomepageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteHomepageNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_homepage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteHomepageItem deletes homepage item

### Delete a homepage item.

*/
func (a *Client) DeleteHomepageItem(params *DeleteHomepageItemParams) (*DeleteHomepageItemNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteHomepageItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete_homepage_item",
		Method:             "DELETE",
		PathPattern:        "/homepage_items/{homepage_item_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteHomepageItemReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteHomepageItemNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_homepage_item: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteHomepageSection deletes homepage section

### Delete a homepage section.

*/
func (a *Client) DeleteHomepageSection(params *DeleteHomepageSectionParams) (*DeleteHomepageSectionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteHomepageSectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete_homepage_section",
		Method:             "DELETE",
		PathPattern:        "/homepage_sections/{homepage_section_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteHomepageSectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteHomepageSectionNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_homepage_section: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
Homepage gets homepage

### Get information about a homepage.

*/
func (a *Client) Homepage(params *HomepageParams) (*HomepageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHomepageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "homepage",
		Method:             "GET",
		PathPattern:        "/homepages/{homepage_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &HomepageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HomepageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for homepage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
HomepageItem gets homepage item

### Get information about a homepage item.

*/
func (a *Client) HomepageItem(params *HomepageItemParams) (*HomepageItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHomepageItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "homepage_item",
		Method:             "GET",
		PathPattern:        "/homepage_items/{homepage_item_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &HomepageItemReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HomepageItemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for homepage_item: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
HomepageSection gets homepage section

### Get information about a homepage section.

*/
func (a *Client) HomepageSection(params *HomepageSectionParams) (*HomepageSectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHomepageSectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "homepage_section",
		Method:             "GET",
		PathPattern:        "/homepage_sections/{homepage_section_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &HomepageSectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HomepageSectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for homepage_section: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchHomepages searches homepages

### Search Homepages

If multiple search params are given and `filter_or` is FALSE or not specified,
search params are combined in a logical AND operation.
Only rows that match *all* search param criteria will be returned.

If `filter_or` is TRUE, multiple search params are combined in a logical OR operation.
Results will include rows that match **any** of the search criteria.

String search params use case-insensitive matching.
String search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.
example="dan%" will match "danger" and "Danzig" but not "David"
example="D_m%" will match "Damage" and "dump"

Integer search params can accept a single value or a comma separated list of values. The multiple
values will be combined under a logical OR operation - results will match at least one of
the given values.

Most search params can accept "IS NULL" and "NOT NULL" as special expressions to match
or exclude (respectively) rows where the column is null.

Boolean search params accept only "true" and "false" as values.


*/
func (a *Client) SearchHomepages(params *SearchHomepagesParams) (*SearchHomepagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchHomepagesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "search_homepages",
		Method:             "GET",
		PathPattern:        "/homepages/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchHomepagesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchHomepagesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for search_homepages: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateHomepage updates homepage

### Update a homepage definition.

*/
func (a *Client) UpdateHomepage(params *UpdateHomepageParams) (*UpdateHomepageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateHomepageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "update_homepage",
		Method:             "PATCH",
		PathPattern:        "/homepages/{homepage_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateHomepageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateHomepageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_homepage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateHomepageItem updates homepage item

### Update a homepage item definition.

*/
func (a *Client) UpdateHomepageItem(params *UpdateHomepageItemParams) (*UpdateHomepageItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateHomepageItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "update_homepage_item",
		Method:             "PATCH",
		PathPattern:        "/homepage_items/{homepage_item_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateHomepageItemReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateHomepageItemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_homepage_item: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateHomepageSection updates homepage section

### Update a homepage section definition.

*/
func (a *Client) UpdateHomepageSection(params *UpdateHomepageSectionParams) (*UpdateHomepageSectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateHomepageSectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "update_homepage_section",
		Method:             "PATCH",
		PathPattern:        "/homepage_sections/{homepage_section_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateHomepageSectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateHomepageSectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_homepage_section: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
