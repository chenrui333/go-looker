// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewSearchUserLoginLockoutsParams creates a new SearchUserLoginLockoutsParams object
// with the default values initialized.
func NewSearchUserLoginLockoutsParams() *SearchUserLoginLockoutsParams {
	var ()
	return &SearchUserLoginLockoutsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSearchUserLoginLockoutsParamsWithTimeout creates a new SearchUserLoginLockoutsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSearchUserLoginLockoutsParamsWithTimeout(timeout time.Duration) *SearchUserLoginLockoutsParams {
	var ()
	return &SearchUserLoginLockoutsParams{

		timeout: timeout,
	}
}

// NewSearchUserLoginLockoutsParamsWithContext creates a new SearchUserLoginLockoutsParams object
// with the default values initialized, and the ability to set a context for a request
func NewSearchUserLoginLockoutsParamsWithContext(ctx context.Context) *SearchUserLoginLockoutsParams {
	var ()
	return &SearchUserLoginLockoutsParams{

		Context: ctx,
	}
}

// NewSearchUserLoginLockoutsParamsWithHTTPClient creates a new SearchUserLoginLockoutsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSearchUserLoginLockoutsParamsWithHTTPClient(client *http.Client) *SearchUserLoginLockoutsParams {
	var ()
	return &SearchUserLoginLockoutsParams{
		HTTPClient: client,
	}
}

/*SearchUserLoginLockoutsParams contains all the parameters to send to the API endpoint
for the search user login lockouts operation typically these are written to a http.Request
*/
type SearchUserLoginLockoutsParams struct {

	/*AuthType
	  Auth type user is locked out for (email, ldap, totp, api)

	*/
	AuthType *string
	/*Email
	  Match email

	*/
	Email *string
	/*Fields
	  Include only these fields in the response

	*/
	Fields *string
	/*FilterOr
	  Combine given search criteria in a boolean OR expression

	*/
	FilterOr *bool
	/*FullName
	  Match name

	*/
	FullName *string
	/*Page
	  Return only page N of paginated results

	*/
	Page *int64
	/*PerPage
	  Return N rows of data per page

	*/
	PerPage *int64
	/*RemoteID
	  Match remote LDAP ID

	*/
	RemoteID *string
	/*Sorts
	  Fields to sort by.

	*/
	Sorts *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the search user login lockouts params
func (o *SearchUserLoginLockoutsParams) WithTimeout(timeout time.Duration) *SearchUserLoginLockoutsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the search user login lockouts params
func (o *SearchUserLoginLockoutsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the search user login lockouts params
func (o *SearchUserLoginLockoutsParams) WithContext(ctx context.Context) *SearchUserLoginLockoutsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the search user login lockouts params
func (o *SearchUserLoginLockoutsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the search user login lockouts params
func (o *SearchUserLoginLockoutsParams) WithHTTPClient(client *http.Client) *SearchUserLoginLockoutsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the search user login lockouts params
func (o *SearchUserLoginLockoutsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthType adds the authType to the search user login lockouts params
func (o *SearchUserLoginLockoutsParams) WithAuthType(authType *string) *SearchUserLoginLockoutsParams {
	o.SetAuthType(authType)
	return o
}

// SetAuthType adds the authType to the search user login lockouts params
func (o *SearchUserLoginLockoutsParams) SetAuthType(authType *string) {
	o.AuthType = authType
}

// WithEmail adds the email to the search user login lockouts params
func (o *SearchUserLoginLockoutsParams) WithEmail(email *string) *SearchUserLoginLockoutsParams {
	o.SetEmail(email)
	return o
}

// SetEmail adds the email to the search user login lockouts params
func (o *SearchUserLoginLockoutsParams) SetEmail(email *string) {
	o.Email = email
}

// WithFields adds the fields to the search user login lockouts params
func (o *SearchUserLoginLockoutsParams) WithFields(fields *string) *SearchUserLoginLockoutsParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the search user login lockouts params
func (o *SearchUserLoginLockoutsParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithFilterOr adds the filterOr to the search user login lockouts params
func (o *SearchUserLoginLockoutsParams) WithFilterOr(filterOr *bool) *SearchUserLoginLockoutsParams {
	o.SetFilterOr(filterOr)
	return o
}

// SetFilterOr adds the filterOr to the search user login lockouts params
func (o *SearchUserLoginLockoutsParams) SetFilterOr(filterOr *bool) {
	o.FilterOr = filterOr
}

// WithFullName adds the fullName to the search user login lockouts params
func (o *SearchUserLoginLockoutsParams) WithFullName(fullName *string) *SearchUserLoginLockoutsParams {
	o.SetFullName(fullName)
	return o
}

// SetFullName adds the fullName to the search user login lockouts params
func (o *SearchUserLoginLockoutsParams) SetFullName(fullName *string) {
	o.FullName = fullName
}

// WithPage adds the page to the search user login lockouts params
func (o *SearchUserLoginLockoutsParams) WithPage(page *int64) *SearchUserLoginLockoutsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the search user login lockouts params
func (o *SearchUserLoginLockoutsParams) SetPage(page *int64) {
	o.Page = page
}

// WithPerPage adds the perPage to the search user login lockouts params
func (o *SearchUserLoginLockoutsParams) WithPerPage(perPage *int64) *SearchUserLoginLockoutsParams {
	o.SetPerPage(perPage)
	return o
}

// SetPerPage adds the perPage to the search user login lockouts params
func (o *SearchUserLoginLockoutsParams) SetPerPage(perPage *int64) {
	o.PerPage = perPage
}

// WithRemoteID adds the remoteID to the search user login lockouts params
func (o *SearchUserLoginLockoutsParams) WithRemoteID(remoteID *string) *SearchUserLoginLockoutsParams {
	o.SetRemoteID(remoteID)
	return o
}

// SetRemoteID adds the remoteId to the search user login lockouts params
func (o *SearchUserLoginLockoutsParams) SetRemoteID(remoteID *string) {
	o.RemoteID = remoteID
}

// WithSorts adds the sorts to the search user login lockouts params
func (o *SearchUserLoginLockoutsParams) WithSorts(sorts *string) *SearchUserLoginLockoutsParams {
	o.SetSorts(sorts)
	return o
}

// SetSorts adds the sorts to the search user login lockouts params
func (o *SearchUserLoginLockoutsParams) SetSorts(sorts *string) {
	o.Sorts = sorts
}

// WriteToRequest writes these params to a swagger request
func (o *SearchUserLoginLockoutsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AuthType != nil {

		// query param auth_type
		var qrAuthType string
		if o.AuthType != nil {
			qrAuthType = *o.AuthType
		}
		qAuthType := qrAuthType
		if qAuthType != "" {
			if err := r.SetQueryParam("auth_type", qAuthType); err != nil {
				return err
			}
		}

	}

	if o.Email != nil {

		// query param email
		var qrEmail string
		if o.Email != nil {
			qrEmail = *o.Email
		}
		qEmail := qrEmail
		if qEmail != "" {
			if err := r.SetQueryParam("email", qEmail); err != nil {
				return err
			}
		}

	}

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	if o.FilterOr != nil {

		// query param filter_or
		var qrFilterOr bool
		if o.FilterOr != nil {
			qrFilterOr = *o.FilterOr
		}
		qFilterOr := swag.FormatBool(qrFilterOr)
		if qFilterOr != "" {
			if err := r.SetQueryParam("filter_or", qFilterOr); err != nil {
				return err
			}
		}

	}

	if o.FullName != nil {

		// query param full_name
		var qrFullName string
		if o.FullName != nil {
			qrFullName = *o.FullName
		}
		qFullName := qrFullName
		if qFullName != "" {
			if err := r.SetQueryParam("full_name", qFullName); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage int64
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.PerPage != nil {

		// query param per_page
		var qrPerPage int64
		if o.PerPage != nil {
			qrPerPage = *o.PerPage
		}
		qPerPage := swag.FormatInt64(qrPerPage)
		if qPerPage != "" {
			if err := r.SetQueryParam("per_page", qPerPage); err != nil {
				return err
			}
		}

	}

	if o.RemoteID != nil {

		// query param remote_id
		var qrRemoteID string
		if o.RemoteID != nil {
			qrRemoteID = *o.RemoteID
		}
		qRemoteID := qrRemoteID
		if qRemoteID != "" {
			if err := r.SetQueryParam("remote_id", qRemoteID); err != nil {
				return err
			}
		}

	}

	if o.Sorts != nil {

		// query param sorts
		var qrSorts string
		if o.Sorts != nil {
			qrSorts = *o.Sorts
		}
		qSorts := qrSorts
		if qSorts != "" {
			if err := r.SetQueryParam("sorts", qSorts); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
