// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/chenrui333/go-looker/models"
)

// SamlConfigReader is a Reader for the SamlConfig structure.
type SamlConfigReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SamlConfigReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewSamlConfigOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewSamlConfigNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSamlConfigOK creates a SamlConfigOK with default headers values
func NewSamlConfigOK() *SamlConfigOK {
	return &SamlConfigOK{}
}

/*SamlConfigOK handles this case with default header values.

SAML Configuration.
*/
type SamlConfigOK struct {
	Payload *models.SamlConfig
}

func (o *SamlConfigOK) Error() string {
	return fmt.Sprintf("[GET /saml_config][%d] samlConfigOK  %+v", 200, o.Payload)
}

func (o *SamlConfigOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SamlConfig)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSamlConfigNotFound creates a SamlConfigNotFound with default headers values
func NewSamlConfigNotFound() *SamlConfigNotFound {
	return &SamlConfigNotFound{}
}

/*SamlConfigNotFound handles this case with default header values.

Not Found
*/
type SamlConfigNotFound struct {
	Payload *models.Error
}

func (o *SamlConfigNotFound) Error() string {
	return fmt.Sprintf("[GET /saml_config][%d] samlConfigNotFound  %+v", 404, o.Payload)
}

func (o *SamlConfigNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
