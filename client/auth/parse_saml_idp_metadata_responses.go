// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/chenrui333/go-looker/models"
)

// ParseSamlIdpMetadataReader is a Reader for the ParseSamlIdpMetadata structure.
type ParseSamlIdpMetadataReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ParseSamlIdpMetadataReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewParseSamlIdpMetadataOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewParseSamlIdpMetadataBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewParseSamlIdpMetadataNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewParseSamlIdpMetadataOK creates a ParseSamlIdpMetadataOK with default headers values
func NewParseSamlIdpMetadataOK() *ParseSamlIdpMetadataOK {
	return &ParseSamlIdpMetadataOK{}
}

/*ParseSamlIdpMetadataOK handles this case with default header values.

Parse result
*/
type ParseSamlIdpMetadataOK struct {
	Payload *models.SamlMetadataParseResult
}

func (o *ParseSamlIdpMetadataOK) Error() string {
	return fmt.Sprintf("[POST /parse_saml_idp_metadata][%d] parseSamlIdpMetadataOK  %+v", 200, o.Payload)
}

func (o *ParseSamlIdpMetadataOK) GetPayload() *models.SamlMetadataParseResult {
	return o.Payload
}

func (o *ParseSamlIdpMetadataOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SamlMetadataParseResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewParseSamlIdpMetadataBadRequest creates a ParseSamlIdpMetadataBadRequest with default headers values
func NewParseSamlIdpMetadataBadRequest() *ParseSamlIdpMetadataBadRequest {
	return &ParseSamlIdpMetadataBadRequest{}
}

/*ParseSamlIdpMetadataBadRequest handles this case with default header values.

Bad Request
*/
type ParseSamlIdpMetadataBadRequest struct {
	Payload *models.Error
}

func (o *ParseSamlIdpMetadataBadRequest) Error() string {
	return fmt.Sprintf("[POST /parse_saml_idp_metadata][%d] parseSamlIdpMetadataBadRequest  %+v", 400, o.Payload)
}

func (o *ParseSamlIdpMetadataBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *ParseSamlIdpMetadataBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewParseSamlIdpMetadataNotFound creates a ParseSamlIdpMetadataNotFound with default headers values
func NewParseSamlIdpMetadataNotFound() *ParseSamlIdpMetadataNotFound {
	return &ParseSamlIdpMetadataNotFound{}
}

/*ParseSamlIdpMetadataNotFound handles this case with default header values.

Not Found
*/
type ParseSamlIdpMetadataNotFound struct {
	Payload *models.Error
}

func (o *ParseSamlIdpMetadataNotFound) Error() string {
	return fmt.Sprintf("[POST /parse_saml_idp_metadata][%d] parseSamlIdpMetadataNotFound  %+v", 404, o.Payload)
}

func (o *ParseSamlIdpMetadataNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *ParseSamlIdpMetadataNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
