// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/chenrui333/go-looker/models"
)

// AllUserLoginLockoutsReader is a Reader for the AllUserLoginLockouts structure.
type AllUserLoginLockoutsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AllUserLoginLockoutsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAllUserLoginLockoutsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAllUserLoginLockoutsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAllUserLoginLockoutsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAllUserLoginLockoutsOK creates a AllUserLoginLockoutsOK with default headers values
func NewAllUserLoginLockoutsOK() *AllUserLoginLockoutsOK {
	return &AllUserLoginLockoutsOK{}
}

/*AllUserLoginLockoutsOK handles this case with default header values.

User Login Lockout
*/
type AllUserLoginLockoutsOK struct {
	Payload []*models.UserLoginLockout
}

func (o *AllUserLoginLockoutsOK) Error() string {
	return fmt.Sprintf("[GET /user_login_lockouts][%d] allUserLoginLockoutsOK  %+v", 200, o.Payload)
}

func (o *AllUserLoginLockoutsOK) GetPayload() []*models.UserLoginLockout {
	return o.Payload
}

func (o *AllUserLoginLockoutsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAllUserLoginLockoutsBadRequest creates a AllUserLoginLockoutsBadRequest with default headers values
func NewAllUserLoginLockoutsBadRequest() *AllUserLoginLockoutsBadRequest {
	return &AllUserLoginLockoutsBadRequest{}
}

/*AllUserLoginLockoutsBadRequest handles this case with default header values.

Bad Request
*/
type AllUserLoginLockoutsBadRequest struct {
	Payload *models.Error
}

func (o *AllUserLoginLockoutsBadRequest) Error() string {
	return fmt.Sprintf("[GET /user_login_lockouts][%d] allUserLoginLockoutsBadRequest  %+v", 400, o.Payload)
}

func (o *AllUserLoginLockoutsBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *AllUserLoginLockoutsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAllUserLoginLockoutsNotFound creates a AllUserLoginLockoutsNotFound with default headers values
func NewAllUserLoginLockoutsNotFound() *AllUserLoginLockoutsNotFound {
	return &AllUserLoginLockoutsNotFound{}
}

/*AllUserLoginLockoutsNotFound handles this case with default header values.

Not Found
*/
type AllUserLoginLockoutsNotFound struct {
	Payload *models.Error
}

func (o *AllUserLoginLockoutsNotFound) Error() string {
	return fmt.Sprintf("[GET /user_login_lockouts][%d] allUserLoginLockoutsNotFound  %+v", 404, o.Payload)
}

func (o *AllUserLoginLockoutsNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *AllUserLoginLockoutsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
