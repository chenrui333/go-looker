// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/chenrui333/go-looker/models"
)

// SessionConfigReader is a Reader for the SessionConfig structure.
type SessionConfigReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SessionConfigReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSessionConfigOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSessionConfigBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSessionConfigNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSessionConfigOK creates a SessionConfigOK with default headers values
func NewSessionConfigOK() *SessionConfigOK {
	return &SessionConfigOK{}
}

/*SessionConfigOK handles this case with default header values.

Session Config
*/
type SessionConfigOK struct {
	Payload *models.SessionConfig
}

func (o *SessionConfigOK) Error() string {
	return fmt.Sprintf("[GET /session_config][%d] sessionConfigOK  %+v", 200, o.Payload)
}

func (o *SessionConfigOK) GetPayload() *models.SessionConfig {
	return o.Payload
}

func (o *SessionConfigOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SessionConfig)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSessionConfigBadRequest creates a SessionConfigBadRequest with default headers values
func NewSessionConfigBadRequest() *SessionConfigBadRequest {
	return &SessionConfigBadRequest{}
}

/*SessionConfigBadRequest handles this case with default header values.

Bad Request
*/
type SessionConfigBadRequest struct {
	Payload *models.Error
}

func (o *SessionConfigBadRequest) Error() string {
	return fmt.Sprintf("[GET /session_config][%d] sessionConfigBadRequest  %+v", 400, o.Payload)
}

func (o *SessionConfigBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *SessionConfigBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSessionConfigNotFound creates a SessionConfigNotFound with default headers values
func NewSessionConfigNotFound() *SessionConfigNotFound {
	return &SessionConfigNotFound{}
}

/*SessionConfigNotFound handles this case with default header values.

Not Found
*/
type SessionConfigNotFound struct {
	Payload *models.Error
}

func (o *SessionConfigNotFound) Error() string {
	return fmt.Sprintf("[GET /session_config][%d] sessionConfigNotFound  %+v", 404, o.Payload)
}

func (o *SessionConfigNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *SessionConfigNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
