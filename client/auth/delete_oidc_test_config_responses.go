// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/chenrui333/go-looker/models"
)

// DeleteOidcTestConfigReader is a Reader for the DeleteOidcTestConfig structure.
type DeleteOidcTestConfigReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteOidcTestConfigReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteOidcTestConfigNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteOidcTestConfigBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteOidcTestConfigNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteOidcTestConfigNoContent creates a DeleteOidcTestConfigNoContent with default headers values
func NewDeleteOidcTestConfigNoContent() *DeleteOidcTestConfigNoContent {
	return &DeleteOidcTestConfigNoContent{}
}

/*DeleteOidcTestConfigNoContent handles this case with default header values.

Test config succssfully deleted.
*/
type DeleteOidcTestConfigNoContent struct {
	Payload string
}

func (o *DeleteOidcTestConfigNoContent) Error() string {
	return fmt.Sprintf("[DELETE /oidc_test_configs/{test_slug}][%d] deleteOidcTestConfigNoContent  %+v", 204, o.Payload)
}

func (o *DeleteOidcTestConfigNoContent) GetPayload() string {
	return o.Payload
}

func (o *DeleteOidcTestConfigNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteOidcTestConfigBadRequest creates a DeleteOidcTestConfigBadRequest with default headers values
func NewDeleteOidcTestConfigBadRequest() *DeleteOidcTestConfigBadRequest {
	return &DeleteOidcTestConfigBadRequest{}
}

/*DeleteOidcTestConfigBadRequest handles this case with default header values.

Bad Request
*/
type DeleteOidcTestConfigBadRequest struct {
	Payload *models.Error
}

func (o *DeleteOidcTestConfigBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /oidc_test_configs/{test_slug}][%d] deleteOidcTestConfigBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteOidcTestConfigBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteOidcTestConfigBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteOidcTestConfigNotFound creates a DeleteOidcTestConfigNotFound with default headers values
func NewDeleteOidcTestConfigNotFound() *DeleteOidcTestConfigNotFound {
	return &DeleteOidcTestConfigNotFound{}
}

/*DeleteOidcTestConfigNotFound handles this case with default header values.

Not Found
*/
type DeleteOidcTestConfigNotFound struct {
	Payload *models.Error
}

func (o *DeleteOidcTestConfigNotFound) Error() string {
	return fmt.Sprintf("[DELETE /oidc_test_configs/{test_slug}][%d] deleteOidcTestConfigNotFound  %+v", 404, o.Payload)
}

func (o *DeleteOidcTestConfigNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteOidcTestConfigNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
