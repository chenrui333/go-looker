// Code generated by go-swagger; DO NOT EDIT.

package theme

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/chenrui333/go-looker/models"
)

// DefaultThemeReader is a Reader for the DefaultTheme structure.
type DefaultThemeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DefaultThemeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDefaultThemeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDefaultThemeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDefaultThemeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDefaultThemeOK creates a DefaultThemeOK with default headers values
func NewDefaultThemeOK() *DefaultThemeOK {
	return &DefaultThemeOK{}
}

/*DefaultThemeOK handles this case with default header values.

Theme
*/
type DefaultThemeOK struct {
	Payload *models.Theme
}

func (o *DefaultThemeOK) Error() string {
	return fmt.Sprintf("[GET /themes/default][%d] defaultThemeOK  %+v", 200, o.Payload)
}

func (o *DefaultThemeOK) GetPayload() *models.Theme {
	return o.Payload
}

func (o *DefaultThemeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Theme)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDefaultThemeBadRequest creates a DefaultThemeBadRequest with default headers values
func NewDefaultThemeBadRequest() *DefaultThemeBadRequest {
	return &DefaultThemeBadRequest{}
}

/*DefaultThemeBadRequest handles this case with default header values.

Bad Request
*/
type DefaultThemeBadRequest struct {
	Payload *models.Error
}

func (o *DefaultThemeBadRequest) Error() string {
	return fmt.Sprintf("[GET /themes/default][%d] defaultThemeBadRequest  %+v", 400, o.Payload)
}

func (o *DefaultThemeBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *DefaultThemeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDefaultThemeNotFound creates a DefaultThemeNotFound with default headers values
func NewDefaultThemeNotFound() *DefaultThemeNotFound {
	return &DefaultThemeNotFound{}
}

/*DefaultThemeNotFound handles this case with default header values.

Not Found
*/
type DefaultThemeNotFound struct {
	Payload *models.Error
}

func (o *DefaultThemeNotFound) Error() string {
	return fmt.Sprintf("[GET /themes/default][%d] defaultThemeNotFound  %+v", 404, o.Payload)
}

func (o *DefaultThemeNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *DefaultThemeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
