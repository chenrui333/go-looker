// Code generated by go-swagger; DO NOT EDIT.

package theme

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/chenrui333/go-looker/models"
)

// ThemeReader is a Reader for the Theme structure.
type ThemeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ThemeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewThemeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewThemeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewThemeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewThemeOK creates a ThemeOK with default headers values
func NewThemeOK() *ThemeOK {
	return &ThemeOK{}
}

/*ThemeOK handles this case with default header values.

Theme
*/
type ThemeOK struct {
	Payload *models.Theme
}

func (o *ThemeOK) Error() string {
	return fmt.Sprintf("[GET /themes/{theme_id}][%d] themeOK  %+v", 200, o.Payload)
}

func (o *ThemeOK) GetPayload() *models.Theme {
	return o.Payload
}

func (o *ThemeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Theme)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewThemeBadRequest creates a ThemeBadRequest with default headers values
func NewThemeBadRequest() *ThemeBadRequest {
	return &ThemeBadRequest{}
}

/*ThemeBadRequest handles this case with default header values.

Bad Request
*/
type ThemeBadRequest struct {
	Payload *models.Error
}

func (o *ThemeBadRequest) Error() string {
	return fmt.Sprintf("[GET /themes/{theme_id}][%d] themeBadRequest  %+v", 400, o.Payload)
}

func (o *ThemeBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *ThemeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewThemeNotFound creates a ThemeNotFound with default headers values
func NewThemeNotFound() *ThemeNotFound {
	return &ThemeNotFound{}
}

/*ThemeNotFound handles this case with default header values.

Not Found
*/
type ThemeNotFound struct {
	Payload *models.Error
}

func (o *ThemeNotFound) Error() string {
	return fmt.Sprintf("[GET /themes/{theme_id}][%d] themeNotFound  %+v", 404, o.Payload)
}

func (o *ThemeNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *ThemeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
