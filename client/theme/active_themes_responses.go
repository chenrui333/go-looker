// Code generated by go-swagger; DO NOT EDIT.

package theme

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/chenrui333/go-looker/models"
)

// ActiveThemesReader is a Reader for the ActiveThemes structure.
type ActiveThemesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ActiveThemesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewActiveThemesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewActiveThemesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewActiveThemesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewActiveThemesOK creates a ActiveThemesOK with default headers values
func NewActiveThemesOK() *ActiveThemesOK {
	return &ActiveThemesOK{}
}

/*ActiveThemesOK handles this case with default header values.

Themes
*/
type ActiveThemesOK struct {
	Payload []*models.Theme
}

func (o *ActiveThemesOK) Error() string {
	return fmt.Sprintf("[GET /themes/active][%d] activeThemesOK  %+v", 200, o.Payload)
}

func (o *ActiveThemesOK) GetPayload() []*models.Theme {
	return o.Payload
}

func (o *ActiveThemesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewActiveThemesBadRequest creates a ActiveThemesBadRequest with default headers values
func NewActiveThemesBadRequest() *ActiveThemesBadRequest {
	return &ActiveThemesBadRequest{}
}

/*ActiveThemesBadRequest handles this case with default header values.

Bad Request
*/
type ActiveThemesBadRequest struct {
	Payload *models.Error
}

func (o *ActiveThemesBadRequest) Error() string {
	return fmt.Sprintf("[GET /themes/active][%d] activeThemesBadRequest  %+v", 400, o.Payload)
}

func (o *ActiveThemesBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *ActiveThemesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewActiveThemesNotFound creates a ActiveThemesNotFound with default headers values
func NewActiveThemesNotFound() *ActiveThemesNotFound {
	return &ActiveThemesNotFound{}
}

/*ActiveThemesNotFound handles this case with default header values.

Not Found
*/
type ActiveThemesNotFound struct {
	Payload *models.Error
}

func (o *ActiveThemesNotFound) Error() string {
	return fmt.Sprintf("[GET /themes/active][%d] activeThemesNotFound  %+v", 404, o.Payload)
}

func (o *ActiveThemesNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *ActiveThemesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
