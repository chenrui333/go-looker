// Code generated by go-swagger; DO NOT EDIT.

package theme

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/chenrui333/go-looker/models"
)

// DeleteThemeReader is a Reader for the DeleteTheme structure.
type DeleteThemeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteThemeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteThemeNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteThemeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteThemeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteThemeNoContent creates a DeleteThemeNoContent with default headers values
func NewDeleteThemeNoContent() *DeleteThemeNoContent {
	return &DeleteThemeNoContent{}
}

/*DeleteThemeNoContent handles this case with default header values.

Successfully deleted.
*/
type DeleteThemeNoContent struct {
	Payload string
}

func (o *DeleteThemeNoContent) Error() string {
	return fmt.Sprintf("[DELETE /themes/{theme_id}][%d] deleteThemeNoContent  %+v", 204, o.Payload)
}

func (o *DeleteThemeNoContent) GetPayload() string {
	return o.Payload
}

func (o *DeleteThemeNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteThemeBadRequest creates a DeleteThemeBadRequest with default headers values
func NewDeleteThemeBadRequest() *DeleteThemeBadRequest {
	return &DeleteThemeBadRequest{}
}

/*DeleteThemeBadRequest handles this case with default header values.

Bad Request
*/
type DeleteThemeBadRequest struct {
	Payload *models.Error
}

func (o *DeleteThemeBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /themes/{theme_id}][%d] deleteThemeBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteThemeBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteThemeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteThemeNotFound creates a DeleteThemeNotFound with default headers values
func NewDeleteThemeNotFound() *DeleteThemeNotFound {
	return &DeleteThemeNotFound{}
}

/*DeleteThemeNotFound handles this case with default header values.

Not Found
*/
type DeleteThemeNotFound struct {
	Payload *models.Error
}

func (o *DeleteThemeNotFound) Error() string {
	return fmt.Sprintf("[DELETE /themes/{theme_id}][%d] deleteThemeNotFound  %+v", 404, o.Payload)
}

func (o *DeleteThemeNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteThemeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
