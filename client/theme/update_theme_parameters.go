// Code generated by go-swagger; DO NOT EDIT.

package theme

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/chenrui333/go-looker/models"
)

// NewUpdateThemeParams creates a new UpdateThemeParams object
// with the default values initialized.
func NewUpdateThemeParams() *UpdateThemeParams {
	var ()
	return &UpdateThemeParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateThemeParamsWithTimeout creates a new UpdateThemeParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateThemeParamsWithTimeout(timeout time.Duration) *UpdateThemeParams {
	var ()
	return &UpdateThemeParams{

		timeout: timeout,
	}
}

// NewUpdateThemeParamsWithContext creates a new UpdateThemeParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateThemeParamsWithContext(ctx context.Context) *UpdateThemeParams {
	var ()
	return &UpdateThemeParams{

		Context: ctx,
	}
}

// NewUpdateThemeParamsWithHTTPClient creates a new UpdateThemeParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateThemeParamsWithHTTPClient(client *http.Client) *UpdateThemeParams {
	var ()
	return &UpdateThemeParams{
		HTTPClient: client,
	}
}

/*UpdateThemeParams contains all the parameters to send to the API endpoint
for the update theme operation typically these are written to a http.Request
*/
type UpdateThemeParams struct {

	/*Body
	  Theme

	*/
	Body *models.Theme
	/*ThemeID
	  Id of theme

	*/
	ThemeID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update theme params
func (o *UpdateThemeParams) WithTimeout(timeout time.Duration) *UpdateThemeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update theme params
func (o *UpdateThemeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update theme params
func (o *UpdateThemeParams) WithContext(ctx context.Context) *UpdateThemeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update theme params
func (o *UpdateThemeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update theme params
func (o *UpdateThemeParams) WithHTTPClient(client *http.Client) *UpdateThemeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update theme params
func (o *UpdateThemeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the update theme params
func (o *UpdateThemeParams) WithBody(body *models.Theme) *UpdateThemeParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the update theme params
func (o *UpdateThemeParams) SetBody(body *models.Theme) {
	o.Body = body
}

// WithThemeID adds the themeID to the update theme params
func (o *UpdateThemeParams) WithThemeID(themeID string) *UpdateThemeParams {
	o.SetThemeID(themeID)
	return o
}

// SetThemeID adds the themeId to the update theme params
func (o *UpdateThemeParams) SetThemeID(themeID string) {
	o.ThemeID = themeID
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateThemeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param theme_id
	if err := r.SetPathParam("theme_id", o.ThemeID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
