// Code generated by go-swagger; DO NOT EDIT.

package theme

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewSearchThemesParams creates a new SearchThemesParams object
// with the default values initialized.
func NewSearchThemesParams() *SearchThemesParams {
	var ()
	return &SearchThemesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSearchThemesParamsWithTimeout creates a new SearchThemesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSearchThemesParamsWithTimeout(timeout time.Duration) *SearchThemesParams {
	var ()
	return &SearchThemesParams{

		timeout: timeout,
	}
}

// NewSearchThemesParamsWithContext creates a new SearchThemesParams object
// with the default values initialized, and the ability to set a context for a request
func NewSearchThemesParamsWithContext(ctx context.Context) *SearchThemesParams {
	var ()
	return &SearchThemesParams{

		Context: ctx,
	}
}

// NewSearchThemesParamsWithHTTPClient creates a new SearchThemesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSearchThemesParamsWithHTTPClient(client *http.Client) *SearchThemesParams {
	var ()
	return &SearchThemesParams{
		HTTPClient: client,
	}
}

/*SearchThemesParams contains all the parameters to send to the API endpoint
for the search themes operation typically these are written to a http.Request
*/
type SearchThemesParams struct {

	/*BeginAt
	  Timestamp for activation.

	*/
	BeginAt *strfmt.DateTime
	/*EndAt
	  Timestamp for expiration.

	*/
	EndAt *strfmt.DateTime
	/*Fields
	  Requested fields.

	*/
	Fields *string
	/*FilterOr
	  Combine given search criteria in a boolean OR expression

	*/
	FilterOr *bool
	/*ID
	  Match theme id.

	*/
	ID *int64
	/*Limit
	  Number of results to return (used with `offset`).

	*/
	Limit *int64
	/*Name
	  Match theme name.

	*/
	Name *string
	/*Offset
	  Number of results to skip before returning any (used with `limit`).

	*/
	Offset *int64
	/*Sorts
	  Fields to sort by.

	*/
	Sorts *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the search themes params
func (o *SearchThemesParams) WithTimeout(timeout time.Duration) *SearchThemesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the search themes params
func (o *SearchThemesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the search themes params
func (o *SearchThemesParams) WithContext(ctx context.Context) *SearchThemesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the search themes params
func (o *SearchThemesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the search themes params
func (o *SearchThemesParams) WithHTTPClient(client *http.Client) *SearchThemesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the search themes params
func (o *SearchThemesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBeginAt adds the beginAt to the search themes params
func (o *SearchThemesParams) WithBeginAt(beginAt *strfmt.DateTime) *SearchThemesParams {
	o.SetBeginAt(beginAt)
	return o
}

// SetBeginAt adds the beginAt to the search themes params
func (o *SearchThemesParams) SetBeginAt(beginAt *strfmt.DateTime) {
	o.BeginAt = beginAt
}

// WithEndAt adds the endAt to the search themes params
func (o *SearchThemesParams) WithEndAt(endAt *strfmt.DateTime) *SearchThemesParams {
	o.SetEndAt(endAt)
	return o
}

// SetEndAt adds the endAt to the search themes params
func (o *SearchThemesParams) SetEndAt(endAt *strfmt.DateTime) {
	o.EndAt = endAt
}

// WithFields adds the fields to the search themes params
func (o *SearchThemesParams) WithFields(fields *string) *SearchThemesParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the search themes params
func (o *SearchThemesParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithFilterOr adds the filterOr to the search themes params
func (o *SearchThemesParams) WithFilterOr(filterOr *bool) *SearchThemesParams {
	o.SetFilterOr(filterOr)
	return o
}

// SetFilterOr adds the filterOr to the search themes params
func (o *SearchThemesParams) SetFilterOr(filterOr *bool) {
	o.FilterOr = filterOr
}

// WithID adds the id to the search themes params
func (o *SearchThemesParams) WithID(id *int64) *SearchThemesParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the search themes params
func (o *SearchThemesParams) SetID(id *int64) {
	o.ID = id
}

// WithLimit adds the limit to the search themes params
func (o *SearchThemesParams) WithLimit(limit *int64) *SearchThemesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the search themes params
func (o *SearchThemesParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithName adds the name to the search themes params
func (o *SearchThemesParams) WithName(name *string) *SearchThemesParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the search themes params
func (o *SearchThemesParams) SetName(name *string) {
	o.Name = name
}

// WithOffset adds the offset to the search themes params
func (o *SearchThemesParams) WithOffset(offset *int64) *SearchThemesParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the search themes params
func (o *SearchThemesParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithSorts adds the sorts to the search themes params
func (o *SearchThemesParams) WithSorts(sorts *string) *SearchThemesParams {
	o.SetSorts(sorts)
	return o
}

// SetSorts adds the sorts to the search themes params
func (o *SearchThemesParams) SetSorts(sorts *string) {
	o.Sorts = sorts
}

// WriteToRequest writes these params to a swagger request
func (o *SearchThemesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.BeginAt != nil {

		// query param begin_at
		var qrBeginAt strfmt.DateTime
		if o.BeginAt != nil {
			qrBeginAt = *o.BeginAt
		}
		qBeginAt := qrBeginAt.String()
		if qBeginAt != "" {
			if err := r.SetQueryParam("begin_at", qBeginAt); err != nil {
				return err
			}
		}

	}

	if o.EndAt != nil {

		// query param end_at
		var qrEndAt strfmt.DateTime
		if o.EndAt != nil {
			qrEndAt = *o.EndAt
		}
		qEndAt := qrEndAt.String()
		if qEndAt != "" {
			if err := r.SetQueryParam("end_at", qEndAt); err != nil {
				return err
			}
		}

	}

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	if o.FilterOr != nil {

		// query param filter_or
		var qrFilterOr bool
		if o.FilterOr != nil {
			qrFilterOr = *o.FilterOr
		}
		qFilterOr := swag.FormatBool(qrFilterOr)
		if qFilterOr != "" {
			if err := r.SetQueryParam("filter_or", qFilterOr); err != nil {
				return err
			}
		}

	}

	if o.ID != nil {

		// query param id
		var qrID int64
		if o.ID != nil {
			qrID = *o.ID
		}
		qID := swag.FormatInt64(qrID)
		if qID != "" {
			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.Sorts != nil {

		// query param sorts
		var qrSorts string
		if o.Sorts != nil {
			qrSorts = *o.Sorts
		}
		qSorts := qrSorts
		if qSorts != "" {
			if err := r.SetQueryParam("sorts", qSorts); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
