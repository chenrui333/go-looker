// Code generated by go-swagger; DO NOT EDIT.

package theme

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new theme API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for theme API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ActiveThemes gets active themes

### Get active themes

Returns an array of active themes.

If the `name` parameter is specified, it will return an array with one theme if it's active and found.

The optional `ts` parameter can specify a different timestamp than "now."

**Note**: Custom themes needs to be enabled by Looker. Unless custom themes are enabled, only the automatically generated default theme can be used. Please contact your Account Manager or support@looker.com to update your license for this feature.



*/
func (a *Client) ActiveThemes(params *ActiveThemesParams) (*ActiveThemesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActiveThemesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "active_themes",
		Method:             "GET",
		PathPattern:        "/themes/active",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ActiveThemesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActiveThemesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for active_themes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AllThemes gets all themes

### Get an array of all existing themes

Get a **single theme** by id with [Theme](#!/Theme/theme)

This method returns an array of all existing themes. The active time for the theme is not considered.

**Note**: Custom themes needs to be enabled by Looker. Unless custom themes are enabled, only the automatically generated default theme can be used. Please contact your Account Manager or support@looker.com to update your license for this feature.


*/
func (a *Client) AllThemes(params *AllThemesParams) (*AllThemesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAllThemesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "all_themes",
		Method:             "GET",
		PathPattern:        "/themes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AllThemesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AllThemesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for all_themes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateTheme creates theme

### Create a theme

Creates a new theme object, returning the theme details, including the created id.

If `settings` are not specified, the default theme settings will be copied into the new theme.

The theme `name` can only contain alphanumeric characters or underscores. Theme names should not contain any confidential information, such as customer names.

**Update** an existing theme with [Update Theme](#!/Theme/update_theme)

**Permanently delete** an existing theme with [Delete Theme](#!/Theme/delete_theme)

For more information, see [Creating and Applying Themes](https://looker.com/docs/r/admin/themes).

**Note**: Custom themes needs to be enabled by Looker. Unless custom themes are enabled, only the automatically generated default theme can be used. Please contact your Account Manager or support@looker.com to update your license for this feature.


*/
func (a *Client) CreateTheme(params *CreateThemeParams) (*CreateThemeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateThemeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "create_theme",
		Method:             "POST",
		PathPattern:        "/themes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateThemeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateThemeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_theme: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DefaultTheme gets default theme

### Get the default theme

Returns the active theme object set as the default.

The **default** theme name can be set in the UI on the Admin|Theme UI page

The optional `ts` parameter can specify a different timestamp than "now." If specified, it returns the default theme at the time indicated.

*/
func (a *Client) DefaultTheme(params *DefaultThemeParams) (*DefaultThemeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDefaultThemeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "default_theme",
		Method:             "GET",
		PathPattern:        "/themes/default",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DefaultThemeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DefaultThemeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for default_theme: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteTheme deletes theme

### Delete a specific theme by id

This operation permanently deletes the identified theme from the database.

Because multiple themes can have the same name (with different activation time spans) themes can only be deleted by ID.

All IDs associated with a theme name can be retrieved by searching for the theme name with [Theme Search](#!/Theme/search).

**Note**: Custom themes needs to be enabled by Looker. Unless custom themes are enabled, only the automatically generated default theme can be used. Please contact your Account Manager or support@looker.com to update your license for this feature.


*/
func (a *Client) DeleteTheme(params *DeleteThemeParams) (*DeleteThemeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteThemeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete_theme",
		Method:             "DELETE",
		PathPattern:        "/themes/{theme_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteThemeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteThemeNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_theme: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchThemes searches themes

### Search all themes for matching criteria.

Returns an **array of theme objects** that match the specified search criteria.

| Search Parameters | Description
| :-------------------: | :------ |
| `begin_at` only | Find themes active at or after `begin_at`
| `end_at` only | Find themes active at or before `end_at`
| both set | Find themes with an active inclusive period between `begin_at` and `end_at`

Note: Range matching requires boolean AND logic.
When using `begin_at` and `end_at` together, do not use `filter_or`=TRUE

If multiple search params are given and `filter_or` is FALSE or not specified,
search params are combined in a logical AND operation.
Only rows that match *all* search param criteria will be returned.

If `filter_or` is TRUE, multiple search params are combined in a logical OR operation.
Results will include rows that match **any** of the search criteria.

String search params use case-insensitive matching.
String search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.
example="dan%" will match "danger" and "Danzig" but not "David"
example="D_m%" will match "Damage" and "dump"

Integer search params can accept a single value or a comma separated list of values. The multiple
values will be combined under a logical OR operation - results will match at least one of
the given values.

Most search params can accept "IS NULL" and "NOT NULL" as special expressions to match
or exclude (respectively) rows where the column is null.

Boolean search params accept only "true" and "false" as values.


Get a **single theme** by id with [Theme](#!/Theme/theme)

**Note**: Custom themes needs to be enabled by Looker. Unless custom themes are enabled, only the automatically generated default theme can be used. Please contact your Account Manager or support@looker.com to update your license for this feature.


*/
func (a *Client) SearchThemes(params *SearchThemesParams) (*SearchThemesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchThemesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "search_themes",
		Method:             "GET",
		PathPattern:        "/themes/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchThemesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchThemesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for search_themes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SetDefaultTheme sets default theme

### Set the global default theme by theme name

Only Admin users can call this function.

Only an active theme with no expiration (`end_at` not set) can be assigned as the default theme. As long as a theme has an active record with no expiration, it can be set as the default.

[Create Theme](#!/Theme/create) has detailed information on rules for default and active themes

Returns the new specified default theme object.

**Note**: Custom themes needs to be enabled by Looker. Unless custom themes are enabled, only the automatically generated default theme can be used. Please contact your Account Manager or support@looker.com to update your license for this feature.


*/
func (a *Client) SetDefaultTheme(params *SetDefaultThemeParams) (*SetDefaultThemeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetDefaultThemeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set_default_theme",
		Method:             "PUT",
		PathPattern:        "/themes/default",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetDefaultThemeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetDefaultThemeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for set_default_theme: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
Theme gets theme

### Get a theme by ID

Use this to retrieve a specific theme, whether or not it's currently active.

**Note**: Custom themes needs to be enabled by Looker. Unless custom themes are enabled, only the automatically generated default theme can be used. Please contact your Account Manager or support@looker.com to update your license for this feature.


*/
func (a *Client) Theme(params *ThemeParams) (*ThemeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThemeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "theme",
		Method:             "GET",
		PathPattern:        "/themes/{theme_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ThemeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThemeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for theme: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ThemeOrDefault gets theme or default

### Get the named theme if it's active. Otherwise, return the default theme

The optional `ts` parameter can specify a different timestamp than "now."
Note: API users with `show` ability can call this function

**Note**: Custom themes needs to be enabled by Looker. Unless custom themes are enabled, only the automatically generated default theme can be used. Please contact your Account Manager or support@looker.com to update your license for this feature.


*/
func (a *Client) ThemeOrDefault(params *ThemeOrDefaultParams) (*ThemeOrDefaultOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThemeOrDefaultParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "theme_or_default",
		Method:             "GET",
		PathPattern:        "/themes/theme_or_default",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ThemeOrDefaultReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThemeOrDefaultOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for theme_or_default: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateTheme updates theme

### Update the theme by id.

**Note**: Custom themes needs to be enabled by Looker. Unless custom themes are enabled, only the automatically generated default theme can be used. Please contact your Account Manager or support@looker.com to update your license for this feature.


*/
func (a *Client) UpdateTheme(params *UpdateThemeParams) (*UpdateThemeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateThemeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "update_theme",
		Method:             "PATCH",
		PathPattern:        "/themes/{theme_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateThemeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateThemeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_theme: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ValidateTheme validates theme

### Validate a theme with the specified information

Validates all values set for the theme, returning any errors encountered, or 200 OK if valid

See [Create Theme](#!/Theme/create_theme) for constraints

**Note**: Custom themes needs to be enabled by Looker. Unless custom themes are enabled, only the automatically generated default theme can be used. Please contact your Account Manager or support@looker.com to update your license for this feature.


*/
func (a *Client) ValidateTheme(params *ValidateThemeParams) (*ValidateThemeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateThemeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "validate_theme",
		Method:             "POST",
		PathPattern:        "/themes/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateThemeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateThemeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validate_theme: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
