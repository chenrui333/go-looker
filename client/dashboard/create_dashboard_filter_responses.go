// Code generated by go-swagger; DO NOT EDIT.

package dashboard

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/chenrui333/go-looker/models"
)

// CreateDashboardFilterReader is a Reader for the CreateDashboardFilter structure.
type CreateDashboardFilterReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateDashboardFilterReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewCreateDashboardFilterOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewCreateDashboardFilterBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewCreateDashboardFilterNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewCreateDashboardFilterConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 422:
		result := NewCreateDashboardFilterUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCreateDashboardFilterOK creates a CreateDashboardFilterOK with default headers values
func NewCreateDashboardFilterOK() *CreateDashboardFilterOK {
	return &CreateDashboardFilterOK{}
}

/*CreateDashboardFilterOK handles this case with default header values.

Dashboard Filter
*/
type CreateDashboardFilterOK struct {
	Payload *models.DashboardFilter
}

func (o *CreateDashboardFilterOK) Error() string {
	return fmt.Sprintf("[POST /dashboard_filters][%d] createDashboardFilterOK  %+v", 200, o.Payload)
}

func (o *CreateDashboardFilterOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DashboardFilter)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateDashboardFilterBadRequest creates a CreateDashboardFilterBadRequest with default headers values
func NewCreateDashboardFilterBadRequest() *CreateDashboardFilterBadRequest {
	return &CreateDashboardFilterBadRequest{}
}

/*CreateDashboardFilterBadRequest handles this case with default header values.

Bad Request
*/
type CreateDashboardFilterBadRequest struct {
	Payload *models.Error
}

func (o *CreateDashboardFilterBadRequest) Error() string {
	return fmt.Sprintf("[POST /dashboard_filters][%d] createDashboardFilterBadRequest  %+v", 400, o.Payload)
}

func (o *CreateDashboardFilterBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateDashboardFilterNotFound creates a CreateDashboardFilterNotFound with default headers values
func NewCreateDashboardFilterNotFound() *CreateDashboardFilterNotFound {
	return &CreateDashboardFilterNotFound{}
}

/*CreateDashboardFilterNotFound handles this case with default header values.

Not Found
*/
type CreateDashboardFilterNotFound struct {
	Payload *models.Error
}

func (o *CreateDashboardFilterNotFound) Error() string {
	return fmt.Sprintf("[POST /dashboard_filters][%d] createDashboardFilterNotFound  %+v", 404, o.Payload)
}

func (o *CreateDashboardFilterNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateDashboardFilterConflict creates a CreateDashboardFilterConflict with default headers values
func NewCreateDashboardFilterConflict() *CreateDashboardFilterConflict {
	return &CreateDashboardFilterConflict{}
}

/*CreateDashboardFilterConflict handles this case with default header values.

Resource Already Exists
*/
type CreateDashboardFilterConflict struct {
	Payload *models.Error
}

func (o *CreateDashboardFilterConflict) Error() string {
	return fmt.Sprintf("[POST /dashboard_filters][%d] createDashboardFilterConflict  %+v", 409, o.Payload)
}

func (o *CreateDashboardFilterConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateDashboardFilterUnprocessableEntity creates a CreateDashboardFilterUnprocessableEntity with default headers values
func NewCreateDashboardFilterUnprocessableEntity() *CreateDashboardFilterUnprocessableEntity {
	return &CreateDashboardFilterUnprocessableEntity{}
}

/*CreateDashboardFilterUnprocessableEntity handles this case with default header values.

Validation Error
*/
type CreateDashboardFilterUnprocessableEntity struct {
	Payload *models.ValidationError
}

func (o *CreateDashboardFilterUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /dashboard_filters][%d] createDashboardFilterUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *CreateDashboardFilterUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ValidationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
