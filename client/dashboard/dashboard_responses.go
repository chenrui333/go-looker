// Code generated by go-swagger; DO NOT EDIT.

package dashboard

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/chenrui333/go-looker/models"
)

// DashboardReader is a Reader for the Dashboard structure.
type DashboardReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DashboardReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewDashboardOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewDashboardBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDashboardNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDashboardOK creates a DashboardOK with default headers values
func NewDashboardOK() *DashboardOK {
	return &DashboardOK{}
}

/*DashboardOK handles this case with default header values.

Dashboard
*/
type DashboardOK struct {
	Payload *models.Dashboard
}

func (o *DashboardOK) Error() string {
	return fmt.Sprintf("[GET /dashboards/{dashboard_id}][%d] dashboardOK  %+v", 200, o.Payload)
}

func (o *DashboardOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Dashboard)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDashboardBadRequest creates a DashboardBadRequest with default headers values
func NewDashboardBadRequest() *DashboardBadRequest {
	return &DashboardBadRequest{}
}

/*DashboardBadRequest handles this case with default header values.

Bad Request
*/
type DashboardBadRequest struct {
	Payload *models.Error
}

func (o *DashboardBadRequest) Error() string {
	return fmt.Sprintf("[GET /dashboards/{dashboard_id}][%d] dashboardBadRequest  %+v", 400, o.Payload)
}

func (o *DashboardBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDashboardNotFound creates a DashboardNotFound with default headers values
func NewDashboardNotFound() *DashboardNotFound {
	return &DashboardNotFound{}
}

/*DashboardNotFound handles this case with default header values.

Not Found
*/
type DashboardNotFound struct {
	Payload *models.Error
}

func (o *DashboardNotFound) Error() string {
	return fmt.Sprintf("[GET /dashboards/{dashboard_id}][%d] dashboardNotFound  %+v", 404, o.Payload)
}

func (o *DashboardNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
