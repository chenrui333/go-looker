// Code generated by go-swagger; DO NOT EDIT.

package dashboard

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/chenrui333/go-looker/models"
)

// NewSyncLookmlDashboardParams creates a new SyncLookmlDashboardParams object
// with the default values initialized.
func NewSyncLookmlDashboardParams() *SyncLookmlDashboardParams {
	var ()
	return &SyncLookmlDashboardParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSyncLookmlDashboardParamsWithTimeout creates a new SyncLookmlDashboardParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSyncLookmlDashboardParamsWithTimeout(timeout time.Duration) *SyncLookmlDashboardParams {
	var ()
	return &SyncLookmlDashboardParams{

		timeout: timeout,
	}
}

// NewSyncLookmlDashboardParamsWithContext creates a new SyncLookmlDashboardParams object
// with the default values initialized, and the ability to set a context for a request
func NewSyncLookmlDashboardParamsWithContext(ctx context.Context) *SyncLookmlDashboardParams {
	var ()
	return &SyncLookmlDashboardParams{

		Context: ctx,
	}
}

// NewSyncLookmlDashboardParamsWithHTTPClient creates a new SyncLookmlDashboardParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSyncLookmlDashboardParamsWithHTTPClient(client *http.Client) *SyncLookmlDashboardParams {
	var ()
	return &SyncLookmlDashboardParams{
		HTTPClient: client,
	}
}

/*SyncLookmlDashboardParams contains all the parameters to send to the API endpoint
for the sync lookml dashboard operation typically these are written to a http.Request
*/
type SyncLookmlDashboardParams struct {

	/*Body
	  Dashboard

	*/
	Body *models.Dashboard
	/*LookmlDashboardID
	  Id of LookML dashboard, in the form 'model::dashboardname'

	*/
	LookmlDashboardID string
	/*RawLocale
	  If true, and this dashboard is localized, export it with the raw keys, not localized.

	*/
	RawLocale *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the sync lookml dashboard params
func (o *SyncLookmlDashboardParams) WithTimeout(timeout time.Duration) *SyncLookmlDashboardParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the sync lookml dashboard params
func (o *SyncLookmlDashboardParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the sync lookml dashboard params
func (o *SyncLookmlDashboardParams) WithContext(ctx context.Context) *SyncLookmlDashboardParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the sync lookml dashboard params
func (o *SyncLookmlDashboardParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the sync lookml dashboard params
func (o *SyncLookmlDashboardParams) WithHTTPClient(client *http.Client) *SyncLookmlDashboardParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the sync lookml dashboard params
func (o *SyncLookmlDashboardParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the sync lookml dashboard params
func (o *SyncLookmlDashboardParams) WithBody(body *models.Dashboard) *SyncLookmlDashboardParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the sync lookml dashboard params
func (o *SyncLookmlDashboardParams) SetBody(body *models.Dashboard) {
	o.Body = body
}

// WithLookmlDashboardID adds the lookmlDashboardID to the sync lookml dashboard params
func (o *SyncLookmlDashboardParams) WithLookmlDashboardID(lookmlDashboardID string) *SyncLookmlDashboardParams {
	o.SetLookmlDashboardID(lookmlDashboardID)
	return o
}

// SetLookmlDashboardID adds the lookmlDashboardId to the sync lookml dashboard params
func (o *SyncLookmlDashboardParams) SetLookmlDashboardID(lookmlDashboardID string) {
	o.LookmlDashboardID = lookmlDashboardID
}

// WithRawLocale adds the rawLocale to the sync lookml dashboard params
func (o *SyncLookmlDashboardParams) WithRawLocale(rawLocale *bool) *SyncLookmlDashboardParams {
	o.SetRawLocale(rawLocale)
	return o
}

// SetRawLocale adds the rawLocale to the sync lookml dashboard params
func (o *SyncLookmlDashboardParams) SetRawLocale(rawLocale *bool) {
	o.RawLocale = rawLocale
}

// WriteToRequest writes these params to a swagger request
func (o *SyncLookmlDashboardParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param lookml_dashboard_id
	if err := r.SetPathParam("lookml_dashboard_id", o.LookmlDashboardID); err != nil {
		return err
	}

	if o.RawLocale != nil {

		// query param raw_locale
		var qrRawLocale bool
		if o.RawLocale != nil {
			qrRawLocale = *o.RawLocale
		}
		qRawLocale := swag.FormatBool(qrRawLocale)
		if qRawLocale != "" {
			if err := r.SetQueryParam("raw_locale", qRawLocale); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
