// Code generated by go-swagger; DO NOT EDIT.

package dashboard

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewSearchDashboardElementsParams creates a new SearchDashboardElementsParams object
// with the default values initialized.
func NewSearchDashboardElementsParams() *SearchDashboardElementsParams {
	var ()
	return &SearchDashboardElementsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSearchDashboardElementsParamsWithTimeout creates a new SearchDashboardElementsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSearchDashboardElementsParamsWithTimeout(timeout time.Duration) *SearchDashboardElementsParams {
	var ()
	return &SearchDashboardElementsParams{

		timeout: timeout,
	}
}

// NewSearchDashboardElementsParamsWithContext creates a new SearchDashboardElementsParams object
// with the default values initialized, and the ability to set a context for a request
func NewSearchDashboardElementsParamsWithContext(ctx context.Context) *SearchDashboardElementsParams {
	var ()
	return &SearchDashboardElementsParams{

		Context: ctx,
	}
}

// NewSearchDashboardElementsParamsWithHTTPClient creates a new SearchDashboardElementsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSearchDashboardElementsParamsWithHTTPClient(client *http.Client) *SearchDashboardElementsParams {
	var ()
	return &SearchDashboardElementsParams{
		HTTPClient: client,
	}
}

/*SearchDashboardElementsParams contains all the parameters to send to the API endpoint
for the search dashboard elements operation typically these are written to a http.Request
*/
type SearchDashboardElementsParams struct {

	/*DashboardID
	  Select elements that refer to a given dashboard id

	*/
	DashboardID *int64
	/*Deleted
	  Select soft-deleted dashboard elements

	*/
	Deleted *bool
	/*Fields
	  Requested fields.

	*/
	Fields *string
	/*FilterOr
	  Combine given search criteria in a boolean OR expression

	*/
	FilterOr *bool
	/*LookID
	  Select elements that refer to a given look id

	*/
	LookID *int64
	/*Sorts
	  Fields to sort by. Sortable fields: [:look_id, :dashboard_id, :deleted, :title]

	*/
	Sorts *string
	/*Title
	  Match the title of element

	*/
	Title *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the search dashboard elements params
func (o *SearchDashboardElementsParams) WithTimeout(timeout time.Duration) *SearchDashboardElementsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the search dashboard elements params
func (o *SearchDashboardElementsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the search dashboard elements params
func (o *SearchDashboardElementsParams) WithContext(ctx context.Context) *SearchDashboardElementsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the search dashboard elements params
func (o *SearchDashboardElementsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the search dashboard elements params
func (o *SearchDashboardElementsParams) WithHTTPClient(client *http.Client) *SearchDashboardElementsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the search dashboard elements params
func (o *SearchDashboardElementsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDashboardID adds the dashboardID to the search dashboard elements params
func (o *SearchDashboardElementsParams) WithDashboardID(dashboardID *int64) *SearchDashboardElementsParams {
	o.SetDashboardID(dashboardID)
	return o
}

// SetDashboardID adds the dashboardId to the search dashboard elements params
func (o *SearchDashboardElementsParams) SetDashboardID(dashboardID *int64) {
	o.DashboardID = dashboardID
}

// WithDeleted adds the deleted to the search dashboard elements params
func (o *SearchDashboardElementsParams) WithDeleted(deleted *bool) *SearchDashboardElementsParams {
	o.SetDeleted(deleted)
	return o
}

// SetDeleted adds the deleted to the search dashboard elements params
func (o *SearchDashboardElementsParams) SetDeleted(deleted *bool) {
	o.Deleted = deleted
}

// WithFields adds the fields to the search dashboard elements params
func (o *SearchDashboardElementsParams) WithFields(fields *string) *SearchDashboardElementsParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the search dashboard elements params
func (o *SearchDashboardElementsParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithFilterOr adds the filterOr to the search dashboard elements params
func (o *SearchDashboardElementsParams) WithFilterOr(filterOr *bool) *SearchDashboardElementsParams {
	o.SetFilterOr(filterOr)
	return o
}

// SetFilterOr adds the filterOr to the search dashboard elements params
func (o *SearchDashboardElementsParams) SetFilterOr(filterOr *bool) {
	o.FilterOr = filterOr
}

// WithLookID adds the lookID to the search dashboard elements params
func (o *SearchDashboardElementsParams) WithLookID(lookID *int64) *SearchDashboardElementsParams {
	o.SetLookID(lookID)
	return o
}

// SetLookID adds the lookId to the search dashboard elements params
func (o *SearchDashboardElementsParams) SetLookID(lookID *int64) {
	o.LookID = lookID
}

// WithSorts adds the sorts to the search dashboard elements params
func (o *SearchDashboardElementsParams) WithSorts(sorts *string) *SearchDashboardElementsParams {
	o.SetSorts(sorts)
	return o
}

// SetSorts adds the sorts to the search dashboard elements params
func (o *SearchDashboardElementsParams) SetSorts(sorts *string) {
	o.Sorts = sorts
}

// WithTitle adds the title to the search dashboard elements params
func (o *SearchDashboardElementsParams) WithTitle(title *string) *SearchDashboardElementsParams {
	o.SetTitle(title)
	return o
}

// SetTitle adds the title to the search dashboard elements params
func (o *SearchDashboardElementsParams) SetTitle(title *string) {
	o.Title = title
}

// WriteToRequest writes these params to a swagger request
func (o *SearchDashboardElementsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DashboardID != nil {

		// query param dashboard_id
		var qrDashboardID int64
		if o.DashboardID != nil {
			qrDashboardID = *o.DashboardID
		}
		qDashboardID := swag.FormatInt64(qrDashboardID)
		if qDashboardID != "" {
			if err := r.SetQueryParam("dashboard_id", qDashboardID); err != nil {
				return err
			}
		}

	}

	if o.Deleted != nil {

		// query param deleted
		var qrDeleted bool
		if o.Deleted != nil {
			qrDeleted = *o.Deleted
		}
		qDeleted := swag.FormatBool(qrDeleted)
		if qDeleted != "" {
			if err := r.SetQueryParam("deleted", qDeleted); err != nil {
				return err
			}
		}

	}

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	if o.FilterOr != nil {

		// query param filter_or
		var qrFilterOr bool
		if o.FilterOr != nil {
			qrFilterOr = *o.FilterOr
		}
		qFilterOr := swag.FormatBool(qrFilterOr)
		if qFilterOr != "" {
			if err := r.SetQueryParam("filter_or", qFilterOr); err != nil {
				return err
			}
		}

	}

	if o.LookID != nil {

		// query param look_id
		var qrLookID int64
		if o.LookID != nil {
			qrLookID = *o.LookID
		}
		qLookID := swag.FormatInt64(qrLookID)
		if qLookID != "" {
			if err := r.SetQueryParam("look_id", qLookID); err != nil {
				return err
			}
		}

	}

	if o.Sorts != nil {

		// query param sorts
		var qrSorts string
		if o.Sorts != nil {
			qrSorts = *o.Sorts
		}
		qSorts := qrSorts
		if qSorts != "" {
			if err := r.SetQueryParam("sorts", qSorts); err != nil {
				return err
			}
		}

	}

	if o.Title != nil {

		// query param title
		var qrTitle string
		if o.Title != nil {
			qrTitle = *o.Title
		}
		qTitle := qrTitle
		if qTitle != "" {
			if err := r.SetQueryParam("title", qTitle); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
