// Code generated by go-swagger; DO NOT EDIT.

package dashboard

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewSearchDashboardsParams creates a new SearchDashboardsParams object
// with the default values initialized.
func NewSearchDashboardsParams() *SearchDashboardsParams {
	var ()
	return &SearchDashboardsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSearchDashboardsParamsWithTimeout creates a new SearchDashboardsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSearchDashboardsParamsWithTimeout(timeout time.Duration) *SearchDashboardsParams {
	var ()
	return &SearchDashboardsParams{

		timeout: timeout,
	}
}

// NewSearchDashboardsParamsWithContext creates a new SearchDashboardsParams object
// with the default values initialized, and the ability to set a context for a request
func NewSearchDashboardsParamsWithContext(ctx context.Context) *SearchDashboardsParams {
	var ()
	return &SearchDashboardsParams{

		Context: ctx,
	}
}

// NewSearchDashboardsParamsWithHTTPClient creates a new SearchDashboardsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSearchDashboardsParamsWithHTTPClient(client *http.Client) *SearchDashboardsParams {
	var ()
	return &SearchDashboardsParams{
		HTTPClient: client,
	}
}

/*SearchDashboardsParams contains all the parameters to send to the API endpoint
for the search dashboards operation typically these are written to a http.Request
*/
type SearchDashboardsParams struct {

	/*ContentFavoriteID
	  Filter on a content favorite id.

	*/
	ContentFavoriteID *int64
	/*ContentMetadataID
	  Filter on a content favorite id.

	*/
	ContentMetadataID *int64
	/*Curate
	  Exclude items that exist only in personal spaces other than the users

	*/
	Curate *bool
	/*Deleted
	  Filter on dashboards deleted status.

	*/
	Deleted *string
	/*Description
	  Match Dashboard description.

	*/
	Description *string
	/*Fields
	  Requested fields.

	*/
	Fields *string
	/*FilterOr
	  Combine given search criteria in a boolean OR expression

	*/
	FilterOr *bool
	/*ID
	  Match dashboard id.

	*/
	ID *int64
	/*Limit
	  Number of results to return. (used with offset and takes priority over page and per_page)

	*/
	Limit *int64
	/*Offset
	  Number of results to skip before returning any. (used with limit and takes priority over page and per_page)

	*/
	Offset *int64
	/*Page
	  Requested page.

	*/
	Page *int64
	/*PerPage
	  Results per page.

	*/
	PerPage *int64
	/*Slug
	  Match dashboard slug.

	*/
	Slug *string
	/*Sorts
	  One or more fields to sort by. Sortable fields: [:title, :user_id, :id, :created_at, :space_id, :description, :view_count, :favorite_count, :slug, :content_favorite_id, :content_metadata_id, :deleted, :deleted_at, :last_viewed_at]

	*/
	Sorts *string
	/*SpaceID
	  Filter on a particular space.

	*/
	SpaceID *string
	/*Title
	  Match Dashboard title.

	*/
	Title *string
	/*UserID
	  Filter on dashboards created by a particular user.

	*/
	UserID *string
	/*ViewCount
	  Filter on a particular value of view_count

	*/
	ViewCount *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the search dashboards params
func (o *SearchDashboardsParams) WithTimeout(timeout time.Duration) *SearchDashboardsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the search dashboards params
func (o *SearchDashboardsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the search dashboards params
func (o *SearchDashboardsParams) WithContext(ctx context.Context) *SearchDashboardsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the search dashboards params
func (o *SearchDashboardsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the search dashboards params
func (o *SearchDashboardsParams) WithHTTPClient(client *http.Client) *SearchDashboardsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the search dashboards params
func (o *SearchDashboardsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithContentFavoriteID adds the contentFavoriteID to the search dashboards params
func (o *SearchDashboardsParams) WithContentFavoriteID(contentFavoriteID *int64) *SearchDashboardsParams {
	o.SetContentFavoriteID(contentFavoriteID)
	return o
}

// SetContentFavoriteID adds the contentFavoriteId to the search dashboards params
func (o *SearchDashboardsParams) SetContentFavoriteID(contentFavoriteID *int64) {
	o.ContentFavoriteID = contentFavoriteID
}

// WithContentMetadataID adds the contentMetadataID to the search dashboards params
func (o *SearchDashboardsParams) WithContentMetadataID(contentMetadataID *int64) *SearchDashboardsParams {
	o.SetContentMetadataID(contentMetadataID)
	return o
}

// SetContentMetadataID adds the contentMetadataId to the search dashboards params
func (o *SearchDashboardsParams) SetContentMetadataID(contentMetadataID *int64) {
	o.ContentMetadataID = contentMetadataID
}

// WithCurate adds the curate to the search dashboards params
func (o *SearchDashboardsParams) WithCurate(curate *bool) *SearchDashboardsParams {
	o.SetCurate(curate)
	return o
}

// SetCurate adds the curate to the search dashboards params
func (o *SearchDashboardsParams) SetCurate(curate *bool) {
	o.Curate = curate
}

// WithDeleted adds the deleted to the search dashboards params
func (o *SearchDashboardsParams) WithDeleted(deleted *string) *SearchDashboardsParams {
	o.SetDeleted(deleted)
	return o
}

// SetDeleted adds the deleted to the search dashboards params
func (o *SearchDashboardsParams) SetDeleted(deleted *string) {
	o.Deleted = deleted
}

// WithDescription adds the description to the search dashboards params
func (o *SearchDashboardsParams) WithDescription(description *string) *SearchDashboardsParams {
	o.SetDescription(description)
	return o
}

// SetDescription adds the description to the search dashboards params
func (o *SearchDashboardsParams) SetDescription(description *string) {
	o.Description = description
}

// WithFields adds the fields to the search dashboards params
func (o *SearchDashboardsParams) WithFields(fields *string) *SearchDashboardsParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the search dashboards params
func (o *SearchDashboardsParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithFilterOr adds the filterOr to the search dashboards params
func (o *SearchDashboardsParams) WithFilterOr(filterOr *bool) *SearchDashboardsParams {
	o.SetFilterOr(filterOr)
	return o
}

// SetFilterOr adds the filterOr to the search dashboards params
func (o *SearchDashboardsParams) SetFilterOr(filterOr *bool) {
	o.FilterOr = filterOr
}

// WithID adds the id to the search dashboards params
func (o *SearchDashboardsParams) WithID(id *int64) *SearchDashboardsParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the search dashboards params
func (o *SearchDashboardsParams) SetID(id *int64) {
	o.ID = id
}

// WithLimit adds the limit to the search dashboards params
func (o *SearchDashboardsParams) WithLimit(limit *int64) *SearchDashboardsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the search dashboards params
func (o *SearchDashboardsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the search dashboards params
func (o *SearchDashboardsParams) WithOffset(offset *int64) *SearchDashboardsParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the search dashboards params
func (o *SearchDashboardsParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithPage adds the page to the search dashboards params
func (o *SearchDashboardsParams) WithPage(page *int64) *SearchDashboardsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the search dashboards params
func (o *SearchDashboardsParams) SetPage(page *int64) {
	o.Page = page
}

// WithPerPage adds the perPage to the search dashboards params
func (o *SearchDashboardsParams) WithPerPage(perPage *int64) *SearchDashboardsParams {
	o.SetPerPage(perPage)
	return o
}

// SetPerPage adds the perPage to the search dashboards params
func (o *SearchDashboardsParams) SetPerPage(perPage *int64) {
	o.PerPage = perPage
}

// WithSlug adds the slug to the search dashboards params
func (o *SearchDashboardsParams) WithSlug(slug *string) *SearchDashboardsParams {
	o.SetSlug(slug)
	return o
}

// SetSlug adds the slug to the search dashboards params
func (o *SearchDashboardsParams) SetSlug(slug *string) {
	o.Slug = slug
}

// WithSorts adds the sorts to the search dashboards params
func (o *SearchDashboardsParams) WithSorts(sorts *string) *SearchDashboardsParams {
	o.SetSorts(sorts)
	return o
}

// SetSorts adds the sorts to the search dashboards params
func (o *SearchDashboardsParams) SetSorts(sorts *string) {
	o.Sorts = sorts
}

// WithSpaceID adds the spaceID to the search dashboards params
func (o *SearchDashboardsParams) WithSpaceID(spaceID *string) *SearchDashboardsParams {
	o.SetSpaceID(spaceID)
	return o
}

// SetSpaceID adds the spaceId to the search dashboards params
func (o *SearchDashboardsParams) SetSpaceID(spaceID *string) {
	o.SpaceID = spaceID
}

// WithTitle adds the title to the search dashboards params
func (o *SearchDashboardsParams) WithTitle(title *string) *SearchDashboardsParams {
	o.SetTitle(title)
	return o
}

// SetTitle adds the title to the search dashboards params
func (o *SearchDashboardsParams) SetTitle(title *string) {
	o.Title = title
}

// WithUserID adds the userID to the search dashboards params
func (o *SearchDashboardsParams) WithUserID(userID *string) *SearchDashboardsParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the search dashboards params
func (o *SearchDashboardsParams) SetUserID(userID *string) {
	o.UserID = userID
}

// WithViewCount adds the viewCount to the search dashboards params
func (o *SearchDashboardsParams) WithViewCount(viewCount *string) *SearchDashboardsParams {
	o.SetViewCount(viewCount)
	return o
}

// SetViewCount adds the viewCount to the search dashboards params
func (o *SearchDashboardsParams) SetViewCount(viewCount *string) {
	o.ViewCount = viewCount
}

// WriteToRequest writes these params to a swagger request
func (o *SearchDashboardsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ContentFavoriteID != nil {

		// query param content_favorite_id
		var qrContentFavoriteID int64
		if o.ContentFavoriteID != nil {
			qrContentFavoriteID = *o.ContentFavoriteID
		}
		qContentFavoriteID := swag.FormatInt64(qrContentFavoriteID)
		if qContentFavoriteID != "" {
			if err := r.SetQueryParam("content_favorite_id", qContentFavoriteID); err != nil {
				return err
			}
		}

	}

	if o.ContentMetadataID != nil {

		// query param content_metadata_id
		var qrContentMetadataID int64
		if o.ContentMetadataID != nil {
			qrContentMetadataID = *o.ContentMetadataID
		}
		qContentMetadataID := swag.FormatInt64(qrContentMetadataID)
		if qContentMetadataID != "" {
			if err := r.SetQueryParam("content_metadata_id", qContentMetadataID); err != nil {
				return err
			}
		}

	}

	if o.Curate != nil {

		// query param curate
		var qrCurate bool
		if o.Curate != nil {
			qrCurate = *o.Curate
		}
		qCurate := swag.FormatBool(qrCurate)
		if qCurate != "" {
			if err := r.SetQueryParam("curate", qCurate); err != nil {
				return err
			}
		}

	}

	if o.Deleted != nil {

		// query param deleted
		var qrDeleted string
		if o.Deleted != nil {
			qrDeleted = *o.Deleted
		}
		qDeleted := qrDeleted
		if qDeleted != "" {
			if err := r.SetQueryParam("deleted", qDeleted); err != nil {
				return err
			}
		}

	}

	if o.Description != nil {

		// query param description
		var qrDescription string
		if o.Description != nil {
			qrDescription = *o.Description
		}
		qDescription := qrDescription
		if qDescription != "" {
			if err := r.SetQueryParam("description", qDescription); err != nil {
				return err
			}
		}

	}

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	if o.FilterOr != nil {

		// query param filter_or
		var qrFilterOr bool
		if o.FilterOr != nil {
			qrFilterOr = *o.FilterOr
		}
		qFilterOr := swag.FormatBool(qrFilterOr)
		if qFilterOr != "" {
			if err := r.SetQueryParam("filter_or", qFilterOr); err != nil {
				return err
			}
		}

	}

	if o.ID != nil {

		// query param id
		var qrID int64
		if o.ID != nil {
			qrID = *o.ID
		}
		qID := swag.FormatInt64(qrID)
		if qID != "" {
			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage int64
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.PerPage != nil {

		// query param per_page
		var qrPerPage int64
		if o.PerPage != nil {
			qrPerPage = *o.PerPage
		}
		qPerPage := swag.FormatInt64(qrPerPage)
		if qPerPage != "" {
			if err := r.SetQueryParam("per_page", qPerPage); err != nil {
				return err
			}
		}

	}

	if o.Slug != nil {

		// query param slug
		var qrSlug string
		if o.Slug != nil {
			qrSlug = *o.Slug
		}
		qSlug := qrSlug
		if qSlug != "" {
			if err := r.SetQueryParam("slug", qSlug); err != nil {
				return err
			}
		}

	}

	if o.Sorts != nil {

		// query param sorts
		var qrSorts string
		if o.Sorts != nil {
			qrSorts = *o.Sorts
		}
		qSorts := qrSorts
		if qSorts != "" {
			if err := r.SetQueryParam("sorts", qSorts); err != nil {
				return err
			}
		}

	}

	if o.SpaceID != nil {

		// query param space_id
		var qrSpaceID string
		if o.SpaceID != nil {
			qrSpaceID = *o.SpaceID
		}
		qSpaceID := qrSpaceID
		if qSpaceID != "" {
			if err := r.SetQueryParam("space_id", qSpaceID); err != nil {
				return err
			}
		}

	}

	if o.Title != nil {

		// query param title
		var qrTitle string
		if o.Title != nil {
			qrTitle = *o.Title
		}
		qTitle := qrTitle
		if qTitle != "" {
			if err := r.SetQueryParam("title", qTitle); err != nil {
				return err
			}
		}

	}

	if o.UserID != nil {

		// query param user_id
		var qrUserID string
		if o.UserID != nil {
			qrUserID = *o.UserID
		}
		qUserID := qrUserID
		if qUserID != "" {
			if err := r.SetQueryParam("user_id", qUserID); err != nil {
				return err
			}
		}

	}

	if o.ViewCount != nil {

		// query param view_count
		var qrViewCount string
		if o.ViewCount != nil {
			qrViewCount = *o.ViewCount
		}
		qViewCount := qrViewCount
		if qViewCount != "" {
			if err := r.SetQueryParam("view_count", qViewCount); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
