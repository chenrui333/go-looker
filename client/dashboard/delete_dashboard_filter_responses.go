// Code generated by go-swagger; DO NOT EDIT.

package dashboard

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/chenrui333/go-looker/models"
)

// DeleteDashboardFilterReader is a Reader for the DeleteDashboardFilter structure.
type DeleteDashboardFilterReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteDashboardFilterReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteDashboardFilterNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteDashboardFilterBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteDashboardFilterNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteDashboardFilterNoContent creates a DeleteDashboardFilterNoContent with default headers values
func NewDeleteDashboardFilterNoContent() *DeleteDashboardFilterNoContent {
	return &DeleteDashboardFilterNoContent{}
}

/*DeleteDashboardFilterNoContent handles this case with default header values.

Successfully deleted.
*/
type DeleteDashboardFilterNoContent struct {
	Payload string
}

func (o *DeleteDashboardFilterNoContent) Error() string {
	return fmt.Sprintf("[DELETE /dashboard_filters/{dashboard_filter_id}][%d] deleteDashboardFilterNoContent  %+v", 204, o.Payload)
}

func (o *DeleteDashboardFilterNoContent) GetPayload() string {
	return o.Payload
}

func (o *DeleteDashboardFilterNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteDashboardFilterBadRequest creates a DeleteDashboardFilterBadRequest with default headers values
func NewDeleteDashboardFilterBadRequest() *DeleteDashboardFilterBadRequest {
	return &DeleteDashboardFilterBadRequest{}
}

/*DeleteDashboardFilterBadRequest handles this case with default header values.

Bad Request
*/
type DeleteDashboardFilterBadRequest struct {
	Payload *models.Error
}

func (o *DeleteDashboardFilterBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /dashboard_filters/{dashboard_filter_id}][%d] deleteDashboardFilterBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteDashboardFilterBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteDashboardFilterBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteDashboardFilterNotFound creates a DeleteDashboardFilterNotFound with default headers values
func NewDeleteDashboardFilterNotFound() *DeleteDashboardFilterNotFound {
	return &DeleteDashboardFilterNotFound{}
}

/*DeleteDashboardFilterNotFound handles this case with default header values.

Not Found
*/
type DeleteDashboardFilterNotFound struct {
	Payload *models.Error
}

func (o *DeleteDashboardFilterNotFound) Error() string {
	return fmt.Sprintf("[DELETE /dashboard_filters/{dashboard_filter_id}][%d] deleteDashboardFilterNotFound  %+v", 404, o.Payload)
}

func (o *DeleteDashboardFilterNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteDashboardFilterNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
