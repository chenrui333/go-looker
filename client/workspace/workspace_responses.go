// Code generated by go-swagger; DO NOT EDIT.

package workspace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/chenrui333/go-looker/models"
)

// WorkspaceReader is a Reader for the Workspace structure.
type WorkspaceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *WorkspaceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewWorkspaceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewWorkspaceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewWorkspaceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewWorkspaceOK creates a WorkspaceOK with default headers values
func NewWorkspaceOK() *WorkspaceOK {
	return &WorkspaceOK{}
}

/*WorkspaceOK handles this case with default header values.

Workspace
*/
type WorkspaceOK struct {
	Payload *models.Workspace
}

func (o *WorkspaceOK) Error() string {
	return fmt.Sprintf("[GET /workspaces/{workspace_id}][%d] workspaceOK  %+v", 200, o.Payload)
}

func (o *WorkspaceOK) GetPayload() *models.Workspace {
	return o.Payload
}

func (o *WorkspaceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Workspace)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWorkspaceBadRequest creates a WorkspaceBadRequest with default headers values
func NewWorkspaceBadRequest() *WorkspaceBadRequest {
	return &WorkspaceBadRequest{}
}

/*WorkspaceBadRequest handles this case with default header values.

Bad Request
*/
type WorkspaceBadRequest struct {
	Payload *models.Error
}

func (o *WorkspaceBadRequest) Error() string {
	return fmt.Sprintf("[GET /workspaces/{workspace_id}][%d] workspaceBadRequest  %+v", 400, o.Payload)
}

func (o *WorkspaceBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *WorkspaceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWorkspaceNotFound creates a WorkspaceNotFound with default headers values
func NewWorkspaceNotFound() *WorkspaceNotFound {
	return &WorkspaceNotFound{}
}

/*WorkspaceNotFound handles this case with default header values.

Not Found
*/
type WorkspaceNotFound struct {
	Payload *models.Error
}

func (o *WorkspaceNotFound) Error() string {
	return fmt.Sprintf("[GET /workspaces/{workspace_id}][%d] workspaceNotFound  %+v", 404, o.Payload)
}

func (o *WorkspaceNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *WorkspaceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
