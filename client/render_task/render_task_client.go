// Code generated by go-swagger; DO NOT EDIT.

package render_task

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new render task API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for render task API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateDashboardRenderTask creates dashboard render task

### Create a new task to render a dashboard to a document or image.

Returns a render task object.
To check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task).
Once the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).


*/
func (a *Client) CreateDashboardRenderTask(params *CreateDashboardRenderTaskParams) (*CreateDashboardRenderTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDashboardRenderTaskParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "create_dashboard_render_task",
		Method:             "POST",
		PathPattern:        "/render_tasks/dashboards/{dashboard_id}/{result_format}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateDashboardRenderTaskReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateDashboardRenderTaskOK), nil

}

/*
CreateLookRenderTask creates look render task

### Create a new task to render a look to an image.

Returns a render task object.
To check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task).
Once the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).


*/
func (a *Client) CreateLookRenderTask(params *CreateLookRenderTaskParams) (*CreateLookRenderTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateLookRenderTaskParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "create_look_render_task",
		Method:             "POST",
		PathPattern:        "/render_tasks/looks/{look_id}/{result_format}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateLookRenderTaskReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateLookRenderTaskOK), nil

}

/*
CreateLookmlDashboardRenderTask creates lookml dashboard render task

### Create a new task to render a lookml dashboard to a document or image.

Returns a render task object.
To check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task).
Once the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).


*/
func (a *Client) CreateLookmlDashboardRenderTask(params *CreateLookmlDashboardRenderTaskParams) (*CreateLookmlDashboardRenderTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateLookmlDashboardRenderTaskParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "create_lookml_dashboard_render_task",
		Method:             "POST",
		PathPattern:        "/render_tasks/lookml_dashboards/{dashboard_id}/{result_format}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateLookmlDashboardRenderTaskReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateLookmlDashboardRenderTaskOK), nil

}

/*
CreateQueryRenderTask creates query render task

### Create a new task to render an existing query to an image.

Returns a render task object.
To check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task).
Once the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).


*/
func (a *Client) CreateQueryRenderTask(params *CreateQueryRenderTaskParams) (*CreateQueryRenderTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateQueryRenderTaskParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "create_query_render_task",
		Method:             "POST",
		PathPattern:        "/render_tasks/queries/{query_id}/{result_format}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateQueryRenderTaskReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateQueryRenderTaskOK), nil

}

/*
RenderTask gets render task

### Get information about a render task.

Returns a render task object.
To check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task).
Once the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).


*/
func (a *Client) RenderTask(params *RenderTaskParams) (*RenderTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRenderTaskParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "render_task",
		Method:             "GET",
		PathPattern:        "/render_tasks/{render_task_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RenderTaskReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RenderTaskOK), nil

}

/*
RenderTaskResults renders task results

### Get the document or image produced by a completed render task.

Returns `102 Processing` if the render task has not completed.

*/
func (a *Client) RenderTaskResults(params *RenderTaskResultsParams) (*RenderTaskResultsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRenderTaskResultsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "render_task_results",
		Method:             "GET",
		PathPattern:        "/render_tasks/{render_task_id}/results",
		ProducesMediaTypes: []string{"application/pdf", "image/jpeg", "image/png"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RenderTaskResultsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RenderTaskResultsOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
