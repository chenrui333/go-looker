// Code generated by go-swagger; DO NOT EDIT.

package integration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewTestIntegrationParams creates a new TestIntegrationParams object
// with the default values initialized.
func NewTestIntegrationParams() *TestIntegrationParams {
	var ()
	return &TestIntegrationParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewTestIntegrationParamsWithTimeout creates a new TestIntegrationParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewTestIntegrationParamsWithTimeout(timeout time.Duration) *TestIntegrationParams {
	var ()
	return &TestIntegrationParams{

		timeout: timeout,
	}
}

// NewTestIntegrationParamsWithContext creates a new TestIntegrationParams object
// with the default values initialized, and the ability to set a context for a request
func NewTestIntegrationParamsWithContext(ctx context.Context) *TestIntegrationParams {
	var ()
	return &TestIntegrationParams{

		Context: ctx,
	}
}

// NewTestIntegrationParamsWithHTTPClient creates a new TestIntegrationParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewTestIntegrationParamsWithHTTPClient(client *http.Client) *TestIntegrationParams {
	var ()
	return &TestIntegrationParams{
		HTTPClient: client,
	}
}

/*TestIntegrationParams contains all the parameters to send to the API endpoint
for the test integration operation typically these are written to a http.Request
*/
type TestIntegrationParams struct {

	/*IntegrationID
	  Id of Integration

	*/
	IntegrationID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the test integration params
func (o *TestIntegrationParams) WithTimeout(timeout time.Duration) *TestIntegrationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the test integration params
func (o *TestIntegrationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the test integration params
func (o *TestIntegrationParams) WithContext(ctx context.Context) *TestIntegrationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the test integration params
func (o *TestIntegrationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the test integration params
func (o *TestIntegrationParams) WithHTTPClient(client *http.Client) *TestIntegrationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the test integration params
func (o *TestIntegrationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIntegrationID adds the integrationID to the test integration params
func (o *TestIntegrationParams) WithIntegrationID(integrationID int64) *TestIntegrationParams {
	o.SetIntegrationID(integrationID)
	return o
}

// SetIntegrationID adds the integrationId to the test integration params
func (o *TestIntegrationParams) SetIntegrationID(integrationID int64) {
	o.IntegrationID = integrationID
}

// WriteToRequest writes these params to a swagger request
func (o *TestIntegrationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param integration_id
	if err := r.SetPathParam("integration_id", swag.FormatInt64(o.IntegrationID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
