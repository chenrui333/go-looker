// Code generated by go-swagger; DO NOT EDIT.

package integration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewAllIntegrationsParams creates a new AllIntegrationsParams object
// with the default values initialized.
func NewAllIntegrationsParams() *AllIntegrationsParams {
	var ()
	return &AllIntegrationsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAllIntegrationsParamsWithTimeout creates a new AllIntegrationsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAllIntegrationsParamsWithTimeout(timeout time.Duration) *AllIntegrationsParams {
	var ()
	return &AllIntegrationsParams{

		timeout: timeout,
	}
}

// NewAllIntegrationsParamsWithContext creates a new AllIntegrationsParams object
// with the default values initialized, and the ability to set a context for a request
func NewAllIntegrationsParamsWithContext(ctx context.Context) *AllIntegrationsParams {
	var ()
	return &AllIntegrationsParams{

		Context: ctx,
	}
}

// NewAllIntegrationsParamsWithHTTPClient creates a new AllIntegrationsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAllIntegrationsParamsWithHTTPClient(client *http.Client) *AllIntegrationsParams {
	var ()
	return &AllIntegrationsParams{
		HTTPClient: client,
	}
}

/*AllIntegrationsParams contains all the parameters to send to the API endpoint
for the all integrations operation typically these are written to a http.Request
*/
type AllIntegrationsParams struct {

	/*Fields
	  Requested fields.

	*/
	Fields *string
	/*IntegrationHubID
	  Filter to a specific provider

	*/
	IntegrationHubID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the all integrations params
func (o *AllIntegrationsParams) WithTimeout(timeout time.Duration) *AllIntegrationsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the all integrations params
func (o *AllIntegrationsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the all integrations params
func (o *AllIntegrationsParams) WithContext(ctx context.Context) *AllIntegrationsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the all integrations params
func (o *AllIntegrationsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the all integrations params
func (o *AllIntegrationsParams) WithHTTPClient(client *http.Client) *AllIntegrationsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the all integrations params
func (o *AllIntegrationsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFields adds the fields to the all integrations params
func (o *AllIntegrationsParams) WithFields(fields *string) *AllIntegrationsParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the all integrations params
func (o *AllIntegrationsParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithIntegrationHubID adds the integrationHubID to the all integrations params
func (o *AllIntegrationsParams) WithIntegrationHubID(integrationHubID *string) *AllIntegrationsParams {
	o.SetIntegrationHubID(integrationHubID)
	return o
}

// SetIntegrationHubID adds the integrationHubId to the all integrations params
func (o *AllIntegrationsParams) SetIntegrationHubID(integrationHubID *string) {
	o.IntegrationHubID = integrationHubID
}

// WriteToRequest writes these params to a swagger request
func (o *AllIntegrationsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	if o.IntegrationHubID != nil {

		// query param integration_hub_id
		var qrIntegrationHubID string
		if o.IntegrationHubID != nil {
			qrIntegrationHubID = *o.IntegrationHubID
		}
		qIntegrationHubID := qrIntegrationHubID
		if qIntegrationHubID != "" {
			if err := r.SetQueryParam("integration_hub_id", qIntegrationHubID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
