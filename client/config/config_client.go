// Code generated by go-swagger; DO NOT EDIT.

package config

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new config API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for config API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AllLegacyFeatures gets all legacy features

### Get all legacy features.

*/
func (a *Client) AllLegacyFeatures(params *AllLegacyFeaturesParams) (*AllLegacyFeaturesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAllLegacyFeaturesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "all_legacy_features",
		Method:             "GET",
		PathPattern:        "/legacy_features",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AllLegacyFeaturesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AllLegacyFeaturesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for all_legacy_features: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AllLocales gets all locales

### Get a list of locales that Looker supports.

*/
func (a *Client) AllLocales(params *AllLocalesParams) (*AllLocalesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAllLocalesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "all_locales",
		Method:             "GET",
		PathPattern:        "/locales",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AllLocalesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AllLocalesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for all_locales: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AllTimezones gets all timezones

### Get a list of timezones that Looker supports (e.g. useful for scheduling tasks).

*/
func (a *Client) AllTimezones(params *AllTimezonesParams) (*AllTimezonesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAllTimezonesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "all_timezones",
		Method:             "GET",
		PathPattern:        "/timezones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AllTimezonesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AllTimezonesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for all_timezones: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BackupConfiguration gets backup configuration

### Get the current Looker internal database backup configuration.

*/
func (a *Client) BackupConfiguration(params *BackupConfigurationParams) (*BackupConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBackupConfigurationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "backup_configuration",
		Method:             "GET",
		PathPattern:        "/backup_configuration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BackupConfigurationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BackupConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for backup_configuration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CustomWelcomeEmail gets custom welcome email

### Get the current status and content of custom welcome emails

*/
func (a *Client) CustomWelcomeEmail(params *CustomWelcomeEmailParams) (*CustomWelcomeEmailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomWelcomeEmailParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "custom_welcome_email",
		Method:             "GET",
		PathPattern:        "/custom_welcome_email",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomWelcomeEmailReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomWelcomeEmailOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for custom_welcome_email: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InternalHelpResources gets internal help resources

### Get and set the options for internal help resources

*/
func (a *Client) InternalHelpResources(params *InternalHelpResourcesParams) (*InternalHelpResourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInternalHelpResourcesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "internal_help_resources",
		Method:             "GET",
		PathPattern:        "/internal_help_resources_enabled",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InternalHelpResourcesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InternalHelpResourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for internal_help_resources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InternalHelpResourcesContent gets internal help resources content

### Set the menu item name and content for internal help resources

*/
func (a *Client) InternalHelpResourcesContent(params *InternalHelpResourcesContentParams) (*InternalHelpResourcesContentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInternalHelpResourcesContentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "internal_help_resources_content",
		Method:             "GET",
		PathPattern:        "/internal_help_resources_content",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InternalHelpResourcesContentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InternalHelpResourcesContentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for internal_help_resources_content: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LegacyFeature gets legacy feature

### Get information about the legacy feature with a specific id.

*/
func (a *Client) LegacyFeature(params *LegacyFeatureParams) (*LegacyFeatureOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLegacyFeatureParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "legacy_feature",
		Method:             "GET",
		PathPattern:        "/legacy_features/{legacy_feature_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LegacyFeatureReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LegacyFeatureOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for legacy_feature: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateBackupConfiguration updates backup configuration

### Update the Looker internal database backup configuration.

*/
func (a *Client) UpdateBackupConfiguration(params *UpdateBackupConfigurationParams) (*UpdateBackupConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateBackupConfigurationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "update_backup_configuration",
		Method:             "PATCH",
		PathPattern:        "/backup_configuration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateBackupConfigurationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateBackupConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_backup_configuration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateCustomWelcomeEmail updates custom welcome email content

Update custom welcome email setting and values. Optionally send a test email with the new content to the currently logged in user.

*/
func (a *Client) UpdateCustomWelcomeEmail(params *UpdateCustomWelcomeEmailParams) (*UpdateCustomWelcomeEmailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCustomWelcomeEmailParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "update_custom_welcome_email",
		Method:             "PATCH",
		PathPattern:        "/custom_welcome_email",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateCustomWelcomeEmailReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCustomWelcomeEmailOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_custom_welcome_email: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateCustomWelcomeEmailTest sends a test welcome email to the currently logged in user with the supplied content

Requests to this endpoint will send a welcome email with the custom content provided in the body to the currently logged in user.

*/
func (a *Client) UpdateCustomWelcomeEmailTest(params *UpdateCustomWelcomeEmailTestParams) (*UpdateCustomWelcomeEmailTestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCustomWelcomeEmailTestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "update_custom_welcome_email_test",
		Method:             "PUT",
		PathPattern:        "/custom_welcome_email_test",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateCustomWelcomeEmailTestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCustomWelcomeEmailTestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_custom_welcome_email_test: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateInternalHelpResources updates internal help resources configuration

Update internal help resources settings

*/
func (a *Client) UpdateInternalHelpResources(params *UpdateInternalHelpResourcesParams) (*UpdateInternalHelpResourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateInternalHelpResourcesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "update_internal_help_resources",
		Method:             "PATCH",
		PathPattern:        "/internal_help_resources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateInternalHelpResourcesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateInternalHelpResourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_internal_help_resources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateInternalHelpResourcesContent updates internal help resources content

Update internal help resources content

*/
func (a *Client) UpdateInternalHelpResourcesContent(params *UpdateInternalHelpResourcesContentParams) (*UpdateInternalHelpResourcesContentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateInternalHelpResourcesContentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "update_internal_help_resources_content",
		Method:             "PATCH",
		PathPattern:        "/internal_help_resources_content",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateInternalHelpResourcesContentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateInternalHelpResourcesContentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_internal_help_resources_content: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateLegacyFeature updates legacy feature

### Update information about the legacy feature with a specific id.

*/
func (a *Client) UpdateLegacyFeature(params *UpdateLegacyFeatureParams) (*UpdateLegacyFeatureOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateLegacyFeatureParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "update_legacy_feature",
		Method:             "PATCH",
		PathPattern:        "/legacy_features/{legacy_feature_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateLegacyFeatureReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateLegacyFeatureOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_legacy_feature: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateWhitelabelConfiguration updates whitelabel configuration

### Update the whitelabel configuration

*/
func (a *Client) UpdateWhitelabelConfiguration(params *UpdateWhitelabelConfigurationParams) (*UpdateWhitelabelConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateWhitelabelConfigurationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "update_whitelabel_configuration",
		Method:             "PUT",
		PathPattern:        "/whitelabel_configuration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateWhitelabelConfigurationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateWhitelabelConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_whitelabel_configuration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
Versions gets Api version

### Get information about all API versions supported by this Looker instance.

*/
func (a *Client) Versions(params *VersionsParams) (*VersionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVersionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "versions",
		Method:             "GET",
		PathPattern:        "/versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VersionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VersionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for versions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WhitelabelConfiguration gets whitelabel configuration

### This feature is enabled only by special license.
### Gets the whitelabel configuration, which includes hiding documentation links, custom favicon uploading, etc.

*/
func (a *Client) WhitelabelConfiguration(params *WhitelabelConfigurationParams) (*WhitelabelConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWhitelabelConfigurationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "whitelabel_configuration",
		Method:             "GET",
		PathPattern:        "/whitelabel_configuration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WhitelabelConfigurationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WhitelabelConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for whitelabel_configuration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
