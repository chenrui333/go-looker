// Code generated by go-swagger; DO NOT EDIT.

package user_attribute

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new user attribute API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for user attribute API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AllUserAttributeGroupValues gets user attribute group values

### Returns all values of a user attribute defined by user groups, in precedence order.

A user may be a member of multiple groups which define different values for a given user attribute.
The order of group-values in the response determines precedence for selecting which group-value applies
to a given user.  For more information, see [Set User Attribute Group Values](#!/UserAttribute/set_user_attribute_group_values).

Results will only include groups that the caller's user account has permission to see.

*/
func (a *Client) AllUserAttributeGroupValues(params *AllUserAttributeGroupValuesParams) (*AllUserAttributeGroupValuesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAllUserAttributeGroupValuesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "all_user_attribute_group_values",
		Method:             "GET",
		PathPattern:        "/user_attributes/{user_attribute_id}/group_values",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AllUserAttributeGroupValuesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AllUserAttributeGroupValuesOK), nil

}

/*
AllUserAttributes gets all user attributes

### Get information about all user attributes.

*/
func (a *Client) AllUserAttributes(params *AllUserAttributesParams) (*AllUserAttributesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAllUserAttributesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "all_user_attributes",
		Method:             "GET",
		PathPattern:        "/user_attributes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AllUserAttributesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AllUserAttributesOK), nil

}

/*
CreateUserAttribute creates user attribute

### Create a new user attribute.

*/
func (a *Client) CreateUserAttribute(params *CreateUserAttributeParams) (*CreateUserAttributeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUserAttributeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "create_user_attribute",
		Method:             "POST",
		PathPattern:        "/user_attributes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateUserAttributeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateUserAttributeOK), nil

}

/*
DeleteUserAttribute deletes user attribute

### Delete a user attribute (admin only).

*/
func (a *Client) DeleteUserAttribute(params *DeleteUserAttributeParams) (*DeleteUserAttributeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserAttributeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete_user_attribute",
		Method:             "DELETE",
		PathPattern:        "/user_attributes/{user_attribute_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserAttributeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUserAttributeNoContent), nil

}

/*
SetUserAttributeGroupValues sets user attribute group values

### Define values for a user attribute across a set of groups, in priority order.

This function defines all values for a user attribute defined by user groups. This is a global setting, potentially affecting
all users in the system. This function replaces any existing group value definitions for the indicated user attribute.

The value of a user attribute for a given user is determined by searching the following locations, in this order:

1. the user's account settings
2. the groups that the user is a member of
3. the default value of the user attribute, if any

The user may be a member of multiple groups which define different values for that user attribute. The order of items in the group_values parameter
determines which group takes priority for that user. Lowest array index wins.

An alternate method to indicate the selection precedence of group-values is to assign numbers to the 'rank' property of each
group-value object in the array. Lowest 'rank' value wins. If you use this technique, you must assign a
rank value to every group-value object in the array.

To set a user attribute value for a single user, see [Set User Attribute User Value](#!/User/set_user_attribute_user_value).
To set a user attribute value for all members of a group, see [Set User Attribute Group Value](#!/Group/update_user_attribute_group_value).

*/
func (a *Client) SetUserAttributeGroupValues(params *SetUserAttributeGroupValuesParams) (*SetUserAttributeGroupValuesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetUserAttributeGroupValuesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set_user_attribute_group_values",
		Method:             "POST",
		PathPattern:        "/user_attributes/{user_attribute_id}/group_values",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetUserAttributeGroupValuesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetUserAttributeGroupValuesOK), nil

}

/*
UpdateUserAttribute updates user attribute

### Update a user attribute definition.

*/
func (a *Client) UpdateUserAttribute(params *UpdateUserAttributeParams) (*UpdateUserAttributeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUserAttributeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "update_user_attribute",
		Method:             "PATCH",
		PathPattern:        "/user_attributes/{user_attribute_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateUserAttributeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateUserAttributeOK), nil

}

/*
UserAttribute gets user attribute

### Get information about a user attribute.

*/
func (a *Client) UserAttribute(params *UserAttributeParams) (*UserAttributeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserAttributeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "user_attribute",
		Method:             "GET",
		PathPattern:        "/user_attributes/{user_attribute_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserAttributeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserAttributeOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
