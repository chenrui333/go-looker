// Code generated by go-swagger; DO NOT EDIT.

package folder

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewFolderLooksParams creates a new FolderLooksParams object
// with the default values initialized.
func NewFolderLooksParams() *FolderLooksParams {
	var ()
	return &FolderLooksParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewFolderLooksParamsWithTimeout creates a new FolderLooksParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewFolderLooksParamsWithTimeout(timeout time.Duration) *FolderLooksParams {
	var ()
	return &FolderLooksParams{

		timeout: timeout,
	}
}

// NewFolderLooksParamsWithContext creates a new FolderLooksParams object
// with the default values initialized, and the ability to set a context for a request
func NewFolderLooksParamsWithContext(ctx context.Context) *FolderLooksParams {
	var ()
	return &FolderLooksParams{

		Context: ctx,
	}
}

// NewFolderLooksParamsWithHTTPClient creates a new FolderLooksParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewFolderLooksParamsWithHTTPClient(client *http.Client) *FolderLooksParams {
	var ()
	return &FolderLooksParams{
		HTTPClient: client,
	}
}

/*FolderLooksParams contains all the parameters to send to the API endpoint
for the folder looks operation typically these are written to a http.Request
*/
type FolderLooksParams struct {

	/*Fields
	  Requested fields.

	*/
	Fields *string
	/*FolderID
	  Id of folder

	*/
	FolderID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the folder looks params
func (o *FolderLooksParams) WithTimeout(timeout time.Duration) *FolderLooksParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the folder looks params
func (o *FolderLooksParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the folder looks params
func (o *FolderLooksParams) WithContext(ctx context.Context) *FolderLooksParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the folder looks params
func (o *FolderLooksParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the folder looks params
func (o *FolderLooksParams) WithHTTPClient(client *http.Client) *FolderLooksParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the folder looks params
func (o *FolderLooksParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFields adds the fields to the folder looks params
func (o *FolderLooksParams) WithFields(fields *string) *FolderLooksParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the folder looks params
func (o *FolderLooksParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithFolderID adds the folderID to the folder looks params
func (o *FolderLooksParams) WithFolderID(folderID string) *FolderLooksParams {
	o.SetFolderID(folderID)
	return o
}

// SetFolderID adds the folderId to the folder looks params
func (o *FolderLooksParams) SetFolderID(folderID string) {
	o.FolderID = folderID
}

// WriteToRequest writes these params to a swagger request
func (o *FolderLooksParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	// path param folder_id
	if err := r.SetPathParam("folder_id", o.FolderID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
