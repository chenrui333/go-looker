// Code generated by go-swagger; DO NOT EDIT.

package folder

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/chenrui333/go-looker/models"
)

// FolderReader is a Reader for the Folder structure.
type FolderReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FolderReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFolderOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewFolderBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewFolderNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewFolderOK creates a FolderOK with default headers values
func NewFolderOK() *FolderOK {
	return &FolderOK{}
}

/*FolderOK handles this case with default header values.

Folder
*/
type FolderOK struct {
	Payload *models.Folder
}

func (o *FolderOK) Error() string {
	return fmt.Sprintf("[GET /folders/{folder_id}][%d] folderOK  %+v", 200, o.Payload)
}

func (o *FolderOK) GetPayload() *models.Folder {
	return o.Payload
}

func (o *FolderOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Folder)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFolderBadRequest creates a FolderBadRequest with default headers values
func NewFolderBadRequest() *FolderBadRequest {
	return &FolderBadRequest{}
}

/*FolderBadRequest handles this case with default header values.

Bad Request
*/
type FolderBadRequest struct {
	Payload *models.Error
}

func (o *FolderBadRequest) Error() string {
	return fmt.Sprintf("[GET /folders/{folder_id}][%d] folderBadRequest  %+v", 400, o.Payload)
}

func (o *FolderBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *FolderBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFolderNotFound creates a FolderNotFound with default headers values
func NewFolderNotFound() *FolderNotFound {
	return &FolderNotFound{}
}

/*FolderNotFound handles this case with default header values.

Not Found
*/
type FolderNotFound struct {
	Payload *models.Error
}

func (o *FolderNotFound) Error() string {
	return fmt.Sprintf("[GET /folders/{folder_id}][%d] folderNotFound  %+v", 404, o.Payload)
}

func (o *FolderNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *FolderNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
