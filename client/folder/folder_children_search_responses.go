// Code generated by go-swagger; DO NOT EDIT.

package folder

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/chenrui333/go-looker/models"
)

// FolderChildrenSearchReader is a Reader for the FolderChildrenSearch structure.
type FolderChildrenSearchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FolderChildrenSearchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFolderChildrenSearchOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewFolderChildrenSearchBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewFolderChildrenSearchNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewFolderChildrenSearchOK creates a FolderChildrenSearchOK with default headers values
func NewFolderChildrenSearchOK() *FolderChildrenSearchOK {
	return &FolderChildrenSearchOK{}
}

/*FolderChildrenSearchOK handles this case with default header values.

Folders
*/
type FolderChildrenSearchOK struct {
	Payload []*models.Folder
}

func (o *FolderChildrenSearchOK) Error() string {
	return fmt.Sprintf("[GET /folders/{folder_id}/children/search][%d] folderChildrenSearchOK  %+v", 200, o.Payload)
}

func (o *FolderChildrenSearchOK) GetPayload() []*models.Folder {
	return o.Payload
}

func (o *FolderChildrenSearchOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFolderChildrenSearchBadRequest creates a FolderChildrenSearchBadRequest with default headers values
func NewFolderChildrenSearchBadRequest() *FolderChildrenSearchBadRequest {
	return &FolderChildrenSearchBadRequest{}
}

/*FolderChildrenSearchBadRequest handles this case with default header values.

Bad Request
*/
type FolderChildrenSearchBadRequest struct {
	Payload *models.Error
}

func (o *FolderChildrenSearchBadRequest) Error() string {
	return fmt.Sprintf("[GET /folders/{folder_id}/children/search][%d] folderChildrenSearchBadRequest  %+v", 400, o.Payload)
}

func (o *FolderChildrenSearchBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *FolderChildrenSearchBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFolderChildrenSearchNotFound creates a FolderChildrenSearchNotFound with default headers values
func NewFolderChildrenSearchNotFound() *FolderChildrenSearchNotFound {
	return &FolderChildrenSearchNotFound{}
}

/*FolderChildrenSearchNotFound handles this case with default header values.

Not Found
*/
type FolderChildrenSearchNotFound struct {
	Payload *models.Error
}

func (o *FolderChildrenSearchNotFound) Error() string {
	return fmt.Sprintf("[GET /folders/{folder_id}/children/search][%d] folderChildrenSearchNotFound  %+v", 404, o.Payload)
}

func (o *FolderChildrenSearchNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *FolderChildrenSearchNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
