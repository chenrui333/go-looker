// Code generated by go-swagger; DO NOT EDIT.

package folder

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/chenrui333/go-looker/models"
)

// FolderLooksReader is a Reader for the FolderLooks structure.
type FolderLooksReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FolderLooksReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFolderLooksOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewFolderLooksBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewFolderLooksNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewFolderLooksOK creates a FolderLooksOK with default headers values
func NewFolderLooksOK() *FolderLooksOK {
	return &FolderLooksOK{}
}

/*FolderLooksOK handles this case with default header values.

Looks
*/
type FolderLooksOK struct {
	Payload []*models.LookWithQuery
}

func (o *FolderLooksOK) Error() string {
	return fmt.Sprintf("[GET /folders/{folder_id}/looks][%d] folderLooksOK  %+v", 200, o.Payload)
}

func (o *FolderLooksOK) GetPayload() []*models.LookWithQuery {
	return o.Payload
}

func (o *FolderLooksOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFolderLooksBadRequest creates a FolderLooksBadRequest with default headers values
func NewFolderLooksBadRequest() *FolderLooksBadRequest {
	return &FolderLooksBadRequest{}
}

/*FolderLooksBadRequest handles this case with default header values.

Bad Request
*/
type FolderLooksBadRequest struct {
	Payload *models.Error
}

func (o *FolderLooksBadRequest) Error() string {
	return fmt.Sprintf("[GET /folders/{folder_id}/looks][%d] folderLooksBadRequest  %+v", 400, o.Payload)
}

func (o *FolderLooksBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *FolderLooksBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFolderLooksNotFound creates a FolderLooksNotFound with default headers values
func NewFolderLooksNotFound() *FolderLooksNotFound {
	return &FolderLooksNotFound{}
}

/*FolderLooksNotFound handles this case with default header values.

Not Found
*/
type FolderLooksNotFound struct {
	Payload *models.Error
}

func (o *FolderLooksNotFound) Error() string {
	return fmt.Sprintf("[GET /folders/{folder_id}/looks][%d] folderLooksNotFound  %+v", 404, o.Payload)
}

func (o *FolderLooksNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *FolderLooksNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
