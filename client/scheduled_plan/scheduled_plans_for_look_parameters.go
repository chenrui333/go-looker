// Code generated by go-swagger; DO NOT EDIT.

package scheduled_plan

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewScheduledPlansForLookParams creates a new ScheduledPlansForLookParams object
// with the default values initialized.
func NewScheduledPlansForLookParams() *ScheduledPlansForLookParams {
	var ()
	return &ScheduledPlansForLookParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewScheduledPlansForLookParamsWithTimeout creates a new ScheduledPlansForLookParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewScheduledPlansForLookParamsWithTimeout(timeout time.Duration) *ScheduledPlansForLookParams {
	var ()
	return &ScheduledPlansForLookParams{

		timeout: timeout,
	}
}

// NewScheduledPlansForLookParamsWithContext creates a new ScheduledPlansForLookParams object
// with the default values initialized, and the ability to set a context for a request
func NewScheduledPlansForLookParamsWithContext(ctx context.Context) *ScheduledPlansForLookParams {
	var ()
	return &ScheduledPlansForLookParams{

		Context: ctx,
	}
}

// NewScheduledPlansForLookParamsWithHTTPClient creates a new ScheduledPlansForLookParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewScheduledPlansForLookParamsWithHTTPClient(client *http.Client) *ScheduledPlansForLookParams {
	var ()
	return &ScheduledPlansForLookParams{
		HTTPClient: client,
	}
}

/*ScheduledPlansForLookParams contains all the parameters to send to the API endpoint
for the scheduled plans for look operation typically these are written to a http.Request
*/
type ScheduledPlansForLookParams struct {

	/*Fields
	  Requested fields.

	*/
	Fields *string
	/*LookID
	  Look Id

	*/
	LookID int64
	/*UserID
	  User Id (default is requesting user if not specified)

	*/
	UserID *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the scheduled plans for look params
func (o *ScheduledPlansForLookParams) WithTimeout(timeout time.Duration) *ScheduledPlansForLookParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the scheduled plans for look params
func (o *ScheduledPlansForLookParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the scheduled plans for look params
func (o *ScheduledPlansForLookParams) WithContext(ctx context.Context) *ScheduledPlansForLookParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the scheduled plans for look params
func (o *ScheduledPlansForLookParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the scheduled plans for look params
func (o *ScheduledPlansForLookParams) WithHTTPClient(client *http.Client) *ScheduledPlansForLookParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the scheduled plans for look params
func (o *ScheduledPlansForLookParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFields adds the fields to the scheduled plans for look params
func (o *ScheduledPlansForLookParams) WithFields(fields *string) *ScheduledPlansForLookParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the scheduled plans for look params
func (o *ScheduledPlansForLookParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithLookID adds the lookID to the scheduled plans for look params
func (o *ScheduledPlansForLookParams) WithLookID(lookID int64) *ScheduledPlansForLookParams {
	o.SetLookID(lookID)
	return o
}

// SetLookID adds the lookId to the scheduled plans for look params
func (o *ScheduledPlansForLookParams) SetLookID(lookID int64) {
	o.LookID = lookID
}

// WithUserID adds the userID to the scheduled plans for look params
func (o *ScheduledPlansForLookParams) WithUserID(userID *int64) *ScheduledPlansForLookParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the scheduled plans for look params
func (o *ScheduledPlansForLookParams) SetUserID(userID *int64) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *ScheduledPlansForLookParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	// path param look_id
	if err := r.SetPathParam("look_id", swag.FormatInt64(o.LookID)); err != nil {
		return err
	}

	if o.UserID != nil {

		// query param user_id
		var qrUserID int64
		if o.UserID != nil {
			qrUserID = *o.UserID
		}
		qUserID := swag.FormatInt64(qrUserID)
		if qUserID != "" {
			if err := r.SetQueryParam("user_id", qUserID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
