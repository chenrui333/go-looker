// Code generated by go-swagger; DO NOT EDIT.

package scheduled_plan

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new scheduled plan API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for scheduled plan API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AllScheduledPlans gets all scheduled plans

### List All Scheduled Plans

Returns all scheduled plans which belong to the caller or given user.

If no user_id is provided, this function returns the scheduled plans owned by the caller.


To list all schedules for all users, pass `all_users=true`.


The caller must have `see_schedules` permission to see other users' scheduled plans.



*/
func (a *Client) AllScheduledPlans(params *AllScheduledPlansParams) (*AllScheduledPlansOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAllScheduledPlansParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "all_scheduled_plans",
		Method:             "GET",
		PathPattern:        "/scheduled_plans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AllScheduledPlansReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AllScheduledPlansOK), nil

}

/*
CreateScheduledPlan creates scheduled plan

### Create a Scheduled Plan

Create a scheduled plan to render a Look or Dashboard on a recurring schedule.

The queries that provide the data for the look or dashboard are run in the context of user account that owns the scheduled plan.

Admins can create scheduled plans on behalf of other users by specifying a user id.

Scheduled plan destinations must specify the data format to produce and send to the destination

Scheduled Plan Destination formats:

| format | Description
| :-----------: | :--- |
| json | A JSON object containing a `data` property which contains an array of JSON objects, one per row. No metadata.
| json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query
| inline_json | Same as the JSON format, except that the `data` property is a string containing JSON-escaped row data. Additional properties describe the data operation. This format is primarily used to send data to web hooks so that the web hook doesn't have to re-encode the JSON row data in order to pass it on to its ultimate destination.
| csv | Comma separated values with a header
| txt | Tab separated values with a header
| html | Simple html
| xlsx | MS Excel spreadsheet
| wysiwyg_pdf | Dashboard rendered in a tiled layout to produce a PDF document
| assembled_pdf | Dashboard rendered in a single column layout to produce a PDF document
| wysiwyg_png | Dashboard rendered in a tiled layout to produce a PNG image
||

Valid formats vary by destination type and source object. `wysiwyg_pdf` is only valid for dashboards, for example.



*/
func (a *Client) CreateScheduledPlan(params *CreateScheduledPlanParams) (*CreateScheduledPlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateScheduledPlanParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "create_scheduled_plan",
		Method:             "POST",
		PathPattern:        "/scheduled_plans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateScheduledPlanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateScheduledPlanOK), nil

}

/*
DeleteScheduledPlan deletes scheduled plan

### Delete a Scheduled Plan

Normal users can only delete their own scheduled plans.
Admins can delete other users' scheduled plans.

*/
func (a *Client) DeleteScheduledPlan(params *DeleteScheduledPlanParams) (*DeleteScheduledPlanNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteScheduledPlanParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete_scheduled_plan",
		Method:             "DELETE",
		PathPattern:        "/scheduled_plans/{scheduled_plan_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteScheduledPlanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteScheduledPlanNoContent), nil

}

/*
ScheduledPlan gets scheduled plan

### Get Information About a Scheduled Plan

Admins can fetch information about other users' Scheduled Plans.

*/
func (a *Client) ScheduledPlan(params *ScheduledPlanParams) (*ScheduledPlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScheduledPlanParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "scheduled_plan",
		Method:             "GET",
		PathPattern:        "/scheduled_plans/{scheduled_plan_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ScheduledPlanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ScheduledPlanOK), nil

}

/*
ScheduledPlanRunOnce runs scheduled plan once

### Run a Scheduled Plan Immediately

Create a scheduled plan that runs only once, and immediately.

This can be useful for testing a Scheduled Plan before committing to a production schedule.

Admins can create scheduled plans on behalf of other users by specifying a user id.

Scheduled plan destinations must specify the data format to produce and send to the destination

Scheduled Plan Destination formats:

| format | Description
| :-----------: | :--- |
| json | A JSON object containing a `data` property which contains an array of JSON objects, one per row. No metadata.
| json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query
| inline_json | Same as the JSON format, except that the `data` property is a string containing JSON-escaped row data. Additional properties describe the data operation. This format is primarily used to send data to web hooks so that the web hook doesn't have to re-encode the JSON row data in order to pass it on to its ultimate destination.
| csv | Comma separated values with a header
| txt | Tab separated values with a header
| html | Simple html
| xlsx | MS Excel spreadsheet
| wysiwyg_pdf | Dashboard rendered in a tiled layout to produce a PDF document
| assembled_pdf | Dashboard rendered in a single column layout to produce a PDF document
| wysiwyg_png | Dashboard rendered in a tiled layout to produce a PNG image
||

Valid formats vary by destination type and source object. `wysiwyg_pdf` is only valid for dashboards, for example.



*/
func (a *Client) ScheduledPlanRunOnce(params *ScheduledPlanRunOnceParams) (*ScheduledPlanRunOnceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScheduledPlanRunOnceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "scheduled_plan_run_once",
		Method:             "POST",
		PathPattern:        "/scheduled_plans/run_once",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ScheduledPlanRunOnceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ScheduledPlanRunOnceOK), nil

}

/*
ScheduledPlansForDashboard scheduleds plans for dashboard

### Get Scheduled Plans for a Dashboard

Returns all scheduled plans for a dashboard which belong to the caller or given user.

If no user_id is provided, this function returns the scheduled plans owned by the caller.


To list all schedules for all users, pass `all_users=true`.


The caller must have `see_schedules` permission to see other users' scheduled plans.



*/
func (a *Client) ScheduledPlansForDashboard(params *ScheduledPlansForDashboardParams) (*ScheduledPlansForDashboardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScheduledPlansForDashboardParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "scheduled_plans_for_dashboard",
		Method:             "GET",
		PathPattern:        "/scheduled_plans/dashboard/{dashboard_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ScheduledPlansForDashboardReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ScheduledPlansForDashboardOK), nil

}

/*
ScheduledPlansForLook scheduleds plans for look

### Get Scheduled Plans for a Look

Returns all scheduled plans for a look which belong to the caller or given user.

If no user_id is provided, this function returns the scheduled plans owned by the caller.


To list all schedules for all users, pass `all_users=true`.


The caller must have `see_schedules` permission to see other users' scheduled plans.



*/
func (a *Client) ScheduledPlansForLook(params *ScheduledPlansForLookParams) (*ScheduledPlansForLookOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScheduledPlansForLookParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "scheduled_plans_for_look",
		Method:             "GET",
		PathPattern:        "/scheduled_plans/look/{look_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ScheduledPlansForLookReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ScheduledPlansForLookOK), nil

}

/*
ScheduledPlansForLookmlDashboard scheduleds plans for look m l dashboard

### Get Scheduled Plans for a LookML Dashboard

Returns all scheduled plans for a LookML Dashboard which belong to the caller or given user.

If no user_id is provided, this function returns the scheduled plans owned by the caller.


To list all schedules for all users, pass `all_users=true`.


The caller must have `see_schedules` permission to see other users' scheduled plans.



*/
func (a *Client) ScheduledPlansForLookmlDashboard(params *ScheduledPlansForLookmlDashboardParams) (*ScheduledPlansForLookmlDashboardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScheduledPlansForLookmlDashboardParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "scheduled_plans_for_lookml_dashboard",
		Method:             "GET",
		PathPattern:        "/scheduled_plans/lookml_dashboard/{lookml_dashboard_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ScheduledPlansForLookmlDashboardReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ScheduledPlansForLookmlDashboardOK), nil

}

/*
ScheduledPlansForSpace scheduleds plans for space

### Get Scheduled Plans for a Space

Returns scheduled plans owned by the caller for a given space id.

*/
func (a *Client) ScheduledPlansForSpace(params *ScheduledPlansForSpaceParams) (*ScheduledPlansForSpaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScheduledPlansForSpaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "scheduled_plans_for_space",
		Method:             "GET",
		PathPattern:        "/scheduled_plans/space/{space_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ScheduledPlansForSpaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ScheduledPlansForSpaceOK), nil

}

/*
UpdateScheduledPlan updates scheduled plan

### Update a Scheduled Plan

Admins can update other users' Scheduled Plans.

Note: Any scheduled plan destinations specified in an update will **replace** all scheduled plan destinations
currently defined for the scheduled plan.

For Example: If a scheduled plan has destinations A, B, and C, and you call update on this scheduled plan
specifying only B in the destinations, then destinations A and C will be deleted by the update.

Scheduled plan destinations must specify the data format to produce and send to the destination

Scheduled Plan Destination formats:

| format | Description
| :-----------: | :--- |
| json | A JSON object containing a `data` property which contains an array of JSON objects, one per row. No metadata.
| json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query
| inline_json | Same as the JSON format, except that the `data` property is a string containing JSON-escaped row data. Additional properties describe the data operation. This format is primarily used to send data to web hooks so that the web hook doesn't have to re-encode the JSON row data in order to pass it on to its ultimate destination.
| csv | Comma separated values with a header
| txt | Tab separated values with a header
| html | Simple html
| xlsx | MS Excel spreadsheet
| wysiwyg_pdf | Dashboard rendered in a tiled layout to produce a PDF document
| assembled_pdf | Dashboard rendered in a single column layout to produce a PDF document
| wysiwyg_png | Dashboard rendered in a tiled layout to produce a PNG image
||

Valid formats vary by destination type and source object. `wysiwyg_pdf` is only valid for dashboards, for example.



*/
func (a *Client) UpdateScheduledPlan(params *UpdateScheduledPlanParams) (*UpdateScheduledPlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateScheduledPlanParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "update_scheduled_plan",
		Method:             "PATCH",
		PathPattern:        "/scheduled_plans/{scheduled_plan_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateScheduledPlanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateScheduledPlanOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
