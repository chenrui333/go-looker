// Code generated by go-swagger; DO NOT EDIT.

package scheduled_plan

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewScheduledPlansForDashboardParams creates a new ScheduledPlansForDashboardParams object
// with the default values initialized.
func NewScheduledPlansForDashboardParams() *ScheduledPlansForDashboardParams {
	var ()
	return &ScheduledPlansForDashboardParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewScheduledPlansForDashboardParamsWithTimeout creates a new ScheduledPlansForDashboardParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewScheduledPlansForDashboardParamsWithTimeout(timeout time.Duration) *ScheduledPlansForDashboardParams {
	var ()
	return &ScheduledPlansForDashboardParams{

		timeout: timeout,
	}
}

// NewScheduledPlansForDashboardParamsWithContext creates a new ScheduledPlansForDashboardParams object
// with the default values initialized, and the ability to set a context for a request
func NewScheduledPlansForDashboardParamsWithContext(ctx context.Context) *ScheduledPlansForDashboardParams {
	var ()
	return &ScheduledPlansForDashboardParams{

		Context: ctx,
	}
}

// NewScheduledPlansForDashboardParamsWithHTTPClient creates a new ScheduledPlansForDashboardParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewScheduledPlansForDashboardParamsWithHTTPClient(client *http.Client) *ScheduledPlansForDashboardParams {
	var ()
	return &ScheduledPlansForDashboardParams{
		HTTPClient: client,
	}
}

/*ScheduledPlansForDashboardParams contains all the parameters to send to the API endpoint
for the scheduled plans for dashboard operation typically these are written to a http.Request
*/
type ScheduledPlansForDashboardParams struct {

	/*AllUsers
	  Return scheduled plans belonging to all users for the dashboard

	*/
	AllUsers *bool
	/*DashboardID
	  Dashboard Id

	*/
	DashboardID int64
	/*Fields
	  Requested fields.

	*/
	Fields *string
	/*UserID
	  User Id (default is requesting user if not specified)

	*/
	UserID *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the scheduled plans for dashboard params
func (o *ScheduledPlansForDashboardParams) WithTimeout(timeout time.Duration) *ScheduledPlansForDashboardParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the scheduled plans for dashboard params
func (o *ScheduledPlansForDashboardParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the scheduled plans for dashboard params
func (o *ScheduledPlansForDashboardParams) WithContext(ctx context.Context) *ScheduledPlansForDashboardParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the scheduled plans for dashboard params
func (o *ScheduledPlansForDashboardParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the scheduled plans for dashboard params
func (o *ScheduledPlansForDashboardParams) WithHTTPClient(client *http.Client) *ScheduledPlansForDashboardParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the scheduled plans for dashboard params
func (o *ScheduledPlansForDashboardParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAllUsers adds the allUsers to the scheduled plans for dashboard params
func (o *ScheduledPlansForDashboardParams) WithAllUsers(allUsers *bool) *ScheduledPlansForDashboardParams {
	o.SetAllUsers(allUsers)
	return o
}

// SetAllUsers adds the allUsers to the scheduled plans for dashboard params
func (o *ScheduledPlansForDashboardParams) SetAllUsers(allUsers *bool) {
	o.AllUsers = allUsers
}

// WithDashboardID adds the dashboardID to the scheduled plans for dashboard params
func (o *ScheduledPlansForDashboardParams) WithDashboardID(dashboardID int64) *ScheduledPlansForDashboardParams {
	o.SetDashboardID(dashboardID)
	return o
}

// SetDashboardID adds the dashboardId to the scheduled plans for dashboard params
func (o *ScheduledPlansForDashboardParams) SetDashboardID(dashboardID int64) {
	o.DashboardID = dashboardID
}

// WithFields adds the fields to the scheduled plans for dashboard params
func (o *ScheduledPlansForDashboardParams) WithFields(fields *string) *ScheduledPlansForDashboardParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the scheduled plans for dashboard params
func (o *ScheduledPlansForDashboardParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithUserID adds the userID to the scheduled plans for dashboard params
func (o *ScheduledPlansForDashboardParams) WithUserID(userID *int64) *ScheduledPlansForDashboardParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the scheduled plans for dashboard params
func (o *ScheduledPlansForDashboardParams) SetUserID(userID *int64) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *ScheduledPlansForDashboardParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AllUsers != nil {

		// query param all_users
		var qrAllUsers bool
		if o.AllUsers != nil {
			qrAllUsers = *o.AllUsers
		}
		qAllUsers := swag.FormatBool(qrAllUsers)
		if qAllUsers != "" {
			if err := r.SetQueryParam("all_users", qAllUsers); err != nil {
				return err
			}
		}

	}

	// path param dashboard_id
	if err := r.SetPathParam("dashboard_id", swag.FormatInt64(o.DashboardID)); err != nil {
		return err
	}

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	if o.UserID != nil {

		// query param user_id
		var qrUserID int64
		if o.UserID != nil {
			qrUserID = *o.UserID
		}
		qUserID := swag.FormatInt64(qrUserID)
		if qUserID != "" {
			if err := r.SetQueryParam("user_id", qUserID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
