// Code generated by go-swagger; DO NOT EDIT.

package scheduled_plan

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/chenrui333/go-looker/models"
)

// ScheduledPlansForSpaceReader is a Reader for the ScheduledPlansForSpace structure.
type ScheduledPlansForSpaceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ScheduledPlansForSpaceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewScheduledPlansForSpaceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewScheduledPlansForSpaceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewScheduledPlansForSpaceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewScheduledPlansForSpaceOK creates a ScheduledPlansForSpaceOK with default headers values
func NewScheduledPlansForSpaceOK() *ScheduledPlansForSpaceOK {
	return &ScheduledPlansForSpaceOK{}
}

/*ScheduledPlansForSpaceOK handles this case with default header values.

Scheduled Plan
*/
type ScheduledPlansForSpaceOK struct {
	Payload []*models.ScheduledPlan
}

func (o *ScheduledPlansForSpaceOK) Error() string {
	return fmt.Sprintf("[GET /scheduled_plans/space/{space_id}][%d] scheduledPlansForSpaceOK  %+v", 200, o.Payload)
}

func (o *ScheduledPlansForSpaceOK) GetPayload() []*models.ScheduledPlan {
	return o.Payload
}

func (o *ScheduledPlansForSpaceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewScheduledPlansForSpaceBadRequest creates a ScheduledPlansForSpaceBadRequest with default headers values
func NewScheduledPlansForSpaceBadRequest() *ScheduledPlansForSpaceBadRequest {
	return &ScheduledPlansForSpaceBadRequest{}
}

/*ScheduledPlansForSpaceBadRequest handles this case with default header values.

Bad Request
*/
type ScheduledPlansForSpaceBadRequest struct {
	Payload *models.Error
}

func (o *ScheduledPlansForSpaceBadRequest) Error() string {
	return fmt.Sprintf("[GET /scheduled_plans/space/{space_id}][%d] scheduledPlansForSpaceBadRequest  %+v", 400, o.Payload)
}

func (o *ScheduledPlansForSpaceBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *ScheduledPlansForSpaceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewScheduledPlansForSpaceNotFound creates a ScheduledPlansForSpaceNotFound with default headers values
func NewScheduledPlansForSpaceNotFound() *ScheduledPlansForSpaceNotFound {
	return &ScheduledPlansForSpaceNotFound{}
}

/*ScheduledPlansForSpaceNotFound handles this case with default header values.

Not Found
*/
type ScheduledPlansForSpaceNotFound struct {
	Payload *models.Error
}

func (o *ScheduledPlansForSpaceNotFound) Error() string {
	return fmt.Sprintf("[GET /scheduled_plans/space/{space_id}][%d] scheduledPlansForSpaceNotFound  %+v", 404, o.Payload)
}

func (o *ScheduledPlansForSpaceNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *ScheduledPlansForSpaceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
