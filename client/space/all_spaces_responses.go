// Code generated by go-swagger; DO NOT EDIT.

package space

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/chenrui333/go-looker/models"
)

// AllSpacesReader is a Reader for the AllSpaces structure.
type AllSpacesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AllSpacesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAllSpacesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAllSpacesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAllSpacesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAllSpacesOK creates a AllSpacesOK with default headers values
func NewAllSpacesOK() *AllSpacesOK {
	return &AllSpacesOK{}
}

/*AllSpacesOK handles this case with default header values.

Space
*/
type AllSpacesOK struct {
	Payload []*models.SpaceBase
}

func (o *AllSpacesOK) Error() string {
	return fmt.Sprintf("[GET /spaces][%d] allSpacesOK  %+v", 200, o.Payload)
}

func (o *AllSpacesOK) GetPayload() []*models.SpaceBase {
	return o.Payload
}

func (o *AllSpacesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAllSpacesBadRequest creates a AllSpacesBadRequest with default headers values
func NewAllSpacesBadRequest() *AllSpacesBadRequest {
	return &AllSpacesBadRequest{}
}

/*AllSpacesBadRequest handles this case with default header values.

Bad Request
*/
type AllSpacesBadRequest struct {
	Payload *models.Error
}

func (o *AllSpacesBadRequest) Error() string {
	return fmt.Sprintf("[GET /spaces][%d] allSpacesBadRequest  %+v", 400, o.Payload)
}

func (o *AllSpacesBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *AllSpacesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAllSpacesNotFound creates a AllSpacesNotFound with default headers values
func NewAllSpacesNotFound() *AllSpacesNotFound {
	return &AllSpacesNotFound{}
}

/*AllSpacesNotFound handles this case with default header values.

Not Found
*/
type AllSpacesNotFound struct {
	Payload *models.Error
}

func (o *AllSpacesNotFound) Error() string {
	return fmt.Sprintf("[GET /spaces][%d] allSpacesNotFound  %+v", 404, o.Payload)
}

func (o *AllSpacesNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *AllSpacesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
