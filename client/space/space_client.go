// Code generated by go-swagger; DO NOT EDIT.

package space

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new space API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for space API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AllSpaces gets all spaces

### Get information about all spaces.
*/
func (a *Client) AllSpaces(params *AllSpacesParams) (*AllSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAllSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "all_spaces",
		Method:             "GET",
		PathPattern:        "/spaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AllSpacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AllSpacesOK), nil

}

/*
CreateSpace creates space

### Create a space with specified information.

Caller must have permission to edit the parent space and to create spaces, otherwise the request
returns 404 Not Found.

*/
func (a *Client) CreateSpace(params *CreateSpaceParams) (*CreateSpaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSpaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "create_space",
		Method:             "POST",
		PathPattern:        "/spaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateSpaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateSpaceOK), nil

}

/*
DeleteSpace deletes space

### Delete the space with a specific id including any children spaces.
**DANGER** this will delete all looks and dashboards in the space.

*/
func (a *Client) DeleteSpace(params *DeleteSpaceParams) (*DeleteSpaceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSpaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete_space",
		Method:             "DELETE",
		PathPattern:        "/spaces/{space_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSpaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSpaceNoContent), nil

}

/*
SearchSpaces searches spaces

Search for spaces by creator id, parent id, name, etc
*/
func (a *Client) SearchSpaces(params *SearchSpacesParams) (*SearchSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "search_spaces",
		Method:             "GET",
		PathPattern:        "/spaces/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchSpacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SearchSpacesOK), nil

}

/*
Space gets space

### Get information about the space with a specific id.
*/
func (a *Client) Space(params *SpaceParams) (*SpaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSpaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "space",
		Method:             "GET",
		PathPattern:        "/spaces/{space_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SpaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SpaceOK), nil

}

/*
SpaceAncestors gets space ancestors

### Get the ancestors of a space
*/
func (a *Client) SpaceAncestors(params *SpaceAncestorsParams) (*SpaceAncestorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSpaceAncestorsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "space_ancestors",
		Method:             "GET",
		PathPattern:        "/spaces/{space_id}/ancestors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SpaceAncestorsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SpaceAncestorsOK), nil

}

/*
SpaceChildren gets space children

### Get the children of a space.
*/
func (a *Client) SpaceChildren(params *SpaceChildrenParams) (*SpaceChildrenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSpaceChildrenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "space_children",
		Method:             "GET",
		PathPattern:        "/spaces/{space_id}/children",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SpaceChildrenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SpaceChildrenOK), nil

}

/*
SpaceChildrenSearch searches space children

### Search the children of a space
*/
func (a *Client) SpaceChildrenSearch(params *SpaceChildrenSearchParams) (*SpaceChildrenSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSpaceChildrenSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "space_children_search",
		Method:             "GET",
		PathPattern:        "/spaces/{space_id}/children/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SpaceChildrenSearchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SpaceChildrenSearchOK), nil

}

/*
SpaceDashboards gets space dashboards

### Get the dashboards in a space
*/
func (a *Client) SpaceDashboards(params *SpaceDashboardsParams) (*SpaceDashboardsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSpaceDashboardsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "space_dashboards",
		Method:             "GET",
		PathPattern:        "/spaces/{space_id}/dashboards",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SpaceDashboardsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SpaceDashboardsOK), nil

}

/*
SpaceLooks gets space looks

### Get the looks in a space
*/
func (a *Client) SpaceLooks(params *SpaceLooksParams) (*SpaceLooksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSpaceLooksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "space_looks",
		Method:             "GET",
		PathPattern:        "/spaces/{space_id}/looks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SpaceLooksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SpaceLooksOK), nil

}

/*
SpaceParent gets space parent

### Get the parent of a space
*/
func (a *Client) SpaceParent(params *SpaceParentParams) (*SpaceParentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSpaceParentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "space_parent",
		Method:             "GET",
		PathPattern:        "/spaces/{space_id}/parent",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SpaceParentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SpaceParentOK), nil

}

/*
UpdateSpace updates space

### Update the space with a specific id.
*/
func (a *Client) UpdateSpace(params *UpdateSpaceParams) (*UpdateSpaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSpaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "update_space",
		Method:             "PATCH",
		PathPattern:        "/spaces/{space_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSpaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateSpaceOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
