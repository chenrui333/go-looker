// Code generated by go-swagger; DO NOT EDIT.

package sql_query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewRunSQLQueryParams creates a new RunSQLQueryParams object
// with the default values initialized.
func NewRunSQLQueryParams() *RunSQLQueryParams {
	var ()
	return &RunSQLQueryParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewRunSQLQueryParamsWithTimeout creates a new RunSQLQueryParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRunSQLQueryParamsWithTimeout(timeout time.Duration) *RunSQLQueryParams {
	var ()
	return &RunSQLQueryParams{

		timeout: timeout,
	}
}

// NewRunSQLQueryParamsWithContext creates a new RunSQLQueryParams object
// with the default values initialized, and the ability to set a context for a request
func NewRunSQLQueryParamsWithContext(ctx context.Context) *RunSQLQueryParams {
	var ()
	return &RunSQLQueryParams{

		Context: ctx,
	}
}

// NewRunSQLQueryParamsWithHTTPClient creates a new RunSQLQueryParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRunSQLQueryParamsWithHTTPClient(client *http.Client) *RunSQLQueryParams {
	var ()
	return &RunSQLQueryParams{
		HTTPClient: client,
	}
}

/*RunSQLQueryParams contains all the parameters to send to the API endpoint
for the run sql query operation typically these are written to a http.Request
*/
type RunSQLQueryParams struct {

	/*Download
	  Defaults to false. If set to true, the HTTP response will have content-disposition and other headers set to make the HTTP response behave as a downloadable attachment instead of as inline content.

	*/
	Download *string
	/*ResultFormat
	  Format of result, options are: ["json", "json_detail", "json_fe", "csv", "html", "md", "txt", "xlsx", "gsxml"]

	*/
	ResultFormat string
	/*Slug
	  slug of query

	*/
	Slug string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the run sql query params
func (o *RunSQLQueryParams) WithTimeout(timeout time.Duration) *RunSQLQueryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the run sql query params
func (o *RunSQLQueryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the run sql query params
func (o *RunSQLQueryParams) WithContext(ctx context.Context) *RunSQLQueryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the run sql query params
func (o *RunSQLQueryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the run sql query params
func (o *RunSQLQueryParams) WithHTTPClient(client *http.Client) *RunSQLQueryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the run sql query params
func (o *RunSQLQueryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDownload adds the download to the run sql query params
func (o *RunSQLQueryParams) WithDownload(download *string) *RunSQLQueryParams {
	o.SetDownload(download)
	return o
}

// SetDownload adds the download to the run sql query params
func (o *RunSQLQueryParams) SetDownload(download *string) {
	o.Download = download
}

// WithResultFormat adds the resultFormat to the run sql query params
func (o *RunSQLQueryParams) WithResultFormat(resultFormat string) *RunSQLQueryParams {
	o.SetResultFormat(resultFormat)
	return o
}

// SetResultFormat adds the resultFormat to the run sql query params
func (o *RunSQLQueryParams) SetResultFormat(resultFormat string) {
	o.ResultFormat = resultFormat
}

// WithSlug adds the slug to the run sql query params
func (o *RunSQLQueryParams) WithSlug(slug string) *RunSQLQueryParams {
	o.SetSlug(slug)
	return o
}

// SetSlug adds the slug to the run sql query params
func (o *RunSQLQueryParams) SetSlug(slug string) {
	o.Slug = slug
}

// WriteToRequest writes these params to a swagger request
func (o *RunSQLQueryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Download != nil {

		// query param download
		var qrDownload string
		if o.Download != nil {
			qrDownload = *o.Download
		}
		qDownload := qrDownload
		if qDownload != "" {
			if err := r.SetQueryParam("download", qDownload); err != nil {
				return err
			}
		}

	}

	// path param result_format
	if err := r.SetPathParam("result_format", o.ResultFormat); err != nil {
		return err
	}

	// path param slug
	if err := r.SetPathParam("slug", o.Slug); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
