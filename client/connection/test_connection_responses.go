// Code generated by go-swagger; DO NOT EDIT.

package connection

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/chenrui333/go-looker/models"
)

// TestConnectionReader is a Reader for the TestConnection structure.
type TestConnectionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TestConnectionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewTestConnectionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewTestConnectionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewTestConnectionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewTestConnectionTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewTestConnectionOK creates a TestConnectionOK with default headers values
func NewTestConnectionOK() *TestConnectionOK {
	return &TestConnectionOK{}
}

/*TestConnectionOK handles this case with default header values.

Test results
*/
type TestConnectionOK struct {
	Payload []*models.DBConnectionTestResult
}

func (o *TestConnectionOK) Error() string {
	return fmt.Sprintf("[PUT /connections/{connection_name}/test][%d] testConnectionOK  %+v", 200, o.Payload)
}

func (o *TestConnectionOK) GetPayload() []*models.DBConnectionTestResult {
	return o.Payload
}

func (o *TestConnectionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTestConnectionBadRequest creates a TestConnectionBadRequest with default headers values
func NewTestConnectionBadRequest() *TestConnectionBadRequest {
	return &TestConnectionBadRequest{}
}

/*TestConnectionBadRequest handles this case with default header values.

Bad Request
*/
type TestConnectionBadRequest struct {
	Payload *models.Error
}

func (o *TestConnectionBadRequest) Error() string {
	return fmt.Sprintf("[PUT /connections/{connection_name}/test][%d] testConnectionBadRequest  %+v", 400, o.Payload)
}

func (o *TestConnectionBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *TestConnectionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTestConnectionNotFound creates a TestConnectionNotFound with default headers values
func NewTestConnectionNotFound() *TestConnectionNotFound {
	return &TestConnectionNotFound{}
}

/*TestConnectionNotFound handles this case with default header values.

Not Found
*/
type TestConnectionNotFound struct {
	Payload *models.Error
}

func (o *TestConnectionNotFound) Error() string {
	return fmt.Sprintf("[PUT /connections/{connection_name}/test][%d] testConnectionNotFound  %+v", 404, o.Payload)
}

func (o *TestConnectionNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *TestConnectionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTestConnectionTooManyRequests creates a TestConnectionTooManyRequests with default headers values
func NewTestConnectionTooManyRequests() *TestConnectionTooManyRequests {
	return &TestConnectionTooManyRequests{}
}

/*TestConnectionTooManyRequests handles this case with default header values.

Too Many Requests
*/
type TestConnectionTooManyRequests struct {
	Payload *models.Error
}

func (o *TestConnectionTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /connections/{connection_name}/test][%d] testConnectionTooManyRequests  %+v", 429, o.Payload)
}

func (o *TestConnectionTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *TestConnectionTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
