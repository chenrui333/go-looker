// Code generated by go-swagger; DO NOT EDIT.

package connection

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/chenrui333/go-looker/models"
)

// AllConnectionsReader is a Reader for the AllConnections structure.
type AllConnectionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AllConnectionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewAllConnectionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewAllConnectionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewAllConnectionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAllConnectionsOK creates a AllConnectionsOK with default headers values
func NewAllConnectionsOK() *AllConnectionsOK {
	return &AllConnectionsOK{}
}

/*AllConnectionsOK handles this case with default header values.

Connection
*/
type AllConnectionsOK struct {
	Payload []*models.DBConnection
}

func (o *AllConnectionsOK) Error() string {
	return fmt.Sprintf("[GET /connections][%d] allConnectionsOK  %+v", 200, o.Payload)
}

func (o *AllConnectionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAllConnectionsBadRequest creates a AllConnectionsBadRequest with default headers values
func NewAllConnectionsBadRequest() *AllConnectionsBadRequest {
	return &AllConnectionsBadRequest{}
}

/*AllConnectionsBadRequest handles this case with default header values.

Bad Request
*/
type AllConnectionsBadRequest struct {
	Payload *models.Error
}

func (o *AllConnectionsBadRequest) Error() string {
	return fmt.Sprintf("[GET /connections][%d] allConnectionsBadRequest  %+v", 400, o.Payload)
}

func (o *AllConnectionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAllConnectionsNotFound creates a AllConnectionsNotFound with default headers values
func NewAllConnectionsNotFound() *AllConnectionsNotFound {
	return &AllConnectionsNotFound{}
}

/*AllConnectionsNotFound handles this case with default header values.

Not Found
*/
type AllConnectionsNotFound struct {
	Payload *models.Error
}

func (o *AllConnectionsNotFound) Error() string {
	return fmt.Sprintf("[GET /connections][%d] allConnectionsNotFound  %+v", 404, o.Payload)
}

func (o *AllConnectionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
