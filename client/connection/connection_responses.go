// Code generated by go-swagger; DO NOT EDIT.

package connection

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/chenrui333/go-looker/models"
)

// ConnectionReader is a Reader for the Connection structure.
type ConnectionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ConnectionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewConnectionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewConnectionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewConnectionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewConnectionOK creates a ConnectionOK with default headers values
func NewConnectionOK() *ConnectionOK {
	return &ConnectionOK{}
}

/*ConnectionOK handles this case with default header values.

Connection
*/
type ConnectionOK struct {
	Payload *models.DBConnection
}

func (o *ConnectionOK) Error() string {
	return fmt.Sprintf("[GET /connections/{connection_name}][%d] connectionOK  %+v", 200, o.Payload)
}

func (o *ConnectionOK) GetPayload() *models.DBConnection {
	return o.Payload
}

func (o *ConnectionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DBConnection)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConnectionBadRequest creates a ConnectionBadRequest with default headers values
func NewConnectionBadRequest() *ConnectionBadRequest {
	return &ConnectionBadRequest{}
}

/*ConnectionBadRequest handles this case with default header values.

Bad Request
*/
type ConnectionBadRequest struct {
	Payload *models.Error
}

func (o *ConnectionBadRequest) Error() string {
	return fmt.Sprintf("[GET /connections/{connection_name}][%d] connectionBadRequest  %+v", 400, o.Payload)
}

func (o *ConnectionBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *ConnectionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConnectionNotFound creates a ConnectionNotFound with default headers values
func NewConnectionNotFound() *ConnectionNotFound {
	return &ConnectionNotFound{}
}

/*ConnectionNotFound handles this case with default header values.

Not Found
*/
type ConnectionNotFound struct {
	Payload *models.Error
}

func (o *ConnectionNotFound) Error() string {
	return fmt.Sprintf("[GET /connections/{connection_name}][%d] connectionNotFound  %+v", 404, o.Payload)
}

func (o *ConnectionNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *ConnectionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
