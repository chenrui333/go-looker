// Code generated by go-swagger; DO NOT EDIT.

package connection

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new connection API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for connection API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AllConnections gets all connections

### Get information about all connections.

*/
func (a *Client) AllConnections(params *AllConnectionsParams) (*AllConnectionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAllConnectionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "all_connections",
		Method:             "GET",
		PathPattern:        "/connections",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AllConnectionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AllConnectionsOK), nil

}

/*
AllDialectInfos gets all dialect infos

### Get information about all dialects.

*/
func (a *Client) AllDialectInfos(params *AllDialectInfosParams) (*AllDialectInfosOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAllDialectInfosParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "all_dialect_infos",
		Method:             "GET",
		PathPattern:        "/dialect_info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AllDialectInfosReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AllDialectInfosOK), nil

}

/*
Connection gets connection

### Get information about a connection.

*/
func (a *Client) Connection(params *ConnectionParams) (*ConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "connection",
		Method:             "GET",
		PathPattern:        "/connections/{connection_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ConnectionOK), nil

}

/*
CreateConnection creates connection

### Create a connection using the specified configuration.

*/
func (a *Client) CreateConnection(params *CreateConnectionParams) (*CreateConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateConnectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "create_connection",
		Method:             "POST",
		PathPattern:        "/connections",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateConnectionOK), nil

}

/*
DeleteConnection deletes connection

### Delete a connection.

*/
func (a *Client) DeleteConnection(params *DeleteConnectionParams) (*DeleteConnectionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteConnectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete_connection",
		Method:             "DELETE",
		PathPattern:        "/connections/{connection_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteConnectionNoContent), nil

}

/*
DeleteConnectionOverride deletes connection

### Delete a connection override.

*/
func (a *Client) DeleteConnectionOverride(params *DeleteConnectionOverrideParams) (*DeleteConnectionOverrideNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteConnectionOverrideParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete_connection_override",
		Method:             "DELETE",
		PathPattern:        "/connections/{connection_name}/connection_override/{override_context}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteConnectionOverrideReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteConnectionOverrideNoContent), nil

}

/*
TestConnection tests connection

### Test an existing connection.

Note that a connection's 'dialect' property has a 'connection_tests' property that lists the
specific types of tests that the connection supports.

Unsupported tests in the request will be ignored.

*/
func (a *Client) TestConnection(params *TestConnectionParams) (*TestConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTestConnectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "test_connection",
		Method:             "PUT",
		PathPattern:        "/connections/{connection_name}/test",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TestConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TestConnectionOK), nil

}

/*
TestConnectionConfig tests connection configuration

### Test a connection configuration.

Note that a connection's 'dialect' property has a 'connection_tests' property that lists the
specific types of tests that the connection supports.

Unsupported tests in the request will be ignored.

*/
func (a *Client) TestConnectionConfig(params *TestConnectionConfigParams) (*TestConnectionConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTestConnectionConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "test_connection_config",
		Method:             "PUT",
		PathPattern:        "/connections/test",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TestConnectionConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TestConnectionConfigOK), nil

}

/*
UpdateConnection updates connection

### Update a connection using the specified configuration.

*/
func (a *Client) UpdateConnection(params *UpdateConnectionParams) (*UpdateConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateConnectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "update_connection",
		Method:             "PATCH",
		PathPattern:        "/connections/{connection_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateConnectionOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
