// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/chenrui333/go-looker/models"
)

// ProjectFileReader is a Reader for the ProjectFile structure.
type ProjectFileReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ProjectFileReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewProjectFileOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewProjectFileBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewProjectFileNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewProjectFileOK creates a ProjectFileOK with default headers values
func NewProjectFileOK() *ProjectFileOK {
	return &ProjectFileOK{}
}

/*ProjectFileOK handles this case with default header values.

Project File
*/
type ProjectFileOK struct {
	Payload *models.ProjectFile
}

func (o *ProjectFileOK) Error() string {
	return fmt.Sprintf("[GET /projects/{project_id}/files/file][%d] projectFileOK  %+v", 200, o.Payload)
}

func (o *ProjectFileOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProjectFile)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectFileBadRequest creates a ProjectFileBadRequest with default headers values
func NewProjectFileBadRequest() *ProjectFileBadRequest {
	return &ProjectFileBadRequest{}
}

/*ProjectFileBadRequest handles this case with default header values.

Bad Request
*/
type ProjectFileBadRequest struct {
	Payload *models.Error
}

func (o *ProjectFileBadRequest) Error() string {
	return fmt.Sprintf("[GET /projects/{project_id}/files/file][%d] projectFileBadRequest  %+v", 400, o.Payload)
}

func (o *ProjectFileBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectFileNotFound creates a ProjectFileNotFound with default headers values
func NewProjectFileNotFound() *ProjectFileNotFound {
	return &ProjectFileNotFound{}
}

/*ProjectFileNotFound handles this case with default header values.

Not Found
*/
type ProjectFileNotFound struct {
	Payload *models.Error
}

func (o *ProjectFileNotFound) Error() string {
	return fmt.Sprintf("[GET /projects/{project_id}/files/file][%d] projectFileNotFound  %+v", 404, o.Payload)
}

func (o *ProjectFileNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
