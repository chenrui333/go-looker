// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/chenrui333/go-looker/models"
)

// CreateGitBranchReader is a Reader for the CreateGitBranch structure.
type CreateGitBranchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateGitBranchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateGitBranchOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateGitBranchBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateGitBranchNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateGitBranchConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewCreateGitBranchUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCreateGitBranchOK creates a CreateGitBranchOK with default headers values
func NewCreateGitBranchOK() *CreateGitBranchOK {
	return &CreateGitBranchOK{}
}

/*CreateGitBranchOK handles this case with default header values.

Git Branch
*/
type CreateGitBranchOK struct {
	Payload *models.GitBranch
}

func (o *CreateGitBranchOK) Error() string {
	return fmt.Sprintf("[POST /projects/{project_id}/git_branch][%d] createGitBranchOK  %+v", 200, o.Payload)
}

func (o *CreateGitBranchOK) GetPayload() *models.GitBranch {
	return o.Payload
}

func (o *CreateGitBranchOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GitBranch)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateGitBranchBadRequest creates a CreateGitBranchBadRequest with default headers values
func NewCreateGitBranchBadRequest() *CreateGitBranchBadRequest {
	return &CreateGitBranchBadRequest{}
}

/*CreateGitBranchBadRequest handles this case with default header values.

Bad Request
*/
type CreateGitBranchBadRequest struct {
	Payload *models.Error
}

func (o *CreateGitBranchBadRequest) Error() string {
	return fmt.Sprintf("[POST /projects/{project_id}/git_branch][%d] createGitBranchBadRequest  %+v", 400, o.Payload)
}

func (o *CreateGitBranchBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateGitBranchBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateGitBranchNotFound creates a CreateGitBranchNotFound with default headers values
func NewCreateGitBranchNotFound() *CreateGitBranchNotFound {
	return &CreateGitBranchNotFound{}
}

/*CreateGitBranchNotFound handles this case with default header values.

Not Found
*/
type CreateGitBranchNotFound struct {
	Payload *models.Error
}

func (o *CreateGitBranchNotFound) Error() string {
	return fmt.Sprintf("[POST /projects/{project_id}/git_branch][%d] createGitBranchNotFound  %+v", 404, o.Payload)
}

func (o *CreateGitBranchNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateGitBranchNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateGitBranchConflict creates a CreateGitBranchConflict with default headers values
func NewCreateGitBranchConflict() *CreateGitBranchConflict {
	return &CreateGitBranchConflict{}
}

/*CreateGitBranchConflict handles this case with default header values.

Resource Already Exists
*/
type CreateGitBranchConflict struct {
	Payload *models.Error
}

func (o *CreateGitBranchConflict) Error() string {
	return fmt.Sprintf("[POST /projects/{project_id}/git_branch][%d] createGitBranchConflict  %+v", 409, o.Payload)
}

func (o *CreateGitBranchConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateGitBranchConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateGitBranchUnprocessableEntity creates a CreateGitBranchUnprocessableEntity with default headers values
func NewCreateGitBranchUnprocessableEntity() *CreateGitBranchUnprocessableEntity {
	return &CreateGitBranchUnprocessableEntity{}
}

/*CreateGitBranchUnprocessableEntity handles this case with default header values.

Validation Error
*/
type CreateGitBranchUnprocessableEntity struct {
	Payload *models.ValidationError
}

func (o *CreateGitBranchUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /projects/{project_id}/git_branch][%d] createGitBranchUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *CreateGitBranchUnprocessableEntity) GetPayload() *models.ValidationError {
	return o.Payload
}

func (o *CreateGitBranchUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ValidationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
