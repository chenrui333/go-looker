// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/chenrui333/go-looker/models"
)

// UpdateGitBranchReader is a Reader for the UpdateGitBranch structure.
type UpdateGitBranchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateGitBranchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateGitBranchOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUpdateGitBranchBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUpdateGitBranchNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 422:
		result := NewUpdateGitBranchUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateGitBranchOK creates a UpdateGitBranchOK with default headers values
func NewUpdateGitBranchOK() *UpdateGitBranchOK {
	return &UpdateGitBranchOK{}
}

/*UpdateGitBranchOK handles this case with default header values.

Git Branch
*/
type UpdateGitBranchOK struct {
	Payload *models.GitBranch
}

func (o *UpdateGitBranchOK) Error() string {
	return fmt.Sprintf("[PUT /projects/{project_id}/git_branch][%d] updateGitBranchOK  %+v", 200, o.Payload)
}

func (o *UpdateGitBranchOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GitBranch)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateGitBranchBadRequest creates a UpdateGitBranchBadRequest with default headers values
func NewUpdateGitBranchBadRequest() *UpdateGitBranchBadRequest {
	return &UpdateGitBranchBadRequest{}
}

/*UpdateGitBranchBadRequest handles this case with default header values.

Bad Request
*/
type UpdateGitBranchBadRequest struct {
	Payload *models.Error
}

func (o *UpdateGitBranchBadRequest) Error() string {
	return fmt.Sprintf("[PUT /projects/{project_id}/git_branch][%d] updateGitBranchBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateGitBranchBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateGitBranchNotFound creates a UpdateGitBranchNotFound with default headers values
func NewUpdateGitBranchNotFound() *UpdateGitBranchNotFound {
	return &UpdateGitBranchNotFound{}
}

/*UpdateGitBranchNotFound handles this case with default header values.

Not Found
*/
type UpdateGitBranchNotFound struct {
	Payload *models.Error
}

func (o *UpdateGitBranchNotFound) Error() string {
	return fmt.Sprintf("[PUT /projects/{project_id}/git_branch][%d] updateGitBranchNotFound  %+v", 404, o.Payload)
}

func (o *UpdateGitBranchNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateGitBranchUnprocessableEntity creates a UpdateGitBranchUnprocessableEntity with default headers values
func NewUpdateGitBranchUnprocessableEntity() *UpdateGitBranchUnprocessableEntity {
	return &UpdateGitBranchUnprocessableEntity{}
}

/*UpdateGitBranchUnprocessableEntity handles this case with default header values.

Validation Error
*/
type UpdateGitBranchUnprocessableEntity struct {
	Payload *models.ValidationError
}

func (o *UpdateGitBranchUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /projects/{project_id}/git_branch][%d] updateGitBranchUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *UpdateGitBranchUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ValidationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
