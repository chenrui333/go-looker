// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/chenrui333/go-looker/models"
)

// GitBranchReader is a Reader for the GitBranch structure.
type GitBranchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GitBranchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGitBranchOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGitBranchBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGitBranchNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGitBranchOK creates a GitBranchOK with default headers values
func NewGitBranchOK() *GitBranchOK {
	return &GitBranchOK{}
}

/*GitBranchOK handles this case with default header values.

Git Branch
*/
type GitBranchOK struct {
	Payload *models.GitBranch
}

func (o *GitBranchOK) Error() string {
	return fmt.Sprintf("[GET /projects/{project_id}/git_branch][%d] gitBranchOK  %+v", 200, o.Payload)
}

func (o *GitBranchOK) GetPayload() *models.GitBranch {
	return o.Payload
}

func (o *GitBranchOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GitBranch)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGitBranchBadRequest creates a GitBranchBadRequest with default headers values
func NewGitBranchBadRequest() *GitBranchBadRequest {
	return &GitBranchBadRequest{}
}

/*GitBranchBadRequest handles this case with default header values.

Bad Request
*/
type GitBranchBadRequest struct {
	Payload *models.Error
}

func (o *GitBranchBadRequest) Error() string {
	return fmt.Sprintf("[GET /projects/{project_id}/git_branch][%d] gitBranchBadRequest  %+v", 400, o.Payload)
}

func (o *GitBranchBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GitBranchBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGitBranchNotFound creates a GitBranchNotFound with default headers values
func NewGitBranchNotFound() *GitBranchNotFound {
	return &GitBranchNotFound{}
}

/*GitBranchNotFound handles this case with default header values.

Not Found
*/
type GitBranchNotFound struct {
	Payload *models.Error
}

func (o *GitBranchNotFound) Error() string {
	return fmt.Sprintf("[GET /projects/{project_id}/git_branch][%d] gitBranchNotFound  %+v", 404, o.Payload)
}

func (o *GitBranchNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GitBranchNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
