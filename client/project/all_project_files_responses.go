// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/chenrui333/go-looker/models"
)

// AllProjectFilesReader is a Reader for the AllProjectFiles structure.
type AllProjectFilesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AllProjectFilesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAllProjectFilesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAllProjectFilesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAllProjectFilesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAllProjectFilesOK creates a AllProjectFilesOK with default headers values
func NewAllProjectFilesOK() *AllProjectFilesOK {
	return &AllProjectFilesOK{}
}

/*AllProjectFilesOK handles this case with default header values.

Project File
*/
type AllProjectFilesOK struct {
	Payload []*models.ProjectFile
}

func (o *AllProjectFilesOK) Error() string {
	return fmt.Sprintf("[GET /projects/{project_id}/files][%d] allProjectFilesOK  %+v", 200, o.Payload)
}

func (o *AllProjectFilesOK) GetPayload() []*models.ProjectFile {
	return o.Payload
}

func (o *AllProjectFilesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAllProjectFilesBadRequest creates a AllProjectFilesBadRequest with default headers values
func NewAllProjectFilesBadRequest() *AllProjectFilesBadRequest {
	return &AllProjectFilesBadRequest{}
}

/*AllProjectFilesBadRequest handles this case with default header values.

Bad Request
*/
type AllProjectFilesBadRequest struct {
	Payload *models.Error
}

func (o *AllProjectFilesBadRequest) Error() string {
	return fmt.Sprintf("[GET /projects/{project_id}/files][%d] allProjectFilesBadRequest  %+v", 400, o.Payload)
}

func (o *AllProjectFilesBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *AllProjectFilesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAllProjectFilesNotFound creates a AllProjectFilesNotFound with default headers values
func NewAllProjectFilesNotFound() *AllProjectFilesNotFound {
	return &AllProjectFilesNotFound{}
}

/*AllProjectFilesNotFound handles this case with default header values.

Not Found
*/
type AllProjectFilesNotFound struct {
	Payload *models.Error
}

func (o *AllProjectFilesNotFound) Error() string {
	return fmt.Sprintf("[GET /projects/{project_id}/files][%d] allProjectFilesNotFound  %+v", 404, o.Payload)
}

func (o *AllProjectFilesNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *AllProjectFilesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
