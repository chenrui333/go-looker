// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/chenrui333/go-looker/models"
)

// AllLookmlTestsReader is a Reader for the AllLookmlTests structure.
type AllLookmlTestsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AllLookmlTestsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAllLookmlTestsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAllLookmlTestsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAllLookmlTestsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAllLookmlTestsOK creates a AllLookmlTestsOK with default headers values
func NewAllLookmlTestsOK() *AllLookmlTestsOK {
	return &AllLookmlTestsOK{}
}

/*AllLookmlTestsOK handles this case with default header values.

LookML Test
*/
type AllLookmlTestsOK struct {
	Payload []*models.LookmlTest
}

func (o *AllLookmlTestsOK) Error() string {
	return fmt.Sprintf("[GET /projects/{project_id}/lookml_tests][%d] allLookmlTestsOK  %+v", 200, o.Payload)
}

func (o *AllLookmlTestsOK) GetPayload() []*models.LookmlTest {
	return o.Payload
}

func (o *AllLookmlTestsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAllLookmlTestsBadRequest creates a AllLookmlTestsBadRequest with default headers values
func NewAllLookmlTestsBadRequest() *AllLookmlTestsBadRequest {
	return &AllLookmlTestsBadRequest{}
}

/*AllLookmlTestsBadRequest handles this case with default header values.

Bad Request
*/
type AllLookmlTestsBadRequest struct {
	Payload *models.Error
}

func (o *AllLookmlTestsBadRequest) Error() string {
	return fmt.Sprintf("[GET /projects/{project_id}/lookml_tests][%d] allLookmlTestsBadRequest  %+v", 400, o.Payload)
}

func (o *AllLookmlTestsBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *AllLookmlTestsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAllLookmlTestsNotFound creates a AllLookmlTestsNotFound with default headers values
func NewAllLookmlTestsNotFound() *AllLookmlTestsNotFound {
	return &AllLookmlTestsNotFound{}
}

/*AllLookmlTestsNotFound handles this case with default header values.

Not Found
*/
type AllLookmlTestsNotFound struct {
	Payload *models.Error
}

func (o *AllLookmlTestsNotFound) Error() string {
	return fmt.Sprintf("[GET /projects/{project_id}/lookml_tests][%d] allLookmlTestsNotFound  %+v", 404, o.Payload)
}

func (o *AllLookmlTestsNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *AllLookmlTestsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
