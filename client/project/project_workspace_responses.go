// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/chenrui333/go-looker/models"
)

// ProjectWorkspaceReader is a Reader for the ProjectWorkspace structure.
type ProjectWorkspaceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ProjectWorkspaceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewProjectWorkspaceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewProjectWorkspaceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewProjectWorkspaceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewProjectWorkspaceOK creates a ProjectWorkspaceOK with default headers values
func NewProjectWorkspaceOK() *ProjectWorkspaceOK {
	return &ProjectWorkspaceOK{}
}

/*ProjectWorkspaceOK handles this case with default header values.

Project Workspace
*/
type ProjectWorkspaceOK struct {
	Payload *models.ProjectWorkspace
}

func (o *ProjectWorkspaceOK) Error() string {
	return fmt.Sprintf("[GET /projects/{project_id}/current_workspace][%d] projectWorkspaceOK  %+v", 200, o.Payload)
}

func (o *ProjectWorkspaceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProjectWorkspace)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectWorkspaceBadRequest creates a ProjectWorkspaceBadRequest with default headers values
func NewProjectWorkspaceBadRequest() *ProjectWorkspaceBadRequest {
	return &ProjectWorkspaceBadRequest{}
}

/*ProjectWorkspaceBadRequest handles this case with default header values.

Bad Request
*/
type ProjectWorkspaceBadRequest struct {
	Payload *models.Error
}

func (o *ProjectWorkspaceBadRequest) Error() string {
	return fmt.Sprintf("[GET /projects/{project_id}/current_workspace][%d] projectWorkspaceBadRequest  %+v", 400, o.Payload)
}

func (o *ProjectWorkspaceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectWorkspaceNotFound creates a ProjectWorkspaceNotFound with default headers values
func NewProjectWorkspaceNotFound() *ProjectWorkspaceNotFound {
	return &ProjectWorkspaceNotFound{}
}

/*ProjectWorkspaceNotFound handles this case with default header values.

Not Found
*/
type ProjectWorkspaceNotFound struct {
	Payload *models.Error
}

func (o *ProjectWorkspaceNotFound) Error() string {
	return fmt.Sprintf("[GET /projects/{project_id}/current_workspace][%d] projectWorkspaceNotFound  %+v", 404, o.Payload)
}

func (o *ProjectWorkspaceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
