// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDeleteRepositoryCredentialParams creates a new DeleteRepositoryCredentialParams object
// with the default values initialized.
func NewDeleteRepositoryCredentialParams() *DeleteRepositoryCredentialParams {
	var ()
	return &DeleteRepositoryCredentialParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteRepositoryCredentialParamsWithTimeout creates a new DeleteRepositoryCredentialParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteRepositoryCredentialParamsWithTimeout(timeout time.Duration) *DeleteRepositoryCredentialParams {
	var ()
	return &DeleteRepositoryCredentialParams{

		timeout: timeout,
	}
}

// NewDeleteRepositoryCredentialParamsWithContext creates a new DeleteRepositoryCredentialParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteRepositoryCredentialParamsWithContext(ctx context.Context) *DeleteRepositoryCredentialParams {
	var ()
	return &DeleteRepositoryCredentialParams{

		Context: ctx,
	}
}

// NewDeleteRepositoryCredentialParamsWithHTTPClient creates a new DeleteRepositoryCredentialParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteRepositoryCredentialParamsWithHTTPClient(client *http.Client) *DeleteRepositoryCredentialParams {
	var ()
	return &DeleteRepositoryCredentialParams{
		HTTPClient: client,
	}
}

/*DeleteRepositoryCredentialParams contains all the parameters to send to the API endpoint
for the delete repository credential operation typically these are written to a http.Request
*/
type DeleteRepositoryCredentialParams struct {

	/*CredentialID
	  Credential Id

	*/
	CredentialID string
	/*RootProjectID
	  Root Project Id

	*/
	RootProjectID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete repository credential params
func (o *DeleteRepositoryCredentialParams) WithTimeout(timeout time.Duration) *DeleteRepositoryCredentialParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete repository credential params
func (o *DeleteRepositoryCredentialParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete repository credential params
func (o *DeleteRepositoryCredentialParams) WithContext(ctx context.Context) *DeleteRepositoryCredentialParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete repository credential params
func (o *DeleteRepositoryCredentialParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete repository credential params
func (o *DeleteRepositoryCredentialParams) WithHTTPClient(client *http.Client) *DeleteRepositoryCredentialParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete repository credential params
func (o *DeleteRepositoryCredentialParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCredentialID adds the credentialID to the delete repository credential params
func (o *DeleteRepositoryCredentialParams) WithCredentialID(credentialID string) *DeleteRepositoryCredentialParams {
	o.SetCredentialID(credentialID)
	return o
}

// SetCredentialID adds the credentialId to the delete repository credential params
func (o *DeleteRepositoryCredentialParams) SetCredentialID(credentialID string) {
	o.CredentialID = credentialID
}

// WithRootProjectID adds the rootProjectID to the delete repository credential params
func (o *DeleteRepositoryCredentialParams) WithRootProjectID(rootProjectID string) *DeleteRepositoryCredentialParams {
	o.SetRootProjectID(rootProjectID)
	return o
}

// SetRootProjectID adds the rootProjectId to the delete repository credential params
func (o *DeleteRepositoryCredentialParams) SetRootProjectID(rootProjectID string) {
	o.RootProjectID = rootProjectID
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteRepositoryCredentialParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param credential_id
	if err := r.SetPathParam("credential_id", o.CredentialID); err != nil {
		return err
	}

	// path param root_project_id
	if err := r.SetPathParam("root_project_id", o.RootProjectID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
