// Code generated by go-swagger; DO NOT EDIT.

package running_queries

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new running queries API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for running queries API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AllRunningQueries gets all running queries

Get information about all running queries.

*/
func (a *Client) AllRunningQueries(params *AllRunningQueriesParams) (*AllRunningQueriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAllRunningQueriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "all_running_queries",
		Method:             "GET",
		PathPattern:        "/running_queries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AllRunningQueriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AllRunningQueriesOK), nil

}

/*
KillQuery kills running query

Kill a query with a specific query_task_id.

*/
func (a *Client) KillQuery(params *KillQueryParams) (*KillQueryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKillQueryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "kill_query",
		Method:             "DELETE",
		PathPattern:        "/running_queries/{query_task_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KillQueryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*KillQueryNoContent), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
