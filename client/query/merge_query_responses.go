// Code generated by go-swagger; DO NOT EDIT.

package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/chenrui333/go-looker/models"
)

// MergeQueryReader is a Reader for the MergeQuery structure.
type MergeQueryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *MergeQueryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewMergeQueryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewMergeQueryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewMergeQueryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewMergeQueryOK creates a MergeQueryOK with default headers values
func NewMergeQueryOK() *MergeQueryOK {
	return &MergeQueryOK{}
}

/*MergeQueryOK handles this case with default header values.

Merge Query
*/
type MergeQueryOK struct {
	Payload *models.MergeQuery
}

func (o *MergeQueryOK) Error() string {
	return fmt.Sprintf("[GET /merge_queries/{merge_query_id}][%d] mergeQueryOK  %+v", 200, o.Payload)
}

func (o *MergeQueryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MergeQuery)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMergeQueryBadRequest creates a MergeQueryBadRequest with default headers values
func NewMergeQueryBadRequest() *MergeQueryBadRequest {
	return &MergeQueryBadRequest{}
}

/*MergeQueryBadRequest handles this case with default header values.

Bad Request
*/
type MergeQueryBadRequest struct {
	Payload *models.Error
}

func (o *MergeQueryBadRequest) Error() string {
	return fmt.Sprintf("[GET /merge_queries/{merge_query_id}][%d] mergeQueryBadRequest  %+v", 400, o.Payload)
}

func (o *MergeQueryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMergeQueryNotFound creates a MergeQueryNotFound with default headers values
func NewMergeQueryNotFound() *MergeQueryNotFound {
	return &MergeQueryNotFound{}
}

/*MergeQueryNotFound handles this case with default header values.

Not Found
*/
type MergeQueryNotFound struct {
	Payload *models.Error
}

func (o *MergeQueryNotFound) Error() string {
	return fmt.Sprintf("[GET /merge_queries/{merge_query_id}][%d] mergeQueryNotFound  %+v", 404, o.Payload)
}

func (o *MergeQueryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
