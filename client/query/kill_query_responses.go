// Code generated by go-swagger; DO NOT EDIT.

package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/chenrui333/go-looker/models"
)

// KillQueryReader is a Reader for the KillQuery structure.
type KillQueryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *KillQueryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewKillQueryNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewKillQueryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewKillQueryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewKillQueryUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewKillQueryNoContent creates a KillQueryNoContent with default headers values
func NewKillQueryNoContent() *KillQueryNoContent {
	return &KillQueryNoContent{}
}

/*KillQueryNoContent handles this case with default header values.

Query successfully killed.
*/
type KillQueryNoContent struct {
	Payload string
}

func (o *KillQueryNoContent) Error() string {
	return fmt.Sprintf("[DELETE /running_queries/{query_task_id}][%d] killQueryNoContent  %+v", 204, o.Payload)
}

func (o *KillQueryNoContent) GetPayload() string {
	return o.Payload
}

func (o *KillQueryNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewKillQueryBadRequest creates a KillQueryBadRequest with default headers values
func NewKillQueryBadRequest() *KillQueryBadRequest {
	return &KillQueryBadRequest{}
}

/*KillQueryBadRequest handles this case with default header values.

Bad Request
*/
type KillQueryBadRequest struct {
	Payload *models.Error
}

func (o *KillQueryBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /running_queries/{query_task_id}][%d] killQueryBadRequest  %+v", 400, o.Payload)
}

func (o *KillQueryBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *KillQueryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewKillQueryNotFound creates a KillQueryNotFound with default headers values
func NewKillQueryNotFound() *KillQueryNotFound {
	return &KillQueryNotFound{}
}

/*KillQueryNotFound handles this case with default header values.

Not Found
*/
type KillQueryNotFound struct {
	Payload *models.Error
}

func (o *KillQueryNotFound) Error() string {
	return fmt.Sprintf("[DELETE /running_queries/{query_task_id}][%d] killQueryNotFound  %+v", 404, o.Payload)
}

func (o *KillQueryNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *KillQueryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewKillQueryUnprocessableEntity creates a KillQueryUnprocessableEntity with default headers values
func NewKillQueryUnprocessableEntity() *KillQueryUnprocessableEntity {
	return &KillQueryUnprocessableEntity{}
}

/*KillQueryUnprocessableEntity handles this case with default header values.

Validation Error
*/
type KillQueryUnprocessableEntity struct {
	Payload *models.ValidationError
}

func (o *KillQueryUnprocessableEntity) Error() string {
	return fmt.Sprintf("[DELETE /running_queries/{query_task_id}][%d] killQueryUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *KillQueryUnprocessableEntity) GetPayload() *models.ValidationError {
	return o.Payload
}

func (o *KillQueryUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ValidationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
