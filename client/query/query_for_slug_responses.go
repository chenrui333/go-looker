// Code generated by go-swagger; DO NOT EDIT.

package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/chenrui333/go-looker/models"
)

// QueryForSlugReader is a Reader for the QueryForSlug structure.
type QueryForSlugReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *QueryForSlugReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewQueryForSlugOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewQueryForSlugBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewQueryForSlugNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewQueryForSlugOK creates a QueryForSlugOK with default headers values
func NewQueryForSlugOK() *QueryForSlugOK {
	return &QueryForSlugOK{}
}

/*QueryForSlugOK handles this case with default header values.

Query
*/
type QueryForSlugOK struct {
	Payload *models.Query
}

func (o *QueryForSlugOK) Error() string {
	return fmt.Sprintf("[GET /queries/slug/{slug}][%d] queryForSlugOK  %+v", 200, o.Payload)
}

func (o *QueryForSlugOK) GetPayload() *models.Query {
	return o.Payload
}

func (o *QueryForSlugOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Query)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryForSlugBadRequest creates a QueryForSlugBadRequest with default headers values
func NewQueryForSlugBadRequest() *QueryForSlugBadRequest {
	return &QueryForSlugBadRequest{}
}

/*QueryForSlugBadRequest handles this case with default header values.

Bad Request
*/
type QueryForSlugBadRequest struct {
	Payload *models.Error
}

func (o *QueryForSlugBadRequest) Error() string {
	return fmt.Sprintf("[GET /queries/slug/{slug}][%d] queryForSlugBadRequest  %+v", 400, o.Payload)
}

func (o *QueryForSlugBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *QueryForSlugBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryForSlugNotFound creates a QueryForSlugNotFound with default headers values
func NewQueryForSlugNotFound() *QueryForSlugNotFound {
	return &QueryForSlugNotFound{}
}

/*QueryForSlugNotFound handles this case with default header values.

Not Found
*/
type QueryForSlugNotFound struct {
	Payload *models.Error
}

func (o *QueryForSlugNotFound) Error() string {
	return fmt.Sprintf("[GET /queries/slug/{slug}][%d] queryForSlugNotFound  %+v", 404, o.Payload)
}

func (o *QueryForSlugNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *QueryForSlugNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
