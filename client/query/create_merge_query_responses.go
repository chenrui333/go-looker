// Code generated by go-swagger; DO NOT EDIT.

package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/chenrui333/go-looker/models"
)

// CreateMergeQueryReader is a Reader for the CreateMergeQuery structure.
type CreateMergeQueryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateMergeQueryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewCreateMergeQueryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewCreateMergeQueryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewCreateMergeQueryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewCreateMergeQueryConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 422:
		result := NewCreateMergeQueryUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCreateMergeQueryOK creates a CreateMergeQueryOK with default headers values
func NewCreateMergeQueryOK() *CreateMergeQueryOK {
	return &CreateMergeQueryOK{}
}

/*CreateMergeQueryOK handles this case with default header values.

Merge Query
*/
type CreateMergeQueryOK struct {
	Payload *models.MergeQuery
}

func (o *CreateMergeQueryOK) Error() string {
	return fmt.Sprintf("[POST /merge_queries][%d] createMergeQueryOK  %+v", 200, o.Payload)
}

func (o *CreateMergeQueryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MergeQuery)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateMergeQueryBadRequest creates a CreateMergeQueryBadRequest with default headers values
func NewCreateMergeQueryBadRequest() *CreateMergeQueryBadRequest {
	return &CreateMergeQueryBadRequest{}
}

/*CreateMergeQueryBadRequest handles this case with default header values.

Bad Request
*/
type CreateMergeQueryBadRequest struct {
	Payload *models.Error
}

func (o *CreateMergeQueryBadRequest) Error() string {
	return fmt.Sprintf("[POST /merge_queries][%d] createMergeQueryBadRequest  %+v", 400, o.Payload)
}

func (o *CreateMergeQueryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateMergeQueryNotFound creates a CreateMergeQueryNotFound with default headers values
func NewCreateMergeQueryNotFound() *CreateMergeQueryNotFound {
	return &CreateMergeQueryNotFound{}
}

/*CreateMergeQueryNotFound handles this case with default header values.

Not Found
*/
type CreateMergeQueryNotFound struct {
	Payload *models.Error
}

func (o *CreateMergeQueryNotFound) Error() string {
	return fmt.Sprintf("[POST /merge_queries][%d] createMergeQueryNotFound  %+v", 404, o.Payload)
}

func (o *CreateMergeQueryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateMergeQueryConflict creates a CreateMergeQueryConflict with default headers values
func NewCreateMergeQueryConflict() *CreateMergeQueryConflict {
	return &CreateMergeQueryConflict{}
}

/*CreateMergeQueryConflict handles this case with default header values.

Resource Already Exists
*/
type CreateMergeQueryConflict struct {
	Payload *models.Error
}

func (o *CreateMergeQueryConflict) Error() string {
	return fmt.Sprintf("[POST /merge_queries][%d] createMergeQueryConflict  %+v", 409, o.Payload)
}

func (o *CreateMergeQueryConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateMergeQueryUnprocessableEntity creates a CreateMergeQueryUnprocessableEntity with default headers values
func NewCreateMergeQueryUnprocessableEntity() *CreateMergeQueryUnprocessableEntity {
	return &CreateMergeQueryUnprocessableEntity{}
}

/*CreateMergeQueryUnprocessableEntity handles this case with default header values.

Validation Error
*/
type CreateMergeQueryUnprocessableEntity struct {
	Payload *models.ValidationError
}

func (o *CreateMergeQueryUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /merge_queries][%d] createMergeQueryUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *CreateMergeQueryUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ValidationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
