// Code generated by go-swagger; DO NOT EDIT.

package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewRunURLEncodedQueryParams creates a new RunURLEncodedQueryParams object
// with the default values initialized.
func NewRunURLEncodedQueryParams() *RunURLEncodedQueryParams {
	var ()
	return &RunURLEncodedQueryParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewRunURLEncodedQueryParamsWithTimeout creates a new RunURLEncodedQueryParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRunURLEncodedQueryParamsWithTimeout(timeout time.Duration) *RunURLEncodedQueryParams {
	var ()
	return &RunURLEncodedQueryParams{

		timeout: timeout,
	}
}

// NewRunURLEncodedQueryParamsWithContext creates a new RunURLEncodedQueryParams object
// with the default values initialized, and the ability to set a context for a request
func NewRunURLEncodedQueryParamsWithContext(ctx context.Context) *RunURLEncodedQueryParams {
	var ()
	return &RunURLEncodedQueryParams{

		Context: ctx,
	}
}

// NewRunURLEncodedQueryParamsWithHTTPClient creates a new RunURLEncodedQueryParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRunURLEncodedQueryParamsWithHTTPClient(client *http.Client) *RunURLEncodedQueryParams {
	var ()
	return &RunURLEncodedQueryParams{
		HTTPClient: client,
	}
}

/*RunURLEncodedQueryParams contains all the parameters to send to the API endpoint
for the run url encoded query operation typically these are written to a http.Request
*/
type RunURLEncodedQueryParams struct {

	/*ModelName
	  Model name

	*/
	ModelName string
	/*ResultFormat
	  Format of result

	*/
	ResultFormat string
	/*ViewName
	  View name

	*/
	ViewName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the run url encoded query params
func (o *RunURLEncodedQueryParams) WithTimeout(timeout time.Duration) *RunURLEncodedQueryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the run url encoded query params
func (o *RunURLEncodedQueryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the run url encoded query params
func (o *RunURLEncodedQueryParams) WithContext(ctx context.Context) *RunURLEncodedQueryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the run url encoded query params
func (o *RunURLEncodedQueryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the run url encoded query params
func (o *RunURLEncodedQueryParams) WithHTTPClient(client *http.Client) *RunURLEncodedQueryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the run url encoded query params
func (o *RunURLEncodedQueryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithModelName adds the modelName to the run url encoded query params
func (o *RunURLEncodedQueryParams) WithModelName(modelName string) *RunURLEncodedQueryParams {
	o.SetModelName(modelName)
	return o
}

// SetModelName adds the modelName to the run url encoded query params
func (o *RunURLEncodedQueryParams) SetModelName(modelName string) {
	o.ModelName = modelName
}

// WithResultFormat adds the resultFormat to the run url encoded query params
func (o *RunURLEncodedQueryParams) WithResultFormat(resultFormat string) *RunURLEncodedQueryParams {
	o.SetResultFormat(resultFormat)
	return o
}

// SetResultFormat adds the resultFormat to the run url encoded query params
func (o *RunURLEncodedQueryParams) SetResultFormat(resultFormat string) {
	o.ResultFormat = resultFormat
}

// WithViewName adds the viewName to the run url encoded query params
func (o *RunURLEncodedQueryParams) WithViewName(viewName string) *RunURLEncodedQueryParams {
	o.SetViewName(viewName)
	return o
}

// SetViewName adds the viewName to the run url encoded query params
func (o *RunURLEncodedQueryParams) SetViewName(viewName string) {
	o.ViewName = viewName
}

// WriteToRequest writes these params to a swagger request
func (o *RunURLEncodedQueryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param model_name
	if err := r.SetPathParam("model_name", o.ModelName); err != nil {
		return err
	}

	// path param result_format
	if err := r.SetPathParam("result_format", o.ResultFormat); err != nil {
		return err
	}

	// path param view_name
	if err := r.SetPathParam("view_name", o.ViewName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
