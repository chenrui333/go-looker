// Code generated by go-swagger; DO NOT EDIT.

package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/chenrui333/go-looker/models"
)

// QueryTaskMultiResultsReader is a Reader for the QueryTaskMultiResults structure.
type QueryTaskMultiResultsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *QueryTaskMultiResultsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewQueryTaskMultiResultsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewQueryTaskMultiResultsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewQueryTaskMultiResultsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewQueryTaskMultiResultsOK creates a QueryTaskMultiResultsOK with default headers values
func NewQueryTaskMultiResultsOK() *QueryTaskMultiResultsOK {
	return &QueryTaskMultiResultsOK{}
}

/*QueryTaskMultiResultsOK handles this case with default header values.

Multiple query results
*/
type QueryTaskMultiResultsOK struct {
	Payload map[string]string
}

func (o *QueryTaskMultiResultsOK) Error() string {
	return fmt.Sprintf("[GET /query_tasks/multi_results][%d] queryTaskMultiResultsOK  %+v", 200, o.Payload)
}

func (o *QueryTaskMultiResultsOK) GetPayload() map[string]string {
	return o.Payload
}

func (o *QueryTaskMultiResultsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryTaskMultiResultsBadRequest creates a QueryTaskMultiResultsBadRequest with default headers values
func NewQueryTaskMultiResultsBadRequest() *QueryTaskMultiResultsBadRequest {
	return &QueryTaskMultiResultsBadRequest{}
}

/*QueryTaskMultiResultsBadRequest handles this case with default header values.

Bad Request
*/
type QueryTaskMultiResultsBadRequest struct {
	Payload *models.Error
}

func (o *QueryTaskMultiResultsBadRequest) Error() string {
	return fmt.Sprintf("[GET /query_tasks/multi_results][%d] queryTaskMultiResultsBadRequest  %+v", 400, o.Payload)
}

func (o *QueryTaskMultiResultsBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *QueryTaskMultiResultsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryTaskMultiResultsNotFound creates a QueryTaskMultiResultsNotFound with default headers values
func NewQueryTaskMultiResultsNotFound() *QueryTaskMultiResultsNotFound {
	return &QueryTaskMultiResultsNotFound{}
}

/*QueryTaskMultiResultsNotFound handles this case with default header values.

Not Found
*/
type QueryTaskMultiResultsNotFound struct {
	Payload *models.Error
}

func (o *QueryTaskMultiResultsNotFound) Error() string {
	return fmt.Sprintf("[GET /query_tasks/multi_results][%d] queryTaskMultiResultsNotFound  %+v", 404, o.Payload)
}

func (o *QueryTaskMultiResultsNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *QueryTaskMultiResultsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
