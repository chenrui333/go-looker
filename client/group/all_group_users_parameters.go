// Code generated by go-swagger; DO NOT EDIT.

package group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewAllGroupUsersParams creates a new AllGroupUsersParams object
// with the default values initialized.
func NewAllGroupUsersParams() *AllGroupUsersParams {
	var ()
	return &AllGroupUsersParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAllGroupUsersParamsWithTimeout creates a new AllGroupUsersParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAllGroupUsersParamsWithTimeout(timeout time.Duration) *AllGroupUsersParams {
	var ()
	return &AllGroupUsersParams{

		timeout: timeout,
	}
}

// NewAllGroupUsersParamsWithContext creates a new AllGroupUsersParams object
// with the default values initialized, and the ability to set a context for a request
func NewAllGroupUsersParamsWithContext(ctx context.Context) *AllGroupUsersParams {
	var ()
	return &AllGroupUsersParams{

		Context: ctx,
	}
}

// NewAllGroupUsersParamsWithHTTPClient creates a new AllGroupUsersParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAllGroupUsersParamsWithHTTPClient(client *http.Client) *AllGroupUsersParams {
	var ()
	return &AllGroupUsersParams{
		HTTPClient: client,
	}
}

/*AllGroupUsersParams contains all the parameters to send to the API endpoint
for the all group users operation typically these are written to a http.Request
*/
type AllGroupUsersParams struct {

	/*Fields
	  Requested fields.

	*/
	Fields *string
	/*GroupID
	  Id of group

	*/
	GroupID int64
	/*Page
	  Requested page.

	*/
	Page *int64
	/*PerPage
	  Results per page.

	*/
	PerPage *int64
	/*Sorts
	  Fields to sort by.

	*/
	Sorts *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the all group users params
func (o *AllGroupUsersParams) WithTimeout(timeout time.Duration) *AllGroupUsersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the all group users params
func (o *AllGroupUsersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the all group users params
func (o *AllGroupUsersParams) WithContext(ctx context.Context) *AllGroupUsersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the all group users params
func (o *AllGroupUsersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the all group users params
func (o *AllGroupUsersParams) WithHTTPClient(client *http.Client) *AllGroupUsersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the all group users params
func (o *AllGroupUsersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFields adds the fields to the all group users params
func (o *AllGroupUsersParams) WithFields(fields *string) *AllGroupUsersParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the all group users params
func (o *AllGroupUsersParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithGroupID adds the groupID to the all group users params
func (o *AllGroupUsersParams) WithGroupID(groupID int64) *AllGroupUsersParams {
	o.SetGroupID(groupID)
	return o
}

// SetGroupID adds the groupId to the all group users params
func (o *AllGroupUsersParams) SetGroupID(groupID int64) {
	o.GroupID = groupID
}

// WithPage adds the page to the all group users params
func (o *AllGroupUsersParams) WithPage(page *int64) *AllGroupUsersParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the all group users params
func (o *AllGroupUsersParams) SetPage(page *int64) {
	o.Page = page
}

// WithPerPage adds the perPage to the all group users params
func (o *AllGroupUsersParams) WithPerPage(perPage *int64) *AllGroupUsersParams {
	o.SetPerPage(perPage)
	return o
}

// SetPerPage adds the perPage to the all group users params
func (o *AllGroupUsersParams) SetPerPage(perPage *int64) {
	o.PerPage = perPage
}

// WithSorts adds the sorts to the all group users params
func (o *AllGroupUsersParams) WithSorts(sorts *string) *AllGroupUsersParams {
	o.SetSorts(sorts)
	return o
}

// SetSorts adds the sorts to the all group users params
func (o *AllGroupUsersParams) SetSorts(sorts *string) {
	o.Sorts = sorts
}

// WriteToRequest writes these params to a swagger request
func (o *AllGroupUsersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	// path param group_id
	if err := r.SetPathParam("group_id", swag.FormatInt64(o.GroupID)); err != nil {
		return err
	}

	if o.Page != nil {

		// query param page
		var qrPage int64
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.PerPage != nil {

		// query param per_page
		var qrPerPage int64
		if o.PerPage != nil {
			qrPerPage = *o.PerPage
		}
		qPerPage := swag.FormatInt64(qrPerPage)
		if qPerPage != "" {
			if err := r.SetQueryParam("per_page", qPerPage); err != nil {
				return err
			}
		}

	}

	if o.Sorts != nil {

		// query param sorts
		var qrSorts string
		if o.Sorts != nil {
			qrSorts = *o.Sorts
		}
		qSorts := qrSorts
		if qSorts != "" {
			if err := r.SetQueryParam("sorts", qSorts); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
