// Code generated by go-swagger; DO NOT EDIT.

package group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/chenrui333/go-looker/models"
)

// AllGroupGroupsReader is a Reader for the AllGroupGroups structure.
type AllGroupGroupsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AllGroupGroupsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewAllGroupGroupsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewAllGroupGroupsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewAllGroupGroupsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAllGroupGroupsOK creates a AllGroupGroupsOK with default headers values
func NewAllGroupGroupsOK() *AllGroupGroupsOK {
	return &AllGroupGroupsOK{}
}

/*AllGroupGroupsOK handles this case with default header values.

All groups in group.
*/
type AllGroupGroupsOK struct {
	Payload []*models.Group
}

func (o *AllGroupGroupsOK) Error() string {
	return fmt.Sprintf("[GET /groups/{group_id}/groups][%d] allGroupGroupsOK  %+v", 200, o.Payload)
}

func (o *AllGroupGroupsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAllGroupGroupsBadRequest creates a AllGroupGroupsBadRequest with default headers values
func NewAllGroupGroupsBadRequest() *AllGroupGroupsBadRequest {
	return &AllGroupGroupsBadRequest{}
}

/*AllGroupGroupsBadRequest handles this case with default header values.

Bad Request
*/
type AllGroupGroupsBadRequest struct {
	Payload *models.Error
}

func (o *AllGroupGroupsBadRequest) Error() string {
	return fmt.Sprintf("[GET /groups/{group_id}/groups][%d] allGroupGroupsBadRequest  %+v", 400, o.Payload)
}

func (o *AllGroupGroupsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAllGroupGroupsNotFound creates a AllGroupGroupsNotFound with default headers values
func NewAllGroupGroupsNotFound() *AllGroupGroupsNotFound {
	return &AllGroupGroupsNotFound{}
}

/*AllGroupGroupsNotFound handles this case with default header values.

Not Found
*/
type AllGroupGroupsNotFound struct {
	Payload *models.Error
}

func (o *AllGroupGroupsNotFound) Error() string {
	return fmt.Sprintf("[GET /groups/{group_id}/groups][%d] allGroupGroupsNotFound  %+v", 404, o.Payload)
}

func (o *AllGroupGroupsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
