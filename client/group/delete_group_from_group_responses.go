// Code generated by go-swagger; DO NOT EDIT.

package group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/chenrui333/go-looker/models"
)

// DeleteGroupFromGroupReader is a Reader for the DeleteGroupFromGroup structure.
type DeleteGroupFromGroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteGroupFromGroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewDeleteGroupFromGroupNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewDeleteGroupFromGroupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewDeleteGroupFromGroupForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDeleteGroupFromGroupNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteGroupFromGroupNoContent creates a DeleteGroupFromGroupNoContent with default headers values
func NewDeleteGroupFromGroupNoContent() *DeleteGroupFromGroupNoContent {
	return &DeleteGroupFromGroupNoContent{}
}

/*DeleteGroupFromGroupNoContent handles this case with default header values.

Group successfully deleted
*/
type DeleteGroupFromGroupNoContent struct {
}

func (o *DeleteGroupFromGroupNoContent) Error() string {
	return fmt.Sprintf("[DELETE /groups/{group_id}/groups/{deleting_group_id}][%d] deleteGroupFromGroupNoContent ", 204)
}

func (o *DeleteGroupFromGroupNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteGroupFromGroupBadRequest creates a DeleteGroupFromGroupBadRequest with default headers values
func NewDeleteGroupFromGroupBadRequest() *DeleteGroupFromGroupBadRequest {
	return &DeleteGroupFromGroupBadRequest{}
}

/*DeleteGroupFromGroupBadRequest handles this case with default header values.

Bad Request
*/
type DeleteGroupFromGroupBadRequest struct {
	Payload *models.Error
}

func (o *DeleteGroupFromGroupBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /groups/{group_id}/groups/{deleting_group_id}][%d] deleteGroupFromGroupBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteGroupFromGroupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteGroupFromGroupForbidden creates a DeleteGroupFromGroupForbidden with default headers values
func NewDeleteGroupFromGroupForbidden() *DeleteGroupFromGroupForbidden {
	return &DeleteGroupFromGroupForbidden{}
}

/*DeleteGroupFromGroupForbidden handles this case with default header values.

Permission Denied
*/
type DeleteGroupFromGroupForbidden struct {
	Payload *models.Error
}

func (o *DeleteGroupFromGroupForbidden) Error() string {
	return fmt.Sprintf("[DELETE /groups/{group_id}/groups/{deleting_group_id}][%d] deleteGroupFromGroupForbidden  %+v", 403, o.Payload)
}

func (o *DeleteGroupFromGroupForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteGroupFromGroupNotFound creates a DeleteGroupFromGroupNotFound with default headers values
func NewDeleteGroupFromGroupNotFound() *DeleteGroupFromGroupNotFound {
	return &DeleteGroupFromGroupNotFound{}
}

/*DeleteGroupFromGroupNotFound handles this case with default header values.

Not Found
*/
type DeleteGroupFromGroupNotFound struct {
	Payload *models.Error
}

func (o *DeleteGroupFromGroupNotFound) Error() string {
	return fmt.Sprintf("[DELETE /groups/{group_id}/groups/{deleting_group_id}][%d] deleteGroupFromGroupNotFound  %+v", 404, o.Payload)
}

func (o *DeleteGroupFromGroupNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
