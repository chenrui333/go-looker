// Code generated by go-swagger; DO NOT EDIT.

package group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/chenrui333/go-looker/models"
)

// DeleteUserAttributeGroupValueReader is a Reader for the DeleteUserAttributeGroupValue structure.
type DeleteUserAttributeGroupValueReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteUserAttributeGroupValueReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewDeleteUserAttributeGroupValueNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewDeleteUserAttributeGroupValueBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDeleteUserAttributeGroupValueNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteUserAttributeGroupValueNoContent creates a DeleteUserAttributeGroupValueNoContent with default headers values
func NewDeleteUserAttributeGroupValueNoContent() *DeleteUserAttributeGroupValueNoContent {
	return &DeleteUserAttributeGroupValueNoContent{}
}

/*DeleteUserAttributeGroupValueNoContent handles this case with default header values.

Value successfully unset
*/
type DeleteUserAttributeGroupValueNoContent struct {
}

func (o *DeleteUserAttributeGroupValueNoContent) Error() string {
	return fmt.Sprintf("[DELETE /groups/{group_id}/attribute_values/{user_attribute_id}][%d] deleteUserAttributeGroupValueNoContent ", 204)
}

func (o *DeleteUserAttributeGroupValueNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteUserAttributeGroupValueBadRequest creates a DeleteUserAttributeGroupValueBadRequest with default headers values
func NewDeleteUserAttributeGroupValueBadRequest() *DeleteUserAttributeGroupValueBadRequest {
	return &DeleteUserAttributeGroupValueBadRequest{}
}

/*DeleteUserAttributeGroupValueBadRequest handles this case with default header values.

Bad Request
*/
type DeleteUserAttributeGroupValueBadRequest struct {
	Payload *models.Error
}

func (o *DeleteUserAttributeGroupValueBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /groups/{group_id}/attribute_values/{user_attribute_id}][%d] deleteUserAttributeGroupValueBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteUserAttributeGroupValueBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteUserAttributeGroupValueNotFound creates a DeleteUserAttributeGroupValueNotFound with default headers values
func NewDeleteUserAttributeGroupValueNotFound() *DeleteUserAttributeGroupValueNotFound {
	return &DeleteUserAttributeGroupValueNotFound{}
}

/*DeleteUserAttributeGroupValueNotFound handles this case with default header values.

Not Found
*/
type DeleteUserAttributeGroupValueNotFound struct {
	Payload *models.Error
}

func (o *DeleteUserAttributeGroupValueNotFound) Error() string {
	return fmt.Sprintf("[DELETE /groups/{group_id}/attribute_values/{user_attribute_id}][%d] deleteUserAttributeGroupValueNotFound  %+v", 404, o.Payload)
}

func (o *DeleteUserAttributeGroupValueNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
