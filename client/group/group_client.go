// Code generated by go-swagger; DO NOT EDIT.

package group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new group API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for group API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AddGroupGroup adds a group to group

### Adds a new group to a group.

*/
func (a *Client) AddGroupGroup(params *AddGroupGroupParams) (*AddGroupGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddGroupGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "add_group_group",
		Method:             "POST",
		PathPattern:        "/groups/{group_id}/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddGroupGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddGroupGroupOK), nil

}

/*
AddGroupUser adds a user to group

### Adds a new user to a group.

*/
func (a *Client) AddGroupUser(params *AddGroupUserParams) (*AddGroupUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddGroupUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "add_group_user",
		Method:             "POST",
		PathPattern:        "/groups/{group_id}/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddGroupUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddGroupUserOK), nil

}

/*
AllGroupGroups gets all groups in group

### Get information about all the groups in a group

*/
func (a *Client) AllGroupGroups(params *AllGroupGroupsParams) (*AllGroupGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAllGroupGroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "all_group_groups",
		Method:             "GET",
		PathPattern:        "/groups/{group_id}/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AllGroupGroupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AllGroupGroupsOK), nil

}

/*
AllGroupUsers gets all users in group

### Get information about all the users directly included in a group.

*/
func (a *Client) AllGroupUsers(params *AllGroupUsersParams) (*AllGroupUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAllGroupUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "all_group_users",
		Method:             "GET",
		PathPattern:        "/groups/{group_id}/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AllGroupUsersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AllGroupUsersOK), nil

}

/*
AllGroups gets all groups

### Get information about all groups.

*/
func (a *Client) AllGroups(params *AllGroupsParams) (*AllGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAllGroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "all_groups",
		Method:             "GET",
		PathPattern:        "/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AllGroupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AllGroupsOK), nil

}

/*
CreateGroup creates group

### Creates a new group (admin only).

*/
func (a *Client) CreateGroup(params *CreateGroupParams) (*CreateGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "create_group",
		Method:             "POST",
		PathPattern:        "/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateGroupOK), nil

}

/*
DeleteGroup deletes group

### Deletes a group (admin only).

*/
func (a *Client) DeleteGroup(params *DeleteGroupParams) (*DeleteGroupNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete_group",
		Method:             "DELETE",
		PathPattern:        "/groups/{group_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteGroupNoContent), nil

}

/*
DeleteGroupFromGroup deletes a group from group

### Removes a group from a group.

*/
func (a *Client) DeleteGroupFromGroup(params *DeleteGroupFromGroupParams) (*DeleteGroupFromGroupNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteGroupFromGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete_group_from_group",
		Method:             "DELETE",
		PathPattern:        "/groups/{group_id}/groups/{deleting_group_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteGroupFromGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteGroupFromGroupNoContent), nil

}

/*
DeleteGroupUser removes a user from group

### Removes a user from a group.

*/
func (a *Client) DeleteGroupUser(params *DeleteGroupUserParams) (*DeleteGroupUserNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteGroupUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete_group_user",
		Method:             "DELETE",
		PathPattern:        "/groups/{group_id}/users/{user_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteGroupUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteGroupUserNoContent), nil

}

/*
DeleteUserAttributeGroupValue deletes user attribute group value

### Remove a user attribute value from a group.

*/
func (a *Client) DeleteUserAttributeGroupValue(params *DeleteUserAttributeGroupValueParams) (*DeleteUserAttributeGroupValueNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserAttributeGroupValueParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete_user_attribute_group_value",
		Method:             "DELETE",
		PathPattern:        "/groups/{group_id}/attribute_values/{user_attribute_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserAttributeGroupValueReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUserAttributeGroupValueNoContent), nil

}

/*
Group gets group

### Get information about a group.

*/
func (a *Client) Group(params *GroupParams) (*GroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "group",
		Method:             "GET",
		PathPattern:        "/groups/{group_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GroupOK), nil

}

/*
UpdateGroup updates group

### Updates the a group (admin only).
*/
func (a *Client) UpdateGroup(params *UpdateGroupParams) (*UpdateGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "update_group",
		Method:             "PATCH",
		PathPattern:        "/groups/{group_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateGroupOK), nil

}

/*
UpdateUserAttributeGroupValue sets user attribute group value

### Set the value of a user attribute for a group.

For information about how user attribute values are calculated, see [Set User Attribute Group Values](#!/UserAttribute/set_user_attribute_group_values).

*/
func (a *Client) UpdateUserAttributeGroupValue(params *UpdateUserAttributeGroupValueParams) (*UpdateUserAttributeGroupValueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUserAttributeGroupValueParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "update_user_attribute_group_value",
		Method:             "PATCH",
		PathPattern:        "/groups/{group_id}/attribute_values/{user_attribute_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateUserAttributeGroupValueReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateUserAttributeGroupValueOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
