// Code generated by go-swagger; DO NOT EDIT.

package group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/chenrui333/go-looker/models"
)

// AddGroupUserReader is a Reader for the AddGroupUser structure.
type AddGroupUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddGroupUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewAddGroupUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewAddGroupUserBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewAddGroupUserForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewAddGroupUserNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAddGroupUserOK creates a AddGroupUserOK with default headers values
func NewAddGroupUserOK() *AddGroupUserOK {
	return &AddGroupUserOK{}
}

/*AddGroupUserOK handles this case with default header values.

Added user.
*/
type AddGroupUserOK struct {
	Payload *models.User
}

func (o *AddGroupUserOK) Error() string {
	return fmt.Sprintf("[POST /groups/{group_id}/users][%d] addGroupUserOK  %+v", 200, o.Payload)
}

func (o *AddGroupUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.User)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddGroupUserBadRequest creates a AddGroupUserBadRequest with default headers values
func NewAddGroupUserBadRequest() *AddGroupUserBadRequest {
	return &AddGroupUserBadRequest{}
}

/*AddGroupUserBadRequest handles this case with default header values.

Bad Request
*/
type AddGroupUserBadRequest struct {
	Payload *models.Error
}

func (o *AddGroupUserBadRequest) Error() string {
	return fmt.Sprintf("[POST /groups/{group_id}/users][%d] addGroupUserBadRequest  %+v", 400, o.Payload)
}

func (o *AddGroupUserBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddGroupUserForbidden creates a AddGroupUserForbidden with default headers values
func NewAddGroupUserForbidden() *AddGroupUserForbidden {
	return &AddGroupUserForbidden{}
}

/*AddGroupUserForbidden handles this case with default header values.

Permission Denied
*/
type AddGroupUserForbidden struct {
	Payload *models.Error
}

func (o *AddGroupUserForbidden) Error() string {
	return fmt.Sprintf("[POST /groups/{group_id}/users][%d] addGroupUserForbidden  %+v", 403, o.Payload)
}

func (o *AddGroupUserForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddGroupUserNotFound creates a AddGroupUserNotFound with default headers values
func NewAddGroupUserNotFound() *AddGroupUserNotFound {
	return &AddGroupUserNotFound{}
}

/*AddGroupUserNotFound handles this case with default header values.

Not Found
*/
type AddGroupUserNotFound struct {
	Payload *models.Error
}

func (o *AddGroupUserNotFound) Error() string {
	return fmt.Sprintf("[POST /groups/{group_id}/users][%d] addGroupUserNotFound  %+v", 404, o.Payload)
}

func (o *AddGroupUserNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
