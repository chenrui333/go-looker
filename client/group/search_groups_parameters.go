// Code generated by go-swagger; DO NOT EDIT.

package group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewSearchGroupsParams creates a new SearchGroupsParams object
// with the default values initialized.
func NewSearchGroupsParams() *SearchGroupsParams {
	var ()
	return &SearchGroupsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSearchGroupsParamsWithTimeout creates a new SearchGroupsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSearchGroupsParamsWithTimeout(timeout time.Duration) *SearchGroupsParams {
	var ()
	return &SearchGroupsParams{

		timeout: timeout,
	}
}

// NewSearchGroupsParamsWithContext creates a new SearchGroupsParams object
// with the default values initialized, and the ability to set a context for a request
func NewSearchGroupsParamsWithContext(ctx context.Context) *SearchGroupsParams {
	var ()
	return &SearchGroupsParams{

		Context: ctx,
	}
}

// NewSearchGroupsParamsWithHTTPClient creates a new SearchGroupsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSearchGroupsParamsWithHTTPClient(client *http.Client) *SearchGroupsParams {
	var ()
	return &SearchGroupsParams{
		HTTPClient: client,
	}
}

/*SearchGroupsParams contains all the parameters to send to the API endpoint
for the search groups operation typically these are written to a http.Request
*/
type SearchGroupsParams struct {

	/*ExternalGroupID
	  Match group external_group_id.

	*/
	ExternalGroupID *bool
	/*ExternallyManaged
	  Match group externally_managed.

	*/
	ExternallyManaged *bool
	/*ExternallyOrphaned
	  Match group externally_orphaned.

	*/
	ExternallyOrphaned *bool
	/*Fields
	  Requested fields.

	*/
	Fields *string
	/*FilterOr
	  Combine given search criteria in a boolean OR expression

	*/
	FilterOr *bool
	/*ID
	  Match group id.

	*/
	ID *int64
	/*Limit
	  Number of results to return (used with `offset`).

	*/
	Limit *int64
	/*Name
	  Match group name.

	*/
	Name *string
	/*Offset
	  Number of results to skip before returning any (used with `limit`).

	*/
	Offset *int64
	/*Sorts
	  Fields to sort by.

	*/
	Sorts *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the search groups params
func (o *SearchGroupsParams) WithTimeout(timeout time.Duration) *SearchGroupsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the search groups params
func (o *SearchGroupsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the search groups params
func (o *SearchGroupsParams) WithContext(ctx context.Context) *SearchGroupsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the search groups params
func (o *SearchGroupsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the search groups params
func (o *SearchGroupsParams) WithHTTPClient(client *http.Client) *SearchGroupsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the search groups params
func (o *SearchGroupsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithExternalGroupID adds the externalGroupID to the search groups params
func (o *SearchGroupsParams) WithExternalGroupID(externalGroupID *bool) *SearchGroupsParams {
	o.SetExternalGroupID(externalGroupID)
	return o
}

// SetExternalGroupID adds the externalGroupId to the search groups params
func (o *SearchGroupsParams) SetExternalGroupID(externalGroupID *bool) {
	o.ExternalGroupID = externalGroupID
}

// WithExternallyManaged adds the externallyManaged to the search groups params
func (o *SearchGroupsParams) WithExternallyManaged(externallyManaged *bool) *SearchGroupsParams {
	o.SetExternallyManaged(externallyManaged)
	return o
}

// SetExternallyManaged adds the externallyManaged to the search groups params
func (o *SearchGroupsParams) SetExternallyManaged(externallyManaged *bool) {
	o.ExternallyManaged = externallyManaged
}

// WithExternallyOrphaned adds the externallyOrphaned to the search groups params
func (o *SearchGroupsParams) WithExternallyOrphaned(externallyOrphaned *bool) *SearchGroupsParams {
	o.SetExternallyOrphaned(externallyOrphaned)
	return o
}

// SetExternallyOrphaned adds the externallyOrphaned to the search groups params
func (o *SearchGroupsParams) SetExternallyOrphaned(externallyOrphaned *bool) {
	o.ExternallyOrphaned = externallyOrphaned
}

// WithFields adds the fields to the search groups params
func (o *SearchGroupsParams) WithFields(fields *string) *SearchGroupsParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the search groups params
func (o *SearchGroupsParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithFilterOr adds the filterOr to the search groups params
func (o *SearchGroupsParams) WithFilterOr(filterOr *bool) *SearchGroupsParams {
	o.SetFilterOr(filterOr)
	return o
}

// SetFilterOr adds the filterOr to the search groups params
func (o *SearchGroupsParams) SetFilterOr(filterOr *bool) {
	o.FilterOr = filterOr
}

// WithID adds the id to the search groups params
func (o *SearchGroupsParams) WithID(id *int64) *SearchGroupsParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the search groups params
func (o *SearchGroupsParams) SetID(id *int64) {
	o.ID = id
}

// WithLimit adds the limit to the search groups params
func (o *SearchGroupsParams) WithLimit(limit *int64) *SearchGroupsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the search groups params
func (o *SearchGroupsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithName adds the name to the search groups params
func (o *SearchGroupsParams) WithName(name *string) *SearchGroupsParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the search groups params
func (o *SearchGroupsParams) SetName(name *string) {
	o.Name = name
}

// WithOffset adds the offset to the search groups params
func (o *SearchGroupsParams) WithOffset(offset *int64) *SearchGroupsParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the search groups params
func (o *SearchGroupsParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithSorts adds the sorts to the search groups params
func (o *SearchGroupsParams) WithSorts(sorts *string) *SearchGroupsParams {
	o.SetSorts(sorts)
	return o
}

// SetSorts adds the sorts to the search groups params
func (o *SearchGroupsParams) SetSorts(sorts *string) {
	o.Sorts = sorts
}

// WriteToRequest writes these params to a swagger request
func (o *SearchGroupsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ExternalGroupID != nil {

		// query param external_group_id
		var qrExternalGroupID bool
		if o.ExternalGroupID != nil {
			qrExternalGroupID = *o.ExternalGroupID
		}
		qExternalGroupID := swag.FormatBool(qrExternalGroupID)
		if qExternalGroupID != "" {
			if err := r.SetQueryParam("external_group_id", qExternalGroupID); err != nil {
				return err
			}
		}

	}

	if o.ExternallyManaged != nil {

		// query param externally_managed
		var qrExternallyManaged bool
		if o.ExternallyManaged != nil {
			qrExternallyManaged = *o.ExternallyManaged
		}
		qExternallyManaged := swag.FormatBool(qrExternallyManaged)
		if qExternallyManaged != "" {
			if err := r.SetQueryParam("externally_managed", qExternallyManaged); err != nil {
				return err
			}
		}

	}

	if o.ExternallyOrphaned != nil {

		// query param externally_orphaned
		var qrExternallyOrphaned bool
		if o.ExternallyOrphaned != nil {
			qrExternallyOrphaned = *o.ExternallyOrphaned
		}
		qExternallyOrphaned := swag.FormatBool(qrExternallyOrphaned)
		if qExternallyOrphaned != "" {
			if err := r.SetQueryParam("externally_orphaned", qExternallyOrphaned); err != nil {
				return err
			}
		}

	}

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	if o.FilterOr != nil {

		// query param filter_or
		var qrFilterOr bool
		if o.FilterOr != nil {
			qrFilterOr = *o.FilterOr
		}
		qFilterOr := swag.FormatBool(qrFilterOr)
		if qFilterOr != "" {
			if err := r.SetQueryParam("filter_or", qFilterOr); err != nil {
				return err
			}
		}

	}

	if o.ID != nil {

		// query param id
		var qrID int64
		if o.ID != nil {
			qrID = *o.ID
		}
		qID := swag.FormatInt64(qrID)
		if qID != "" {
			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.Sorts != nil {

		// query param sorts
		var qrSorts string
		if o.Sorts != nil {
			qrSorts = *o.Sorts
		}
		qSorts := qrSorts
		if qSorts != "" {
			if err := r.SetQueryParam("sorts", qSorts); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
