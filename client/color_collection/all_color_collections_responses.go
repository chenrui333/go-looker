// Code generated by go-swagger; DO NOT EDIT.

package color_collection

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/chenrui333/go-looker/models"
)

// AllColorCollectionsReader is a Reader for the AllColorCollections structure.
type AllColorCollectionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AllColorCollectionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAllColorCollectionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAllColorCollectionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAllColorCollectionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAllColorCollectionsOK creates a AllColorCollectionsOK with default headers values
func NewAllColorCollectionsOK() *AllColorCollectionsOK {
	return &AllColorCollectionsOK{}
}

/*AllColorCollectionsOK handles this case with default header values.

ColorCollections
*/
type AllColorCollectionsOK struct {
	Payload []*models.ColorCollection
}

func (o *AllColorCollectionsOK) Error() string {
	return fmt.Sprintf("[GET /color_collections][%d] allColorCollectionsOK  %+v", 200, o.Payload)
}

func (o *AllColorCollectionsOK) GetPayload() []*models.ColorCollection {
	return o.Payload
}

func (o *AllColorCollectionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAllColorCollectionsBadRequest creates a AllColorCollectionsBadRequest with default headers values
func NewAllColorCollectionsBadRequest() *AllColorCollectionsBadRequest {
	return &AllColorCollectionsBadRequest{}
}

/*AllColorCollectionsBadRequest handles this case with default header values.

Bad Request
*/
type AllColorCollectionsBadRequest struct {
	Payload *models.Error
}

func (o *AllColorCollectionsBadRequest) Error() string {
	return fmt.Sprintf("[GET /color_collections][%d] allColorCollectionsBadRequest  %+v", 400, o.Payload)
}

func (o *AllColorCollectionsBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *AllColorCollectionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAllColorCollectionsNotFound creates a AllColorCollectionsNotFound with default headers values
func NewAllColorCollectionsNotFound() *AllColorCollectionsNotFound {
	return &AllColorCollectionsNotFound{}
}

/*AllColorCollectionsNotFound handles this case with default header values.

Not Found
*/
type AllColorCollectionsNotFound struct {
	Payload *models.Error
}

func (o *AllColorCollectionsNotFound) Error() string {
	return fmt.Sprintf("[GET /color_collections][%d] allColorCollectionsNotFound  %+v", 404, o.Payload)
}

func (o *AllColorCollectionsNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *AllColorCollectionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
