// Code generated by go-swagger; DO NOT EDIT.

package color_collection

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/chenrui333/go-looker/models"
)

// DefaultColorCollectionReader is a Reader for the DefaultColorCollection structure.
type DefaultColorCollectionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DefaultColorCollectionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDefaultColorCollectionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDefaultColorCollectionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDefaultColorCollectionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDefaultColorCollectionOK creates a DefaultColorCollectionOK with default headers values
func NewDefaultColorCollectionOK() *DefaultColorCollectionOK {
	return &DefaultColorCollectionOK{}
}

/*DefaultColorCollectionOK handles this case with default header values.

ColorCollection
*/
type DefaultColorCollectionOK struct {
	Payload *models.ColorCollection
}

func (o *DefaultColorCollectionOK) Error() string {
	return fmt.Sprintf("[GET /color_collections/default][%d] defaultColorCollectionOK  %+v", 200, o.Payload)
}

func (o *DefaultColorCollectionOK) GetPayload() *models.ColorCollection {
	return o.Payload
}

func (o *DefaultColorCollectionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ColorCollection)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDefaultColorCollectionBadRequest creates a DefaultColorCollectionBadRequest with default headers values
func NewDefaultColorCollectionBadRequest() *DefaultColorCollectionBadRequest {
	return &DefaultColorCollectionBadRequest{}
}

/*DefaultColorCollectionBadRequest handles this case with default header values.

Bad Request
*/
type DefaultColorCollectionBadRequest struct {
	Payload *models.Error
}

func (o *DefaultColorCollectionBadRequest) Error() string {
	return fmt.Sprintf("[GET /color_collections/default][%d] defaultColorCollectionBadRequest  %+v", 400, o.Payload)
}

func (o *DefaultColorCollectionBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *DefaultColorCollectionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDefaultColorCollectionNotFound creates a DefaultColorCollectionNotFound with default headers values
func NewDefaultColorCollectionNotFound() *DefaultColorCollectionNotFound {
	return &DefaultColorCollectionNotFound{}
}

/*DefaultColorCollectionNotFound handles this case with default header values.

Not Found
*/
type DefaultColorCollectionNotFound struct {
	Payload *models.Error
}

func (o *DefaultColorCollectionNotFound) Error() string {
	return fmt.Sprintf("[GET /color_collections/default][%d] defaultColorCollectionNotFound  %+v", 404, o.Payload)
}

func (o *DefaultColorCollectionNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *DefaultColorCollectionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
