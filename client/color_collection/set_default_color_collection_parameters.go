// Code generated by go-swagger; DO NOT EDIT.

package color_collection

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewSetDefaultColorCollectionParams creates a new SetDefaultColorCollectionParams object
// with the default values initialized.
func NewSetDefaultColorCollectionParams() *SetDefaultColorCollectionParams {
	var ()
	return &SetDefaultColorCollectionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSetDefaultColorCollectionParamsWithTimeout creates a new SetDefaultColorCollectionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSetDefaultColorCollectionParamsWithTimeout(timeout time.Duration) *SetDefaultColorCollectionParams {
	var ()
	return &SetDefaultColorCollectionParams{

		timeout: timeout,
	}
}

// NewSetDefaultColorCollectionParamsWithContext creates a new SetDefaultColorCollectionParams object
// with the default values initialized, and the ability to set a context for a request
func NewSetDefaultColorCollectionParamsWithContext(ctx context.Context) *SetDefaultColorCollectionParams {
	var ()
	return &SetDefaultColorCollectionParams{

		Context: ctx,
	}
}

// NewSetDefaultColorCollectionParamsWithHTTPClient creates a new SetDefaultColorCollectionParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSetDefaultColorCollectionParamsWithHTTPClient(client *http.Client) *SetDefaultColorCollectionParams {
	var ()
	return &SetDefaultColorCollectionParams{
		HTTPClient: client,
	}
}

/*SetDefaultColorCollectionParams contains all the parameters to send to the API endpoint
for the set default color collection operation typically these are written to a http.Request
*/
type SetDefaultColorCollectionParams struct {

	/*CollectionID
	  ID of color collection to set as default

	*/
	CollectionID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the set default color collection params
func (o *SetDefaultColorCollectionParams) WithTimeout(timeout time.Duration) *SetDefaultColorCollectionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the set default color collection params
func (o *SetDefaultColorCollectionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the set default color collection params
func (o *SetDefaultColorCollectionParams) WithContext(ctx context.Context) *SetDefaultColorCollectionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the set default color collection params
func (o *SetDefaultColorCollectionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the set default color collection params
func (o *SetDefaultColorCollectionParams) WithHTTPClient(client *http.Client) *SetDefaultColorCollectionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the set default color collection params
func (o *SetDefaultColorCollectionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCollectionID adds the collectionID to the set default color collection params
func (o *SetDefaultColorCollectionParams) WithCollectionID(collectionID string) *SetDefaultColorCollectionParams {
	o.SetCollectionID(collectionID)
	return o
}

// SetCollectionID adds the collectionId to the set default color collection params
func (o *SetDefaultColorCollectionParams) SetCollectionID(collectionID string) {
	o.CollectionID = collectionID
}

// WriteToRequest writes these params to a swagger request
func (o *SetDefaultColorCollectionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param collection_id
	qrCollectionID := o.CollectionID
	qCollectionID := qrCollectionID
	if qCollectionID != "" {
		if err := r.SetQueryParam("collection_id", qCollectionID); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
