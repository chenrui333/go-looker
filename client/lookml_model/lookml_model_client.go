// Code generated by go-swagger; DO NOT EDIT.

package lookml_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new lookml model API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for lookml model API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AllLookmlModels gets all look m l models

### Get information about all lookml models.

*/
func (a *Client) AllLookmlModels(params *AllLookmlModelsParams) (*AllLookmlModelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAllLookmlModelsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "all_lookml_models",
		Method:             "GET",
		PathPattern:        "/lookml_models",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AllLookmlModelsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AllLookmlModelsOK), nil

}

/*
CreateLookmlModel creates look m l model

### Create a lookml model using the specified configuration.

*/
func (a *Client) CreateLookmlModel(params *CreateLookmlModelParams) (*CreateLookmlModelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateLookmlModelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "create_lookml_model",
		Method:             "POST",
		PathPattern:        "/lookml_models",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateLookmlModelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateLookmlModelOK), nil

}

/*
DeleteLookmlModel deletes look m l model

### Delete a lookml model.

*/
func (a *Client) DeleteLookmlModel(params *DeleteLookmlModelParams) (*DeleteLookmlModelNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLookmlModelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete_lookml_model",
		Method:             "DELETE",
		PathPattern:        "/lookml_models/{lookml_model_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteLookmlModelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteLookmlModelNoContent), nil

}

/*
LookmlModel gets look m l model

### Get information about a lookml model.

*/
func (a *Client) LookmlModel(params *LookmlModelParams) (*LookmlModelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLookmlModelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "lookml_model",
		Method:             "GET",
		PathPattern:        "/lookml_models/{lookml_model_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LookmlModelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LookmlModelOK), nil

}

/*
LookmlModelExplore gets look m l model explore

### Get information about a lookml model explore.

*/
func (a *Client) LookmlModelExplore(params *LookmlModelExploreParams) (*LookmlModelExploreOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLookmlModelExploreParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "lookml_model_explore",
		Method:             "GET",
		PathPattern:        "/lookml_models/{lookml_model_name}/explores/{explore_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LookmlModelExploreReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LookmlModelExploreOK), nil

}

/*
UpdateLookmlModel updates look m l model

### Update a lookml model using the specified configuration.

*/
func (a *Client) UpdateLookmlModel(params *UpdateLookmlModelParams) (*UpdateLookmlModelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateLookmlModelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "update_lookml_model",
		Method:             "PATCH",
		PathPattern:        "/lookml_models/{lookml_model_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateLookmlModelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateLookmlModelOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
